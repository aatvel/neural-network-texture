{"ast":null,"code":"/*\r\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\r\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\n\n/**\r\n * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/long.js for details\r\n */\n(function (global, factory) {\n  /* AMD */\n  if (typeof define === 'function' && define[\"amd\"]) define([], factory);\n  /* CommonJS */\n  else if (typeof require === 'function' && typeof module === \"object\" && module && module[\"exports\"]) module[\"exports\"] = factory();\n  /* Global */\n  else (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"Long\"] = factory();\n})(this, function () {\n  \"use strict\";\n  /**\r\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n   *  See the from* functions below for more convenient ways of constructing Longs.\r\n   * @exports Long\r\n   * @class A Long class for representing a 64 bit two's-complement integer value.\r\n   * @param {number} low The low (signed) 32 bits of the long\r\n   * @param {number} high The high (signed) 32 bits of the long\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n   * @constructor\r\n   */\n\n  function Long(low, high, unsigned) {\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\n    this.low = low | 0;\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\n\n    this.high = high | 0;\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\n\n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n\n  /**\r\n   * An indicator used to reliably determine if an object is a Long or not.\r\n   * @type {boolean}\r\n   * @const\r\n   * @private\r\n   */\n\n\n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true,\n    enumerable: false,\n    configurable: false\n  });\n  /**\r\n   * @function\r\n   * @param {*} obj Object\r\n   * @returns {boolean}\r\n   * @inner\r\n   */\n\n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\r\n   * Tests if the specified object is a Long.\r\n   * @function\r\n   * @param {*} obj Object\r\n   * @returns {boolean}\r\n   */\n\n\n  Long.isLong = isLong;\n  /**\r\n   * A cache of the Long representations of small integer values.\r\n   * @type {!Object}\r\n   * @inner\r\n   */\n\n  var INT_CACHE = {};\n  /**\r\n   * A cache of the Long representations of small unsigned integer values.\r\n   * @type {!Object}\r\n   * @inner\r\n   */\n\n  var UINT_CACHE = {};\n  /**\r\n   * @param {number} value\r\n   * @param {boolean=} unsigned\r\n   * @returns {!Long}\r\n   * @inner\r\n   */\n\n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n\n    if (unsigned) {\n      value >>>= 0;\n\n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n\n      obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n\n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n\n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\r\n   * Returns a Long representing the given 32 bit integer value.\r\n   * @function\r\n   * @param {number} value The 32 bit integer in question\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n   * @returns {!Long} The corresponding Long value\r\n   */\n\n\n  Long.fromInt = fromInt;\n  /**\r\n   * @param {number} value\r\n   * @param {boolean=} unsigned\r\n   * @returns {!Long}\r\n   * @inner\r\n   */\n\n  function fromNumber(value, unsigned) {\n    if (isNaN(value) || !isFinite(value)) return unsigned ? UZERO : ZERO;\n\n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n\n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\r\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n   * @function\r\n   * @param {number} value The number in question\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n   * @returns {!Long} The corresponding Long value\r\n   */\n\n\n  Long.fromNumber = fromNumber;\n  /**\r\n   * @param {number} lowBits\r\n   * @param {number} highBits\r\n   * @param {boolean=} unsigned\r\n   * @returns {!Long}\r\n   * @inner\r\n   */\n\n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\r\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n   *  assumed to use 32 bits.\r\n   * @function\r\n   * @param {number} lowBits The low 32 bits\r\n   * @param {number} highBits The high 32 bits\r\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n   * @returns {!Long} The corresponding Long value\r\n   */\n\n\n  Long.fromBits = fromBits;\n  /**\r\n   * @function\r\n   * @param {number} base\r\n   * @param {number} exponent\r\n   * @returns {number}\r\n   * @inner\r\n   */\n\n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n  /**\r\n   * @param {string} str\r\n   * @param {(boolean|number)=} unsigned\r\n   * @param {number=} radix\r\n   * @returns {!Long}\r\n   * @inner\r\n   */\n\n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return ZERO;\n\n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned, unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n\n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n\n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n\n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\r\n   * Returns a Long representation of the given string, written using the specified radix.\r\n   * @function\r\n   * @param {string} str The textual representation of the Long\r\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n   * @returns {!Long} The corresponding Long value\r\n   */\n\n\n  Long.fromString = fromString;\n  /**\r\n   * @function\r\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n   * @returns {!Long}\r\n   * @inner\r\n   */\n\n  function fromValue(val) {\n    if (val\n    /* is compatible */\n    instanceof Long) return val;\n    if (typeof val === 'number') return fromNumber(val);\n    if (typeof val === 'string') return fromString(val); // Throws for non-objects, converts non-instanceof Long:\n\n    return fromBits(val.low, val.high, val.unsigned);\n  }\n  /**\r\n   * Converts the specified value to a Long.\r\n   * @function\r\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n   * @returns {!Long}\r\n   */\n\n\n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n\n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n\n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n\n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n\n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\r\n   * @type {number}\r\n   * @const\r\n   * @inner\r\n   */\n\n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\r\n   * @type {!Long}\r\n   * @const\r\n   * @inner\r\n   */\n\n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n\n  var ZERO = fromInt(0);\n  /**\r\n   * Signed zero.\r\n   * @type {!Long}\r\n   */\n\n  Long.ZERO = ZERO;\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n\n  var UZERO = fromInt(0, true);\n  /**\r\n   * Unsigned zero.\r\n   * @type {!Long}\r\n   */\n\n  Long.UZERO = UZERO;\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n\n  var ONE = fromInt(1);\n  /**\r\n   * Signed one.\r\n   * @type {!Long}\r\n   */\n\n  Long.ONE = ONE;\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n\n  var UONE = fromInt(1, true);\n  /**\r\n   * Unsigned one.\r\n   * @type {!Long}\r\n   */\n\n  Long.UONE = UONE;\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n\n  var NEG_ONE = fromInt(-1);\n  /**\r\n   * Signed negative one.\r\n   * @type {!Long}\r\n   */\n\n  Long.NEG_ONE = NEG_ONE;\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n\n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\r\n   * Maximum signed value.\r\n   * @type {!Long}\r\n   */\n\n  Long.MAX_VALUE = MAX_VALUE;\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n\n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\r\n   * Maximum unsigned value.\r\n   * @type {!Long}\r\n   */\n\n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\r\n   * @type {!Long}\r\n   * @inner\r\n   */\n\n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\r\n   * Minimum signed value.\r\n   * @type {!Long}\r\n   */\n\n  Long.MIN_VALUE = MIN_VALUE;\n  /**\r\n   * @alias Long.prototype\r\n   * @inner\r\n   */\n\n  var LongPrototype = Long.prototype;\n  /**\r\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n   * @returns {number}\r\n   */\n\n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\r\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n   * @returns {number}\r\n   */\n\n\n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\r\n   * Converts the Long to a string written in the specified radix.\r\n   * @param {number=} radix Radix (2-36), defaults to 10\r\n   * @returns {string}\r\n   * @override\r\n   * @throws {RangeError} If `radix` is out of range\r\n   */\n\n\n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n\n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n\n\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n\n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n\n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\r\n   * Gets the high 32 bits as a signed integer.\r\n   * @returns {number} Signed high bits\r\n   */\n\n\n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\r\n   * Gets the high 32 bits as an unsigned integer.\r\n   * @returns {number} Unsigned high bits\r\n   */\n\n\n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\r\n   * Gets the low 32 bits as a signed integer.\r\n   * @returns {number} Signed low bits\r\n   */\n\n\n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\r\n   * Gets the low 32 bits as an unsigned integer.\r\n   * @returns {number} Unsigned low bits\r\n   */\n\n\n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\r\n   * Gets the number of bits needed to represent the absolute value of this Long.\r\n   * @returns {number}\r\n   */\n\n\n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n\n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n\n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\r\n   * Tests if this Long's value equals zero.\r\n   * @returns {boolean}\r\n   */\n\n\n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\r\n   * Tests if this Long's value is negative.\r\n   * @returns {boolean}\r\n   */\n\n\n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\r\n   * Tests if this Long's value is positive.\r\n   * @returns {boolean}\r\n   */\n\n\n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\r\n   * Tests if this Long's value is odd.\r\n   * @returns {boolean}\r\n   */\n\n\n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\r\n   * Tests if this Long's value is even.\r\n   * @returns {boolean}\r\n   */\n\n\n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\r\n   * Tests if this Long's value equals the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n\n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\r\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n\n  LongPrototype.eq = LongPrototype.equals;\n  /**\r\n   * Tests if this Long's value differs from the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\r\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n\n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\r\n   * Tests if this Long's value is less than the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\r\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n\n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\r\n   * Tests if this Long's value is less than or equal the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\r\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n\n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\r\n   * Tests if this Long's value is greater than the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\r\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n\n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\r\n   * Tests if this Long's value is greater than or equal the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\r\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {boolean}\r\n   */\n\n\n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\r\n   * Compares this Long's value with the specified's.\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n   *  if the given one is greater\r\n   */\n\n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n\n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n\n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\r\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n   * @function\r\n   * @param {!Long|number|string} other Other value\r\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n   *  if the given one is greater\r\n   */\n\n\n  LongPrototype.comp = LongPrototype.compare;\n  /**\r\n   * Negates this Long's value.\r\n   * @returns {!Long} Negated Long\r\n   */\n\n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\r\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n   * @function\r\n   * @returns {!Long} Negated Long\r\n   */\n\n\n  LongPrototype.neg = LongPrototype.negate;\n  /**\r\n   * Returns the sum of this and the specified Long.\r\n   * @param {!Long|number|string} addend Addend\r\n   * @returns {!Long} Sum\r\n   */\n\n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\r\n   * Returns the difference of this and the specified Long.\r\n   * @param {!Long|number|string} subtrahend Subtrahend\r\n   * @returns {!Long} Difference\r\n   */\n\n\n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\r\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n   * @function\r\n   * @param {!Long|number|string} subtrahend Subtrahend\r\n   * @returns {!Long} Difference\r\n   */\n\n\n  LongPrototype.sub = LongPrototype.subtract;\n  /**\r\n   * Returns the product of this and the specified Long.\r\n   * @param {!Long|number|string} multiplier Multiplier\r\n   * @returns {!Long} Product\r\n   */\n\n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return ZERO;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier);\n    if (multiplier.isZero()) return ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n\n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n\n\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\r\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n   * @function\r\n   * @param {!Long|number|string} multiplier Multiplier\r\n   * @returns {!Long} Product\r\n   */\n\n\n  LongPrototype.mul = LongPrototype.multiply;\n  /**\r\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n   *  unsigned if this Long is unsigned.\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Quotient\r\n   */\n\n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero');\n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n\n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n\n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n\n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n\n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n\n\n    rem = this;\n\n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n\n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n\n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n\n\n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n\n    return res;\n  };\n  /**\r\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n   * @function\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Quotient\r\n   */\n\n\n  LongPrototype.div = LongPrototype.divide;\n  /**\r\n   * Returns this Long modulo the specified.\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Remainder\r\n   */\n\n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\r\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n   * @function\r\n   * @param {!Long|number|string} divisor Divisor\r\n   * @returns {!Long} Remainder\r\n   */\n\n\n  LongPrototype.mod = LongPrototype.modulo;\n  /**\r\n   * Returns the bitwise NOT of this Long.\r\n   * @returns {!Long}\r\n   */\n\n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\r\n   * Returns the bitwise AND of this Long and the specified.\r\n   * @param {!Long|number|string} other Other Long\r\n   * @returns {!Long}\r\n   */\n\n\n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\r\n   * Returns the bitwise OR of this Long and the specified.\r\n   * @param {!Long|number|string} other Other Long\r\n   * @returns {!Long}\r\n   */\n\n\n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\r\n   * Returns the bitwise XOR of this Long and the given one.\r\n   * @param {!Long|number|string} other Other Long\r\n   * @returns {!Long}\r\n   */\n\n\n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\r\n   * Returns this Long with bits shifted to the left by the given amount.\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\n\n\n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\r\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\n\n\n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\r\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\n\n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\r\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\n\n\n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\r\n   * Returns this Long with bits logically shifted to the right by the given amount.\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\n\n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    numBits &= 63;\n    if (numBits === 0) return this;else {\n      var high = this.high;\n\n      if (numBits < 32) {\n        var low = this.low;\n        return fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);\n      } else if (numBits === 32) return fromBits(high, 0, this.unsigned);else return fromBits(high >>> numBits - 32, 0, this.unsigned);\n    }\n  };\n  /**\r\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n   * @function\r\n   * @param {number|!Long} numBits Number of bits\r\n   * @returns {!Long} Shifted Long\r\n   */\n\n\n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\r\n   * Converts this Long to signed.\r\n   * @returns {!Long} Signed long\r\n   */\n\n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\r\n   * Converts this Long to unsigned.\r\n   * @returns {!Long} Unsigned long\r\n   */\n\n\n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\r\n   * Converts this Long to its byte representation.\r\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n   * @returns {!Array.<number>} Byte representation\r\n   */\n\n\n  LongPrototype.toBytes = function (le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\r\n   * Converts this Long to its little endian byte representation.\r\n   * @returns {!Array.<number>} Little endian byte representation\r\n   */\n\n\n  LongPrototype.toBytesLE = function () {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24 & 0xff, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24 & 0xff];\n  };\n  /**\r\n   * Converts this Long to its big endian byte representation.\r\n   * @returns {!Array.<number>} Big endian byte representation\r\n   */\n\n\n  LongPrototype.toBytesBE = function () {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24 & 0xff, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24 & 0xff, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n\n  return Long;\n});","map":{"version":3,"names":["global","factory","define","require","module","Long","low","high","unsigned","prototype","__isLong__","Object","defineProperty","value","enumerable","configurable","isLong","obj","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","isFinite","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","str","radix","length","Error","RangeError","p","indexOf","substring","radixToPower","result","i","size","min","parseInt","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","isPositive","isOdd","isEven","equals","other","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","divide","divisor","approx","res","halfThis","shr","shl","toUnsigned","shru","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","toSigned","toBytes","le","toBytesLE","toBytesBE","hi","lo"],"sources":["C:/Users/Asus/Documents/threejs/miro learning/20.12 neuroweb textures/node_modules/bytebuffer/node_modules/long/dist/long.js"],"sourcesContent":["/*\r\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\r\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\r\n\r\n/**\r\n * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/long.js for details\r\n */\r\n(function(global, factory) {\r\n\r\n    /* AMD */ if (typeof define === 'function' && define[\"amd\"])\r\n        define([], factory);\r\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === \"object\" && module && module[\"exports\"])\r\n        module[\"exports\"] = factory();\r\n    /* Global */ else\r\n        (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"Long\"] = factory();\r\n\r\n})(this, function() {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n     *  See the from* functions below for more convenient ways of constructing Longs.\r\n     * @exports Long\r\n     * @class A Long class for representing a 64 bit two's-complement integer value.\r\n     * @param {number} low The low (signed) 32 bits of the long\r\n     * @param {number} high The high (signed) 32 bits of the long\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @constructor\r\n     */\r\n    function Long(low, high, unsigned) {\r\n\r\n        /**\r\n         * The low 32 bits as a signed value.\r\n         * @type {number}\r\n         */\r\n        this.low = low | 0;\r\n\r\n        /**\r\n         * The high 32 bits as a signed value.\r\n         * @type {number}\r\n         */\r\n        this.high = high | 0;\r\n\r\n        /**\r\n         * Whether unsigned or not.\r\n         * @type {boolean}\r\n         */\r\n        this.unsigned = !!unsigned;\r\n    }\r\n\r\n    // The internal representation of a long is the two given signed, 32-bit values.\r\n    // We use 32-bit pieces because these are the size of integers on which\r\n    // Javascript performs bit-operations.  For operations like addition and\r\n    // multiplication, we split each number into 16 bit pieces, which can easily be\r\n    // multiplied within Javascript's floating-point representation without overflow\r\n    // or change in sign.\r\n    //\r\n    // In the algorithms below, we frequently reduce the negative case to the\r\n    // positive case by negating the input(s) and then post-processing the result.\r\n    // Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n    // a positive number, it overflows back into a negative).  Not handling this\r\n    // case would often result in infinite recursion.\r\n    //\r\n    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n    // methods on which they depend.\r\n\r\n    /**\r\n     * An indicator used to reliably determine if an object is a Long or not.\r\n     * @type {boolean}\r\n     * @const\r\n     * @private\r\n     */\r\n    Long.prototype.__isLong__;\r\n\r\n    Object.defineProperty(Long.prototype, \"__isLong__\", {\r\n        value: true,\r\n        enumerable: false,\r\n        configurable: false\r\n    });\r\n\r\n    /**\r\n     * @function\r\n     * @param {*} obj Object\r\n     * @returns {boolean}\r\n     * @inner\r\n     */\r\n    function isLong(obj) {\r\n        return (obj && obj[\"__isLong__\"]) === true;\r\n    }\r\n\r\n    /**\r\n     * Tests if the specified object is a Long.\r\n     * @function\r\n     * @param {*} obj Object\r\n     * @returns {boolean}\r\n     */\r\n    Long.isLong = isLong;\r\n\r\n    /**\r\n     * A cache of the Long representations of small integer values.\r\n     * @type {!Object}\r\n     * @inner\r\n     */\r\n    var INT_CACHE = {};\r\n\r\n    /**\r\n     * A cache of the Long representations of small unsigned integer values.\r\n     * @type {!Object}\r\n     * @inner\r\n     */\r\n    var UINT_CACHE = {};\r\n\r\n    /**\r\n     * @param {number} value\r\n     * @param {boolean=} unsigned\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromInt(value, unsigned) {\r\n        var obj, cachedObj, cache;\r\n        if (unsigned) {\r\n            value >>>= 0;\r\n            if (cache = (0 <= value && value < 256)) {\r\n                cachedObj = UINT_CACHE[value];\r\n                if (cachedObj)\r\n                    return cachedObj;\r\n            }\r\n            obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n            if (cache)\r\n                UINT_CACHE[value] = obj;\r\n            return obj;\r\n        } else {\r\n            value |= 0;\r\n            if (cache = (-128 <= value && value < 128)) {\r\n                cachedObj = INT_CACHE[value];\r\n                if (cachedObj)\r\n                    return cachedObj;\r\n            }\r\n            obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n            if (cache)\r\n                INT_CACHE[value] = obj;\r\n            return obj;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representing the given 32 bit integer value.\r\n     * @function\r\n     * @param {number} value The 32 bit integer in question\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromInt = fromInt;\r\n\r\n    /**\r\n     * @param {number} value\r\n     * @param {boolean=} unsigned\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromNumber(value, unsigned) {\r\n        if (isNaN(value) || !isFinite(value))\r\n            return unsigned ? UZERO : ZERO;\r\n        if (unsigned) {\r\n            if (value < 0)\r\n                return UZERO;\r\n            if (value >= TWO_PWR_64_DBL)\r\n                return MAX_UNSIGNED_VALUE;\r\n        } else {\r\n            if (value <= -TWO_PWR_63_DBL)\r\n                return MIN_VALUE;\r\n            if (value + 1 >= TWO_PWR_63_DBL)\r\n                return MAX_VALUE;\r\n        }\r\n        if (value < 0)\r\n            return fromNumber(-value, unsigned).neg();\r\n        return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n     * @function\r\n     * @param {number} value The number in question\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromNumber = fromNumber;\r\n\r\n    /**\r\n     * @param {number} lowBits\r\n     * @param {number} highBits\r\n     * @param {boolean=} unsigned\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromBits(lowBits, highBits, unsigned) {\r\n        return new Long(lowBits, highBits, unsigned);\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n     *  assumed to use 32 bits.\r\n     * @function\r\n     * @param {number} lowBits The low 32 bits\r\n     * @param {number} highBits The high 32 bits\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromBits = fromBits;\r\n\r\n    /**\r\n     * @function\r\n     * @param {number} base\r\n     * @param {number} exponent\r\n     * @returns {number}\r\n     * @inner\r\n     */\r\n    var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n    /**\r\n     * @param {string} str\r\n     * @param {(boolean|number)=} unsigned\r\n     * @param {number=} radix\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromString(str, unsigned, radix) {\r\n        if (str.length === 0)\r\n            throw Error('empty string');\r\n        if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n            return ZERO;\r\n        if (typeof unsigned === 'number') {\r\n            // For goog.math.long compatibility\r\n            radix = unsigned,\r\n            unsigned = false;\r\n        } else {\r\n            unsigned = !! unsigned;\r\n        }\r\n        radix = radix || 10;\r\n        if (radix < 2 || 36 < radix)\r\n            throw RangeError('radix');\r\n\r\n        var p;\r\n        if ((p = str.indexOf('-')) > 0)\r\n            throw Error('interior hyphen');\r\n        else if (p === 0) {\r\n            return fromString(str.substring(1), unsigned, radix).neg();\r\n        }\r\n\r\n        // Do several (8) digits each time through the loop, so as to\r\n        // minimize the calls to the very expensive emulated div.\r\n        var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n        var result = ZERO;\r\n        for (var i = 0; i < str.length; i += 8) {\r\n            var size = Math.min(8, str.length - i),\r\n                value = parseInt(str.substring(i, i + size), radix);\r\n            if (size < 8) {\r\n                var power = fromNumber(pow_dbl(radix, size));\r\n                result = result.mul(power).add(fromNumber(value));\r\n            } else {\r\n                result = result.mul(radixToPower);\r\n                result = result.add(fromNumber(value));\r\n            }\r\n        }\r\n        result.unsigned = unsigned;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representation of the given string, written using the specified radix.\r\n     * @function\r\n     * @param {string} str The textual representation of the Long\r\n     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromString = fromString;\r\n\r\n    /**\r\n     * @function\r\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromValue(val) {\r\n        if (val /* is compatible */ instanceof Long)\r\n            return val;\r\n        if (typeof val === 'number')\r\n            return fromNumber(val);\r\n        if (typeof val === 'string')\r\n            return fromString(val);\r\n        // Throws for non-objects, converts non-instanceof Long:\r\n        return fromBits(val.low, val.high, val.unsigned);\r\n    }\r\n\r\n    /**\r\n     * Converts the specified value to a Long.\r\n     * @function\r\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n     * @returns {!Long}\r\n     */\r\n    Long.fromValue = fromValue;\r\n\r\n    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n    // no runtime penalty for these.\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_16_DBL = 1 << 16;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_24_DBL = 1 << 24;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var ZERO = fromInt(0);\r\n\r\n    /**\r\n     * Signed zero.\r\n     * @type {!Long}\r\n     */\r\n    Long.ZERO = ZERO;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var UZERO = fromInt(0, true);\r\n\r\n    /**\r\n     * Unsigned zero.\r\n     * @type {!Long}\r\n     */\r\n    Long.UZERO = UZERO;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var ONE = fromInt(1);\r\n\r\n    /**\r\n     * Signed one.\r\n     * @type {!Long}\r\n     */\r\n    Long.ONE = ONE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var UONE = fromInt(1, true);\r\n\r\n    /**\r\n     * Unsigned one.\r\n     * @type {!Long}\r\n     */\r\n    Long.UONE = UONE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var NEG_ONE = fromInt(-1);\r\n\r\n    /**\r\n     * Signed negative one.\r\n     * @type {!Long}\r\n     */\r\n    Long.NEG_ONE = NEG_ONE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n    /**\r\n     * Maximum signed value.\r\n     * @type {!Long}\r\n     */\r\n    Long.MAX_VALUE = MAX_VALUE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n    /**\r\n     * Maximum unsigned value.\r\n     * @type {!Long}\r\n     */\r\n    Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n    /**\r\n     * Minimum signed value.\r\n     * @type {!Long}\r\n     */\r\n    Long.MIN_VALUE = MIN_VALUE;\r\n\r\n    /**\r\n     * @alias Long.prototype\r\n     * @inner\r\n     */\r\n    var LongPrototype = Long.prototype;\r\n\r\n    /**\r\n     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n     * @returns {number}\r\n     */\r\n    LongPrototype.toInt = function toInt() {\r\n        return this.unsigned ? this.low >>> 0 : this.low;\r\n    };\r\n\r\n    /**\r\n     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n     * @returns {number}\r\n     */\r\n    LongPrototype.toNumber = function toNumber() {\r\n        if (this.unsigned)\r\n            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n    };\r\n\r\n    /**\r\n     * Converts the Long to a string written in the specified radix.\r\n     * @param {number=} radix Radix (2-36), defaults to 10\r\n     * @returns {string}\r\n     * @override\r\n     * @throws {RangeError} If `radix` is out of range\r\n     */\r\n    LongPrototype.toString = function toString(radix) {\r\n        radix = radix || 10;\r\n        if (radix < 2 || 36 < radix)\r\n            throw RangeError('radix');\r\n        if (this.isZero())\r\n            return '0';\r\n        if (this.isNegative()) { // Unsigned Longs are never negative\r\n            if (this.eq(MIN_VALUE)) {\r\n                // We need to change the Long value before it can be negated, so we remove\r\n                // the bottom-most digit in this base and then recurse to do the rest.\r\n                var radixLong = fromNumber(radix),\r\n                    div = this.div(radixLong),\r\n                    rem1 = div.mul(radixLong).sub(this);\r\n                return div.toString(radix) + rem1.toInt().toString(radix);\r\n            } else\r\n                return '-' + this.neg().toString(radix);\r\n        }\r\n\r\n        // Do several (6) digits each time through the loop, so as to\r\n        // minimize the calls to the very expensive emulated div.\r\n        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n            rem = this;\r\n        var result = '';\r\n        while (true) {\r\n            var remDiv = rem.div(radixToPower),\r\n                intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n                digits = intval.toString(radix);\r\n            rem = remDiv;\r\n            if (rem.isZero())\r\n                return digits + result;\r\n            else {\r\n                while (digits.length < 6)\r\n                    digits = '0' + digits;\r\n                result = '' + digits + result;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the high 32 bits as a signed integer.\r\n     * @returns {number} Signed high bits\r\n     */\r\n    LongPrototype.getHighBits = function getHighBits() {\r\n        return this.high;\r\n    };\r\n\r\n    /**\r\n     * Gets the high 32 bits as an unsigned integer.\r\n     * @returns {number} Unsigned high bits\r\n     */\r\n    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n        return this.high >>> 0;\r\n    };\r\n\r\n    /**\r\n     * Gets the low 32 bits as a signed integer.\r\n     * @returns {number} Signed low bits\r\n     */\r\n    LongPrototype.getLowBits = function getLowBits() {\r\n        return this.low;\r\n    };\r\n\r\n    /**\r\n     * Gets the low 32 bits as an unsigned integer.\r\n     * @returns {number} Unsigned low bits\r\n     */\r\n    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n        return this.low >>> 0;\r\n    };\r\n\r\n    /**\r\n     * Gets the number of bits needed to represent the absolute value of this Long.\r\n     * @returns {number}\r\n     */\r\n    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n        if (this.isNegative()) // Unsigned Longs are never negative\r\n            return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n        var val = this.high != 0 ? this.high : this.low;\r\n        for (var bit = 31; bit > 0; bit--)\r\n            if ((val & (1 << bit)) != 0)\r\n                break;\r\n        return this.high != 0 ? bit + 33 : bit + 1;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals zero.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isZero = function isZero() {\r\n        return this.high === 0 && this.low === 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is negative.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isNegative = function isNegative() {\r\n        return !this.unsigned && this.high < 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is positive.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isPositive = function isPositive() {\r\n        return this.unsigned || this.high >= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is odd.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isOdd = function isOdd() {\r\n        return (this.low & 1) === 1;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is even.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isEven = function isEven() {\r\n        return (this.low & 1) === 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.equals = function equals(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n            return false;\r\n        return this.high === other.high && this.low === other.low;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.eq = LongPrototype.equals;\r\n\r\n    /**\r\n     * Tests if this Long's value differs from the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.notEquals = function notEquals(other) {\r\n        return !this.eq(/* validates */ other);\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.neq = LongPrototype.notEquals;\r\n\r\n    /**\r\n     * Tests if this Long's value is less than the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lessThan = function lessThan(other) {\r\n        return this.comp(/* validates */ other) < 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lt = LongPrototype.lessThan;\r\n\r\n    /**\r\n     * Tests if this Long's value is less than or equal the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n        return this.comp(/* validates */ other) <= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.greaterThan = function greaterThan(other) {\r\n        return this.comp(/* validates */ other) > 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than or equal the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n        return this.comp(/* validates */ other) >= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n    /**\r\n     * Compares this Long's value with the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n     *  if the given one is greater\r\n     */\r\n    LongPrototype.compare = function compare(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        if (this.eq(other))\r\n            return 0;\r\n        var thisNeg = this.isNegative(),\r\n            otherNeg = other.isNegative();\r\n        if (thisNeg && !otherNeg)\r\n            return -1;\r\n        if (!thisNeg && otherNeg)\r\n            return 1;\r\n        // At this point the sign bits are the same\r\n        if (!this.unsigned)\r\n            return this.sub(other).isNegative() ? -1 : 1;\r\n        // Both are positive if at least one is unsigned\r\n        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n    };\r\n\r\n    /**\r\n     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n     *  if the given one is greater\r\n     */\r\n    LongPrototype.comp = LongPrototype.compare;\r\n\r\n    /**\r\n     * Negates this Long's value.\r\n     * @returns {!Long} Negated Long\r\n     */\r\n    LongPrototype.negate = function negate() {\r\n        if (!this.unsigned && this.eq(MIN_VALUE))\r\n            return MIN_VALUE;\r\n        return this.not().add(ONE);\r\n    };\r\n\r\n    /**\r\n     * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n     * @function\r\n     * @returns {!Long} Negated Long\r\n     */\r\n    LongPrototype.neg = LongPrototype.negate;\r\n\r\n    /**\r\n     * Returns the sum of this and the specified Long.\r\n     * @param {!Long|number|string} addend Addend\r\n     * @returns {!Long} Sum\r\n     */\r\n    LongPrototype.add = function add(addend) {\r\n        if (!isLong(addend))\r\n            addend = fromValue(addend);\r\n\r\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n        var a48 = this.high >>> 16;\r\n        var a32 = this.high & 0xFFFF;\r\n        var a16 = this.low >>> 16;\r\n        var a00 = this.low & 0xFFFF;\r\n\r\n        var b48 = addend.high >>> 16;\r\n        var b32 = addend.high & 0xFFFF;\r\n        var b16 = addend.low >>> 16;\r\n        var b00 = addend.low & 0xFFFF;\r\n\r\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n        c00 += a00 + b00;\r\n        c16 += c00 >>> 16;\r\n        c00 &= 0xFFFF;\r\n        c16 += a16 + b16;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c32 += a32 + b32;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c48 += a48 + b48;\r\n        c48 &= 0xFFFF;\r\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the difference of this and the specified Long.\r\n     * @param {!Long|number|string} subtrahend Subtrahend\r\n     * @returns {!Long} Difference\r\n     */\r\n    LongPrototype.subtract = function subtract(subtrahend) {\r\n        if (!isLong(subtrahend))\r\n            subtrahend = fromValue(subtrahend);\r\n        return this.add(subtrahend.neg());\r\n    };\r\n\r\n    /**\r\n     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n     * @function\r\n     * @param {!Long|number|string} subtrahend Subtrahend\r\n     * @returns {!Long} Difference\r\n     */\r\n    LongPrototype.sub = LongPrototype.subtract;\r\n\r\n    /**\r\n     * Returns the product of this and the specified Long.\r\n     * @param {!Long|number|string} multiplier Multiplier\r\n     * @returns {!Long} Product\r\n     */\r\n    LongPrototype.multiply = function multiply(multiplier) {\r\n        if (this.isZero())\r\n            return ZERO;\r\n        if (!isLong(multiplier))\r\n            multiplier = fromValue(multiplier);\r\n        if (multiplier.isZero())\r\n            return ZERO;\r\n        if (this.eq(MIN_VALUE))\r\n            return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n        if (multiplier.eq(MIN_VALUE))\r\n            return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n        if (this.isNegative()) {\r\n            if (multiplier.isNegative())\r\n                return this.neg().mul(multiplier.neg());\r\n            else\r\n                return this.neg().mul(multiplier).neg();\r\n        } else if (multiplier.isNegative())\r\n            return this.mul(multiplier.neg()).neg();\r\n\r\n        // If both longs are small, use float multiplication\r\n        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n            return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n        // We can skip products that would overflow.\r\n\r\n        var a48 = this.high >>> 16;\r\n        var a32 = this.high & 0xFFFF;\r\n        var a16 = this.low >>> 16;\r\n        var a00 = this.low & 0xFFFF;\r\n\r\n        var b48 = multiplier.high >>> 16;\r\n        var b32 = multiplier.high & 0xFFFF;\r\n        var b16 = multiplier.low >>> 16;\r\n        var b00 = multiplier.low & 0xFFFF;\r\n\r\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n        c00 += a00 * b00;\r\n        c16 += c00 >>> 16;\r\n        c00 &= 0xFFFF;\r\n        c16 += a16 * b00;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c16 += a00 * b16;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c32 += a32 * b00;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c32 += a16 * b16;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c32 += a00 * b32;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n        c48 &= 0xFFFF;\r\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n     * @function\r\n     * @param {!Long|number|string} multiplier Multiplier\r\n     * @returns {!Long} Product\r\n     */\r\n    LongPrototype.mul = LongPrototype.multiply;\r\n\r\n    /**\r\n     * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n     *  unsigned if this Long is unsigned.\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Quotient\r\n     */\r\n    LongPrototype.divide = function divide(divisor) {\r\n        if (!isLong(divisor))\r\n            divisor = fromValue(divisor);\r\n        if (divisor.isZero())\r\n            throw Error('division by zero');\r\n        if (this.isZero())\r\n            return this.unsigned ? UZERO : ZERO;\r\n        var approx, rem, res;\r\n        if (!this.unsigned) {\r\n            // This section is only relevant for signed longs and is derived from the\r\n            // closure library as a whole.\r\n            if (this.eq(MIN_VALUE)) {\r\n                if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                    return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n                else if (divisor.eq(MIN_VALUE))\r\n                    return ONE;\r\n                else {\r\n                    // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                    var halfThis = this.shr(1);\r\n                    approx = halfThis.div(divisor).shl(1);\r\n                    if (approx.eq(ZERO)) {\r\n                        return divisor.isNegative() ? ONE : NEG_ONE;\r\n                    } else {\r\n                        rem = this.sub(divisor.mul(approx));\r\n                        res = approx.add(rem.div(divisor));\r\n                        return res;\r\n                    }\r\n                }\r\n            } else if (divisor.eq(MIN_VALUE))\r\n                return this.unsigned ? UZERO : ZERO;\r\n            if (this.isNegative()) {\r\n                if (divisor.isNegative())\r\n                    return this.neg().div(divisor.neg());\r\n                return this.neg().div(divisor).neg();\r\n            } else if (divisor.isNegative())\r\n                return this.div(divisor.neg()).neg();\r\n            res = ZERO;\r\n        } else {\r\n            // The algorithm below has not been made for unsigned longs. It's therefore\r\n            // required to take special care of the MSB prior to running it.\r\n            if (!divisor.unsigned)\r\n                divisor = divisor.toUnsigned();\r\n            if (divisor.gt(this))\r\n                return UZERO;\r\n            if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n                return UONE;\r\n            res = UZERO;\r\n        }\r\n\r\n        // Repeat the following until the remainder is less than other:  find a\r\n        // floating-point that approximates remainder / other *from below*, add this\r\n        // into the result, and subtract it from the remainder.  It is critical that\r\n        // the approximate value is less than or equal to the real value so that the\r\n        // remainder never becomes negative.\r\n        rem = this;\r\n        while (rem.gte(divisor)) {\r\n            // Approximate the result of division. This may be a little greater or\r\n            // smaller than the actual value.\r\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n            // We will tweak the approximate result by changing it in the 48-th digit or\r\n            // the smallest non-fractional digit, whichever is larger.\r\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n                delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n            // Decrease the approximation until it is smaller than the remainder.  Note\r\n            // that if it is too large, the product overflows and is negative.\r\n                approxRes = fromNumber(approx),\r\n                approxRem = approxRes.mul(divisor);\r\n            while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n                approx -= delta;\r\n                approxRes = fromNumber(approx, this.unsigned);\r\n                approxRem = approxRes.mul(divisor);\r\n            }\r\n\r\n            // We know the answer can't be zero... and actually, zero would cause\r\n            // infinite recursion since we would make no progress.\r\n            if (approxRes.isZero())\r\n                approxRes = ONE;\r\n\r\n            res = res.add(approxRes);\r\n            rem = rem.sub(approxRem);\r\n        }\r\n        return res;\r\n    };\r\n\r\n    /**\r\n     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n     * @function\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Quotient\r\n     */\r\n    LongPrototype.div = LongPrototype.divide;\r\n\r\n    /**\r\n     * Returns this Long modulo the specified.\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Remainder\r\n     */\r\n    LongPrototype.modulo = function modulo(divisor) {\r\n        if (!isLong(divisor))\r\n            divisor = fromValue(divisor);\r\n        return this.sub(this.div(divisor).mul(divisor));\r\n    };\r\n\r\n    /**\r\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n     * @function\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Remainder\r\n     */\r\n    LongPrototype.mod = LongPrototype.modulo;\r\n\r\n    /**\r\n     * Returns the bitwise NOT of this Long.\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.not = function not() {\r\n        return fromBits(~this.low, ~this.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise AND of this Long and the specified.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.and = function and(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise OR of this Long and the specified.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.or = function or(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise XOR of this Long and the given one.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.xor = function xor(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits shifted to the left by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        if ((numBits &= 63) === 0)\r\n            return this;\r\n        else if (numBits < 32)\r\n            return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n        else\r\n            return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n    /**\r\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shiftRight = function shiftRight(numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        if ((numBits &= 63) === 0)\r\n            return this;\r\n        else if (numBits < 32)\r\n            return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n        else\r\n            return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n    /**\r\n     * Returns this Long with bits logically shifted to the right by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        numBits &= 63;\r\n        if (numBits === 0)\r\n            return this;\r\n        else {\r\n            var high = this.high;\r\n            if (numBits < 32) {\r\n                var low = this.low;\r\n                return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n            } else if (numBits === 32)\r\n                return fromBits(high, 0, this.unsigned);\r\n            else\r\n                return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n    /**\r\n     * Converts this Long to signed.\r\n     * @returns {!Long} Signed long\r\n     */\r\n    LongPrototype.toSigned = function toSigned() {\r\n        if (!this.unsigned)\r\n            return this;\r\n        return fromBits(this.low, this.high, false);\r\n    };\r\n\r\n    /**\r\n     * Converts this Long to unsigned.\r\n     * @returns {!Long} Unsigned long\r\n     */\r\n    LongPrototype.toUnsigned = function toUnsigned() {\r\n        if (this.unsigned)\r\n            return this;\r\n        return fromBits(this.low, this.high, true);\r\n    };\r\n\r\n    /**\r\n     * Converts this Long to its byte representation.\r\n     * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n     * @returns {!Array.<number>} Byte representation\r\n     */\r\n    LongPrototype.toBytes = function(le) {\r\n        return le ? this.toBytesLE() : this.toBytesBE();\r\n    }\r\n\r\n    /**\r\n     * Converts this Long to its little endian byte representation.\r\n     * @returns {!Array.<number>} Little endian byte representation\r\n     */\r\n    LongPrototype.toBytesLE = function() {\r\n        var hi = this.high,\r\n            lo = this.low;\r\n        return [\r\n             lo         & 0xff,\r\n            (lo >>>  8) & 0xff,\r\n            (lo >>> 16) & 0xff,\r\n            (lo >>> 24) & 0xff,\r\n             hi         & 0xff,\r\n            (hi >>>  8) & 0xff,\r\n            (hi >>> 16) & 0xff,\r\n            (hi >>> 24) & 0xff\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Converts this Long to its big endian byte representation.\r\n     * @returns {!Array.<number>} Big endian byte representation\r\n     */\r\n    LongPrototype.toBytesBE = function() {\r\n        var hi = this.high,\r\n            lo = this.low;\r\n        return [\r\n            (hi >>> 24) & 0xff,\r\n            (hi >>> 16) & 0xff,\r\n            (hi >>>  8) & 0xff,\r\n             hi         & 0xff,\r\n            (lo >>> 24) & 0xff,\r\n            (lo >>> 16) & 0xff,\r\n            (lo >>>  8) & 0xff,\r\n             lo         & 0xff\r\n        ];\r\n    }\r\n\r\n    return Long;\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}