{"ast":null,"code":"/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n'use strict';\n\nvar clone = require('lodash.clone');\n\nvar grpc = require('./grpc_extension');\n\nconst common = require('./common');\n\nconst logVerbosity = require('./constants').logVerbosity;\n\nconst IDEMPOTENT_REQUEST_FLAG = 0x10;\nconst WAIT_FOR_READY_FLAG = 0x20;\nconst CACHEABLE_REQUEST_FLAG = 0x40;\nconst WAIT_FOR_READY_EXPLICITLY_SET_FLAG = 0x80;\nconst CORKED_FLAG = 0x100;\n/**\n * Class for storing metadata. Keys are normalized to lowercase ASCII.\n * @memberof grpc\n * @constructor\n * @param {Object=} options Boolean options for the beginning of the call.\n *     These options only have any effect when passed at the beginning of\n *     a client request.\n * @param {boolean=} [options.idempotentRequest=false] Signal that the request\n *     is idempotent\n * @param {boolean=} [options.waitForReady=true] Signal that the call should\n *     not return UNAVAILABLE before it has started.\n * @param {boolean=} [options.cacheableRequest=false] Signal that the call is\n *     cacheable. GRPC is free to use GET verb.\n * @param {boolean=} [options.corked=false] Signal that the initial metadata\n *     should be corked.\n * @example\n * var metadata = new metadata_module.Metadata();\n * metadata.set('key1', 'value1');\n * metadata.add('key1', 'value2');\n * metadata.get('key1') // returns ['value1', 'value2']\n */\n\nfunction Metadata(options) {\n  this._internal_repr = {};\n  this.setOptions(options);\n}\n\nfunction normalizeKey(key) {\n  key = key.toLowerCase();\n\n  if (grpc.metadataKeyIsLegal(key)) {\n    return key;\n  } else {\n    throw new Error('Metadata key\"' + key + '\" contains illegal characters');\n  }\n}\n\nfunction validate(key, value) {\n  if (grpc.metadataKeyIsBinary(key)) {\n    if (!(value instanceof Buffer)) {\n      throw new Error('keys that end with \\'-bin\\' must have Buffer values');\n    }\n  } else {\n    if (typeof value !== 'string') {\n      throw new Error('keys that don\\'t end with \\'-bin\\' must have String values');\n    }\n\n    if (!grpc.metadataNonbinValueIsLegal(value)) {\n      throw new Error('Metadata string value \"' + value + '\" contains illegal characters');\n    }\n  }\n}\n/**\n * Sets the given value for the given key, replacing any other values associated\n * with that key. Normalizes the key.\n * @param {String} key The key to set\n * @param {String|Buffer} value The value to set. Must be a buffer if and only\n *     if the normalized key ends with '-bin'\n */\n\n\nMetadata.prototype.set = function (key, value) {\n  key = normalizeKey(key);\n  validate(key, value);\n  this._internal_repr[key] = [value];\n};\n/**\n * Adds the given value for the given key. Normalizes the key.\n * @param {String} key The key to add to.\n * @param {String|Buffer} value The value to add. Must be a buffer if and only\n *     if the normalized key ends with '-bin'\n */\n\n\nMetadata.prototype.add = function (key, value) {\n  key = normalizeKey(key);\n  validate(key, value);\n\n  if (!this._internal_repr[key]) {\n    this._internal_repr[key] = [];\n  }\n\n  this._internal_repr[key].push(value);\n};\n/**\n * Remove the given key and any associated values. Normalizes the key.\n * @param {String} key The key to remove\n */\n\n\nMetadata.prototype.remove = function (key) {\n  key = normalizeKey(key);\n\n  if (Object.prototype.hasOwnProperty.call(this._internal_repr, key)) {\n    delete this._internal_repr[key];\n  }\n};\n/**\n * Gets a list of all values associated with the key. Normalizes the key.\n * @param {String} key The key to get\n * @return {Array.<String|Buffer>} The values associated with that key\n */\n\n\nMetadata.prototype.get = function (key) {\n  key = normalizeKey(key);\n\n  if (Object.prototype.hasOwnProperty.call(this._internal_repr, key)) {\n    return this._internal_repr[key];\n  } else {\n    return [];\n  }\n};\n/**\n * Get a map of each key to a single associated value. This reflects the most\n * common way that people will want to see metadata.\n * @return {Object.<String,String|Buffer>} A key/value mapping of the metadata\n */\n\n\nMetadata.prototype.getMap = function () {\n  var result = {};\n  Object.keys(this._internal_repr).forEach(key => {\n    const values = this._internal_repr[key];\n\n    if (values.length > 0) {\n      result[key] = values[0];\n    }\n  });\n  return result;\n};\n/**\n * Clone the metadata object.\n * @return {grpc.Metadata} The new cloned object\n */\n\n\nMetadata.prototype.clone = function () {\n  var copy = new Metadata();\n  Object.keys(this._internal_repr).forEach(key => {\n    const value = this._internal_repr[key];\n    copy._internal_repr[key] = clone(value);\n  });\n  copy.flags = this.flags;\n  return copy;\n};\n/**\n * Set options on the metadata object\n * @param {Object} options Boolean options for the beginning of the call.\n *     These options only have any effect when passed at the beginning of\n *     a client request.\n * @param {boolean=} [options.idempotentRequest=false] Signal that the request\n *     is idempotent\n * @param {boolean=} [options.waitForReady=true] Signal that the call should\n *     not return UNAVAILABLE before it has started.\n * @param {boolean=} [options.cacheableRequest=false] Signal that the call is\n *     cacheable. GRPC is free to use GET verb.\n * @param {boolean=} [options.corked=false] Signal that the initial metadata\n *     should be corked.\n */\n\n\nMetadata.prototype.setOptions = function (options) {\n  let flags = 0;\n\n  if (options) {\n    if (options.idempotentRequest) {\n      flags |= IDEMPOTENT_REQUEST_FLAG;\n    }\n\n    if (options.hasOwnProperty('waitForReady')) {\n      flags |= WAIT_FOR_READY_EXPLICITLY_SET_FLAG;\n\n      if (options.waitForReady) {\n        flags |= WAIT_FOR_READY_FLAG;\n      }\n    }\n\n    if (options.cacheableRequest) {\n      flags |= CACHEABLE_REQUEST_FLAG;\n    }\n\n    if (options.corked) {\n      flags |= CORKED_FLAG;\n    }\n  }\n\n  this.flags = flags;\n};\n/**\n * Metadata representation as passed to and the native addon\n * @typedef {object} grpc~CoreMetadata\n * @param {Object.<String, Array.<String|Buffer>>} metadata The metadata\n * @param {number} flags Metadata flags\n */\n\n/**\n * Gets the metadata in the format used by interal code. Intended for internal\n * use only. API stability is not guaranteed.\n * @private\n * @return {grpc~CoreMetadata} The metadata\n */\n\n\nMetadata.prototype._getCoreRepresentation = function () {\n  return {\n    metadata: this._internal_repr,\n    flags: this.flags\n  };\n};\n/**\n * Creates a Metadata object from a metadata map in the internal format.\n * Intended for internal use only. API stability is not guaranteed.\n * @private\n * @param {grpc~CoreMetadata} metadata The metadata object from core\n * @return {Metadata} The new Metadata object\n */\n\n\nMetadata._fromCoreRepresentation = function (metadata) {\n  var newMetadata = new Metadata();\n\n  if (metadata) {\n    Object.keys(metadata.metadata).forEach(key => {\n      const value = metadata.metadata[key];\n\n      if (!grpc.metadataKeyIsLegal(key)) {\n        common.log(logVerbosity.ERROR, \"Warning: possibly corrupted metadata key received: \" + key + \": \" + value + \". Please report this at https://github.com/grpc/grpc-node/issues/1173.\");\n      }\n\n      newMetadata._internal_repr[key] = clone(value);\n    });\n  }\n\n  newMetadata.flags = metadata.flags;\n  return newMetadata;\n};\n\nmodule.exports = Metadata;","map":{"version":3,"names":["clone","require","grpc","common","logVerbosity","IDEMPOTENT_REQUEST_FLAG","WAIT_FOR_READY_FLAG","CACHEABLE_REQUEST_FLAG","WAIT_FOR_READY_EXPLICITLY_SET_FLAG","CORKED_FLAG","Metadata","options","_internal_repr","setOptions","normalizeKey","key","toLowerCase","metadataKeyIsLegal","Error","validate","value","metadataKeyIsBinary","Buffer","metadataNonbinValueIsLegal","prototype","set","add","push","remove","Object","hasOwnProperty","call","get","getMap","result","keys","forEach","values","length","copy","flags","idempotentRequest","waitForReady","cacheableRequest","corked","_getCoreRepresentation","metadata","_fromCoreRepresentation","newMetadata","log","ERROR","module","exports"],"sources":["C:/Users/Asus/Documents/threejs/miro learning/20.12 neuroweb textures/node_modules/grpc/src/metadata.js"],"sourcesContent":["/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n'use strict';\n\nvar clone = require('lodash.clone');\n\nvar grpc = require('./grpc_extension');\n\nconst common = require('./common');\nconst logVerbosity = require('./constants').logVerbosity;\n\nconst IDEMPOTENT_REQUEST_FLAG = 0x10;\nconst WAIT_FOR_READY_FLAG = 0x20;\nconst CACHEABLE_REQUEST_FLAG = 0x40;\nconst WAIT_FOR_READY_EXPLICITLY_SET_FLAG = 0x80;\nconst CORKED_FLAG = 0x100;\n\n/**\n * Class for storing metadata. Keys are normalized to lowercase ASCII.\n * @memberof grpc\n * @constructor\n * @param {Object=} options Boolean options for the beginning of the call.\n *     These options only have any effect when passed at the beginning of\n *     a client request.\n * @param {boolean=} [options.idempotentRequest=false] Signal that the request\n *     is idempotent\n * @param {boolean=} [options.waitForReady=true] Signal that the call should\n *     not return UNAVAILABLE before it has started.\n * @param {boolean=} [options.cacheableRequest=false] Signal that the call is\n *     cacheable. GRPC is free to use GET verb.\n * @param {boolean=} [options.corked=false] Signal that the initial metadata\n *     should be corked.\n * @example\n * var metadata = new metadata_module.Metadata();\n * metadata.set('key1', 'value1');\n * metadata.add('key1', 'value2');\n * metadata.get('key1') // returns ['value1', 'value2']\n */\nfunction Metadata(options) {\n  this._internal_repr = {};\n  this.setOptions(options);\n}\n\nfunction normalizeKey(key) {\n  key = key.toLowerCase();\n  if (grpc.metadataKeyIsLegal(key)) {\n    return key;\n  } else {\n    throw new Error('Metadata key\"' + key + '\" contains illegal characters');\n  }\n}\n\nfunction validate(key, value) {\n  if (grpc.metadataKeyIsBinary(key)) {\n    if (!(value instanceof Buffer)) {\n      throw new Error('keys that end with \\'-bin\\' must have Buffer values');\n    }\n  } else {\n    if (typeof value !== 'string') {\n      throw new Error(\n          'keys that don\\'t end with \\'-bin\\' must have String values');\n    }\n    if (!grpc.metadataNonbinValueIsLegal(value)) {\n      throw new Error('Metadata string value \"' + value +\n                      '\" contains illegal characters');\n    }\n  }\n}\n\n/**\n * Sets the given value for the given key, replacing any other values associated\n * with that key. Normalizes the key.\n * @param {String} key The key to set\n * @param {String|Buffer} value The value to set. Must be a buffer if and only\n *     if the normalized key ends with '-bin'\n */\nMetadata.prototype.set = function(key, value) {\n  key = normalizeKey(key);\n  validate(key, value);\n  this._internal_repr[key] = [value];\n};\n\n/**\n * Adds the given value for the given key. Normalizes the key.\n * @param {String} key The key to add to.\n * @param {String|Buffer} value The value to add. Must be a buffer if and only\n *     if the normalized key ends with '-bin'\n */\nMetadata.prototype.add = function(key, value) {\n  key = normalizeKey(key);\n  validate(key, value);\n  if (!this._internal_repr[key]) {\n    this._internal_repr[key] = [];\n  }\n  this._internal_repr[key].push(value);\n};\n\n/**\n * Remove the given key and any associated values. Normalizes the key.\n * @param {String} key The key to remove\n */\nMetadata.prototype.remove = function(key) {\n  key = normalizeKey(key);\n  if (Object.prototype.hasOwnProperty.call(this._internal_repr, key)) {\n    delete this._internal_repr[key];\n  }\n};\n\n/**\n * Gets a list of all values associated with the key. Normalizes the key.\n * @param {String} key The key to get\n * @return {Array.<String|Buffer>} The values associated with that key\n */\nMetadata.prototype.get = function(key) {\n  key = normalizeKey(key);\n  if (Object.prototype.hasOwnProperty.call(this._internal_repr, key)) {\n    return this._internal_repr[key];\n  } else {\n    return [];\n  }\n};\n\n/**\n * Get a map of each key to a single associated value. This reflects the most\n * common way that people will want to see metadata.\n * @return {Object.<String,String|Buffer>} A key/value mapping of the metadata\n */\nMetadata.prototype.getMap = function() {\n  var result = {};\n  Object.keys(this._internal_repr).forEach(key => {\n    const values = this._internal_repr[key];\n    if(values.length > 0) {\n      result[key] = values[0];\n    }\n  });\n  return result;\n};\n\n/**\n * Clone the metadata object.\n * @return {grpc.Metadata} The new cloned object\n */\nMetadata.prototype.clone = function() {\n  var copy = new Metadata();\n  Object.keys(this._internal_repr).forEach(key => {\n    const value = this._internal_repr[key];\n    copy._internal_repr[key] = clone(value);\n  });\n  copy.flags = this.flags;\n  return copy;\n};\n\n/**\n * Set options on the metadata object\n * @param {Object} options Boolean options for the beginning of the call.\n *     These options only have any effect when passed at the beginning of\n *     a client request.\n * @param {boolean=} [options.idempotentRequest=false] Signal that the request\n *     is idempotent\n * @param {boolean=} [options.waitForReady=true] Signal that the call should\n *     not return UNAVAILABLE before it has started.\n * @param {boolean=} [options.cacheableRequest=false] Signal that the call is\n *     cacheable. GRPC is free to use GET verb.\n * @param {boolean=} [options.corked=false] Signal that the initial metadata\n *     should be corked.\n */\nMetadata.prototype.setOptions = function(options) {\n  let flags = 0;\n  if (options) {\n    if (options.idempotentRequest) {\n      flags |= IDEMPOTENT_REQUEST_FLAG;\n    }\n    if (options.hasOwnProperty('waitForReady')) {\n      flags |= WAIT_FOR_READY_EXPLICITLY_SET_FLAG;\n      if (options.waitForReady) {\n        flags |= WAIT_FOR_READY_FLAG;\n      }\n    }\n    if (options.cacheableRequest) {\n      flags |= CACHEABLE_REQUEST_FLAG;\n    }\n    if (options.corked) {\n      flags |= CORKED_FLAG;\n    }\n  }\n  this.flags = flags;\n}\n\n/**\n * Metadata representation as passed to and the native addon\n * @typedef {object} grpc~CoreMetadata\n * @param {Object.<String, Array.<String|Buffer>>} metadata The metadata\n * @param {number} flags Metadata flags\n */\n\n/**\n * Gets the metadata in the format used by interal code. Intended for internal\n * use only. API stability is not guaranteed.\n * @private\n * @return {grpc~CoreMetadata} The metadata\n */\nMetadata.prototype._getCoreRepresentation = function() {\n  return {\n    metadata: this._internal_repr,\n    flags: this.flags\n  };\n};\n\n/**\n * Creates a Metadata object from a metadata map in the internal format.\n * Intended for internal use only. API stability is not guaranteed.\n * @private\n * @param {grpc~CoreMetadata} metadata The metadata object from core\n * @return {Metadata} The new Metadata object\n */\nMetadata._fromCoreRepresentation = function(metadata) {\n  var newMetadata = new Metadata();\n  if (metadata) {\n    Object.keys(metadata.metadata).forEach(key => {\n      const value = metadata.metadata[key];\n      if (!grpc.metadataKeyIsLegal(key)) {\n        common.log(logVerbosity.ERROR,\n          \"Warning: possibly corrupted metadata key received: \" +\n          key + \": \" + value +\n          \". Please report this at https://github.com/grpc/grpc-node/issues/1173.\");\n      }\n      newMetadata._internal_repr[key] = clone(value);\n    });\n  }\n  newMetadata.flags = metadata.flags;\n  return newMetadata;\n};\n\nmodule.exports = Metadata;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}