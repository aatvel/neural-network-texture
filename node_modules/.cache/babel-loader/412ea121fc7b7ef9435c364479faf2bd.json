{"ast":null,"code":"/**\n * @license\n * Copyright 2017 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n * @module\n * @private\n */\n'use strict';\n\nvar camelCase = require('lodash.camelcase');\n\nvar client = require('./client');\n\nvar common = require('./common');\n/**\n * Get a function that deserializes a specific type of protobuf.\n * @param {function()} cls The constructor of the message type to deserialize\n * @param {bool=} binaryAsBase64 Deserialize bytes fields as base64 strings\n *     instead of Buffers. Defaults to false\n * @param {bool=} longsAsStrings Deserialize long values as strings instead of\n *     objects. Defaults to true\n * @return {function(Buffer):cls} The deserialization function\n */\n\n\nexports.deserializeCls = function deserializeCls(cls, options) {\n  /**\n   * Deserialize a buffer to a message object\n   * @param {Buffer} arg_buf The buffer to deserialize\n   * @return {cls} The resulting object\n   */\n  return function deserialize(arg_buf) {\n    // Convert to a native object with binary fields as Buffers (first argument)\n    // and longs as strings (second argument)\n    return cls.decode(arg_buf).toRaw(options.binaryAsBase64, options.longsAsStrings);\n  };\n};\n\nvar deserializeCls = exports.deserializeCls;\n/**\n * Get a function that serializes objects to a buffer by protobuf class.\n * @param {function()} Cls The constructor of the message type to serialize\n * @return {function(Cls):Buffer} The serialization function\n */\n\nexports.serializeCls = function serializeCls(Cls) {\n  /**\n   * Serialize an object to a Buffer\n   * @param {Object} arg The object to serialize\n   * @return {Buffer} The serialized object\n   */\n  return function serialize(arg) {\n    return Buffer.from(new Cls(arg).encode().toBuffer());\n  };\n};\n\nvar serializeCls = exports.serializeCls;\n/**\n * Get the fully qualified (dotted) name of a ProtoBuf.Reflect value.\n * @param {ProtoBuf.Reflect.Namespace} value The value to get the name of\n * @return {string} The fully qualified name of the value\n */\n\nexports.fullyQualifiedName = function fullyQualifiedName(value) {\n  if (value === null || value === undefined) {\n    return '';\n  }\n\n  var name = value.name;\n  var parent_name = fullyQualifiedName(value.parent);\n\n  if (parent_name !== '') {\n    name = parent_name + '.' + name;\n  }\n\n  return name;\n};\n\nvar fullyQualifiedName = exports.fullyQualifiedName;\n/**\n * Return a map from method names to method attributes for the service.\n * @param {ProtoBuf.Reflect.Service} service The service to get attributes for\n * @param {Object=} options Options to apply to these attributes\n * @return {Object} The attributes map\n */\n\nexports.getProtobufServiceAttrs = function getProtobufServiceAttrs(service, options) {\n  var prefix = '/' + fullyQualifiedName(service) + '/';\n  var binaryAsBase64, longsAsStrings;\n\n  if (options) {\n    binaryAsBase64 = options.binaryAsBase64;\n    longsAsStrings = options.longsAsStrings;\n  }\n  /* This slightly awkward construction is used to make sure we only use\n     lodash@3.10.1-compatible functions. A previous version used\n     _.fromPairs, which would be cleaner, but was introduced in lodash\n     version 4 */\n\n\n  return common.zipObject(service.children.map(function (method) {\n    return camelCase(method.name);\n  }), service.children.map(function (method) {\n    return {\n      originalName: method.name,\n      path: prefix + method.name,\n      requestStream: method.requestStream,\n      responseStream: method.responseStream,\n      requestType: method.resolvedRequestType,\n      responseType: method.resolvedResponseType,\n      requestSerialize: serializeCls(method.resolvedRequestType.build()),\n      requestDeserialize: deserializeCls(method.resolvedRequestType.build(), options),\n      responseSerialize: serializeCls(method.resolvedResponseType.build()),\n      responseDeserialize: deserializeCls(method.resolvedResponseType.build(), options)\n    };\n  }));\n};\n\nvar getProtobufServiceAttrs = exports.getProtobufServiceAttrs;\n/**\n * Load a gRPC object from an existing ProtoBuf.Reflect object.\n * @param {ProtoBuf.Reflect.Namespace} value The ProtoBuf object to load.\n * @param {Object=} options Options to apply to the loaded object\n * @return {Object<string, *>} The resulting gRPC object\n */\n\nexports.loadObject = function loadObject(value, options) {\n  var result = {};\n\n  if (!value) {\n    return value;\n  }\n\n  if (value.hasOwnProperty('ns')) {\n    return loadObject(value.ns, options);\n  }\n\n  if (value.className === 'Namespace') {\n    Object.keys(value.children).forEach(key => {\n      const child = value.children[key];\n      result[child.name] = loadObject(child, options);\n    });\n    return result;\n  } else if (value.className === 'Service') {\n    return client.makeClientConstructor(getProtobufServiceAttrs(value, options), options);\n  } else if (value.className === 'Message' || value.className === 'Enum') {\n    return value.build();\n  } else {\n    return value;\n  }\n};\n/**\n * The primary purpose of this method is to distinguish between reflection\n * objects from different versions of ProtoBuf.js. This is just a heuristic,\n * checking for properties that are (currently) specific to this version of\n * ProtoBuf.js\n * @param {Object} obj The object to check\n * @return {boolean} Whether the object appears to be a Protobuf.js 5\n *   ReflectionObject\n */\n\n\nexports.isProbablyProtobufJs5 = function isProbablyProtobufJs5(obj) {\n  return Array.isArray(obj.children) && typeof obj.build === 'function';\n};","map":{"version":3,"names":["camelCase","require","client","common","exports","deserializeCls","cls","options","deserialize","arg_buf","decode","toRaw","binaryAsBase64","longsAsStrings","serializeCls","Cls","serialize","arg","Buffer","from","encode","toBuffer","fullyQualifiedName","value","undefined","name","parent_name","parent","getProtobufServiceAttrs","service","prefix","zipObject","children","map","method","originalName","path","requestStream","responseStream","requestType","resolvedRequestType","responseType","resolvedResponseType","requestSerialize","build","requestDeserialize","responseSerialize","responseDeserialize","loadObject","result","hasOwnProperty","ns","className","Object","keys","forEach","key","child","makeClientConstructor","isProbablyProtobufJs5","obj","Array","isArray"],"sources":["C:/Users/Asus/Documents/threejs/miro learning/20.12 neuroweb textures/node_modules/grpc/src/protobuf_js_5_common.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n * @module\n * @private\n */\n\n'use strict';\n\nvar camelCase = require('lodash.camelcase');\nvar client = require('./client');\nvar common = require('./common');\n\n/**\n * Get a function that deserializes a specific type of protobuf.\n * @param {function()} cls The constructor of the message type to deserialize\n * @param {bool=} binaryAsBase64 Deserialize bytes fields as base64 strings\n *     instead of Buffers. Defaults to false\n * @param {bool=} longsAsStrings Deserialize long values as strings instead of\n *     objects. Defaults to true\n * @return {function(Buffer):cls} The deserialization function\n */\nexports.deserializeCls = function deserializeCls(cls, options) {\n  /**\n   * Deserialize a buffer to a message object\n   * @param {Buffer} arg_buf The buffer to deserialize\n   * @return {cls} The resulting object\n   */\n  return function deserialize(arg_buf) {\n    // Convert to a native object with binary fields as Buffers (first argument)\n    // and longs as strings (second argument)\n    return cls.decode(arg_buf).toRaw(options.binaryAsBase64,\n                                     options.longsAsStrings);\n  };\n};\n\nvar deserializeCls = exports.deserializeCls;\n\n/**\n * Get a function that serializes objects to a buffer by protobuf class.\n * @param {function()} Cls The constructor of the message type to serialize\n * @return {function(Cls):Buffer} The serialization function\n */\nexports.serializeCls = function serializeCls(Cls) {\n  /**\n   * Serialize an object to a Buffer\n   * @param {Object} arg The object to serialize\n   * @return {Buffer} The serialized object\n   */\n  return function serialize(arg) {\n    return Buffer.from(new Cls(arg).encode().toBuffer());\n  };\n};\n\nvar serializeCls = exports.serializeCls;\n\n/**\n * Get the fully qualified (dotted) name of a ProtoBuf.Reflect value.\n * @param {ProtoBuf.Reflect.Namespace} value The value to get the name of\n * @return {string} The fully qualified name of the value\n */\nexports.fullyQualifiedName = function fullyQualifiedName(value) {\n  if (value === null || value === undefined) {\n    return '';\n  }\n  var name = value.name;\n  var parent_name = fullyQualifiedName(value.parent);\n  if (parent_name !== '') {\n    name = parent_name + '.' + name;\n  }\n  return name;\n};\n\nvar fullyQualifiedName = exports.fullyQualifiedName;\n\n/**\n * Return a map from method names to method attributes for the service.\n * @param {ProtoBuf.Reflect.Service} service The service to get attributes for\n * @param {Object=} options Options to apply to these attributes\n * @return {Object} The attributes map\n */\nexports.getProtobufServiceAttrs = function getProtobufServiceAttrs(service,\n                                                                   options) {\n  var prefix = '/' + fullyQualifiedName(service) + '/';\n  var binaryAsBase64, longsAsStrings;\n  if (options) {\n    binaryAsBase64 = options.binaryAsBase64;\n    longsAsStrings = options.longsAsStrings;\n  }\n  /* This slightly awkward construction is used to make sure we only use\n     lodash@3.10.1-compatible functions. A previous version used\n     _.fromPairs, which would be cleaner, but was introduced in lodash\n     version 4 */\n  return common.zipObject(service.children.map(function(method) {\n    return camelCase(method.name);\n  }), service.children.map(function(method) {\n    return {\n      originalName: method.name,\n      path: prefix + method.name,\n      requestStream: method.requestStream,\n      responseStream: method.responseStream,\n      requestType: method.resolvedRequestType,\n      responseType: method.resolvedResponseType,\n      requestSerialize: serializeCls(method.resolvedRequestType.build()),\n      requestDeserialize: deserializeCls(method.resolvedRequestType.build(),\n                                         options),\n      responseSerialize: serializeCls(method.resolvedResponseType.build()),\n      responseDeserialize: deserializeCls(method.resolvedResponseType.build(),\n                                          options)\n    };\n  }));\n};\n\nvar getProtobufServiceAttrs = exports.getProtobufServiceAttrs;\n\n/**\n * Load a gRPC object from an existing ProtoBuf.Reflect object.\n * @param {ProtoBuf.Reflect.Namespace} value The ProtoBuf object to load.\n * @param {Object=} options Options to apply to the loaded object\n * @return {Object<string, *>} The resulting gRPC object\n */\nexports.loadObject = function loadObject(value, options) {\n  var result = {};\n  if (!value) {\n    return value;\n  }\n  if (value.hasOwnProperty('ns')) {\n    return loadObject(value.ns, options);\n  }\n  if (value.className === 'Namespace') {\n    Object.keys(value.children).forEach(key => {\n      const child = value.children[key];\n      result[child.name] = loadObject(child, options);\n    });\n    return result;\n  } else if (value.className === 'Service') {\n    return client.makeClientConstructor(getProtobufServiceAttrs(value, options),\n                                        options);\n  } else if (value.className === 'Message' || value.className === 'Enum') {\n    return value.build();\n  } else {\n    return value;\n  }\n};\n\n/**\n * The primary purpose of this method is to distinguish between reflection\n * objects from different versions of ProtoBuf.js. This is just a heuristic,\n * checking for properties that are (currently) specific to this version of\n * ProtoBuf.js\n * @param {Object} obj The object to check\n * @return {boolean} Whether the object appears to be a Protobuf.js 5\n *   ReflectionObject\n */\nexports.isProbablyProtobufJs5 = function isProbablyProtobufJs5(obj) {\n  return Array.isArray(obj.children) && (typeof obj.build === 'function');\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}