{"ast":null,"code":"/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n'use strict';\n\nvar grpc = require('./grpc_extension');\n\nvar common = require('./common');\n\nvar Metadata = require('./metadata');\n\nvar constants = require('./constants');\n\nvar stream = require('stream');\n\nvar Readable = stream.Readable;\nvar Writable = stream.Writable;\nvar Duplex = stream.Duplex;\n\nvar util = require('util');\n\nvar EventEmitter = require('events').EventEmitter;\n/**\n * Handle an error on a call by sending it as a status\n * @private\n * @param {grpc.internal~Call} call The call to send the error on\n * @param {(Object|Error)} error The error object\n */\n\n\nfunction handleError(call, error) {\n  var statusMetadata = new Metadata();\n  var status = {\n    code: constants.status.UNKNOWN,\n    details: 'Unknown Error'\n  };\n\n  if (error.hasOwnProperty('message')) {\n    status.details = error.message;\n  }\n\n  if (error.hasOwnProperty('code') && Number.isInteger(error.code)) {\n    status.code = error.code;\n\n    if (error.hasOwnProperty('details')) {\n      status.details = error.details;\n    }\n  }\n\n  if (error.hasOwnProperty('metadata')) {\n    statusMetadata = error.metadata;\n  }\n\n  status.metadata = statusMetadata._getCoreRepresentation();\n  var error_batch = {};\n\n  if (!call.metadataSent) {\n    error_batch[grpc.opType.SEND_INITIAL_METADATA] = new Metadata()._getCoreRepresentation();\n  }\n\n  error_batch[grpc.opType.SEND_STATUS_FROM_SERVER] = status;\n  call.startBatch(error_batch, function () {});\n}\n/**\n * Send a response to a unary or client streaming call.\n * @private\n * @param {grpc.Call} call The call to respond on\n * @param {*} value The value to respond with\n * @param {grpc~serialize} serialize Serialization function for the\n *     response\n * @param {grpc.Metadata=} metadata Optional trailing metadata to send with\n *     status\n * @param {number=} [flags=0] Flags for modifying how the message is sent.\n */\n\n\nfunction sendUnaryResponse(call, value, serialize, metadata, flags) {\n  var end_batch = {};\n  var statusMetadata = new Metadata();\n  var status = {\n    code: constants.status.OK,\n    details: 'OK'\n  };\n\n  if (metadata) {\n    statusMetadata = metadata;\n  }\n\n  var message;\n\n  try {\n    message = serialize(value);\n  } catch (e) {\n    common.log(constants.logVerbosity.ERROR, e);\n    e.code = constants.status.INTERNAL;\n    handleError(call, e);\n    return;\n  }\n\n  status.metadata = statusMetadata._getCoreRepresentation();\n\n  if (!call.metadataSent) {\n    end_batch[grpc.opType.SEND_INITIAL_METADATA] = new Metadata()._getCoreRepresentation();\n    call.metadataSent = true;\n  }\n\n  message.grpcWriteFlags = flags;\n  end_batch[grpc.opType.SEND_MESSAGE] = message;\n  end_batch[grpc.opType.SEND_STATUS_FROM_SERVER] = status;\n  call.startBatch(end_batch, function () {});\n}\n/**\n * Initialize a writable stream. This is used for both the writable and duplex\n * stream constructors.\n * @private\n * @param {Writable} stream The stream to set up\n * @param {function(*):Buffer=} Serialization function for responses\n */\n\n\nfunction setUpWritable(stream, serialize) {\n  stream.finished = false;\n  stream.status = {\n    code: constants.status.OK,\n    details: 'OK',\n    metadata: new Metadata()\n  };\n  stream.serialize = common.wrapIgnoreNull(serialize);\n\n  function sendStatus() {\n    var batch = {};\n\n    if (!stream.call.metadataSent) {\n      stream.call.metadataSent = true;\n      batch[grpc.opType.SEND_INITIAL_METADATA] = new Metadata()._getCoreRepresentation();\n    }\n\n    if (stream.status.metadata) {\n      stream.status.metadata = stream.status.metadata._getCoreRepresentation();\n    }\n\n    batch[grpc.opType.SEND_STATUS_FROM_SERVER] = stream.status;\n    stream.call.startBatch(batch, function () {});\n  }\n\n  stream.on('finish', sendStatus);\n  /**\n   * Set the pending status to a given error status. If the error does not have\n   * code or details properties, the code will be set to grpc.status.UNKNOWN\n   * and the details will be set to 'Unknown Error'.\n   * @param {Error} err The error object\n   */\n\n  function setStatus(err) {\n    var code = constants.status.UNKNOWN;\n    var details = 'Unknown Error';\n    var metadata = new Metadata();\n\n    if (err.hasOwnProperty('message')) {\n      details = err.message;\n    }\n\n    if (err.hasOwnProperty('code')) {\n      code = err.code;\n\n      if (err.hasOwnProperty('details')) {\n        details = err.details;\n      }\n    }\n\n    if (err.hasOwnProperty('metadata')) {\n      metadata = err.metadata;\n    }\n\n    stream.status = {\n      code: code,\n      details: details,\n      metadata: metadata\n    };\n  }\n  /**\n   * Terminate the call. This includes indicating that reads are done, draining\n   * all pending writes, and sending the given error as a status\n   * @param {Error} err The error object\n   * @this GrpcServerStream\n   */\n\n\n  function terminateCall(err) {\n    // Drain readable data\n    setStatus(err);\n    stream.end();\n  }\n\n  stream.on('error', terminateCall);\n  /**\n   * Override of Writable#end method that allows for sending metadata with a\n   * success status.\n   * @param {Metadata=} metadata Metadata to send with the status\n   */\n\n  stream.end = function (metadata) {\n    if (metadata) {\n      stream.status.metadata = metadata;\n    }\n\n    Writable.prototype.end.call(this);\n  };\n}\n/**\n * Initialize a readable stream. This is used for both the readable and duplex\n * stream constructors.\n * @private\n * @param {Readable} stream The stream to initialize\n * @param {grpc~deserialize} deserialize Deserialization function for\n *     incoming data.\n */\n\n\nfunction setUpReadable(stream, deserialize) {\n  stream.deserialize = common.wrapIgnoreNull(deserialize);\n  stream.finished = false;\n  stream.reading = false;\n\n  stream.terminate = function () {\n    stream.finished = true;\n    stream.on('data', function () {});\n  };\n\n  stream.on('cancelled', function () {\n    stream.terminate();\n  });\n}\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerUnaryCall~cancelled\n */\n\n\nutil.inherits(ServerUnaryCall, EventEmitter);\n/**\n * An EventEmitter. Used for unary calls.\n * @constructor grpc~ServerUnaryCall\n * @extends external:EventEmitter\n * @param {grpc.internal~Call} call The call object associated with the request\n * @param {grpc.Metadata} metadata The request metadata from the client\n */\n\nfunction ServerUnaryCall(call, metadata) {\n  EventEmitter.call(this);\n  this.call = call;\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerUnaryCall#cancelled\n   */\n\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerUnaryCall#metadata\n   */\n\n  this.metadata = metadata;\n  /**\n   * The request message from the client\n   * @member {*} grpc~ServerUnaryCall#request\n   */\n\n  this.request = undefined;\n}\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerWritableStream~cancelled\n */\n\n\nutil.inherits(ServerWritableStream, Writable);\n/**\n * A stream that the server can write to. Used for calls that are streaming from\n * the server side.\n * @constructor grpc~ServerWritableStream\n * @extends external:Writable\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerWritableStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerWritableStream#getPeer\n * @param {grpc.internal~Call} call The call object to send data with\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~serialize} serialize Serialization function for writes\n */\n\nfunction ServerWritableStream(call, metadata, serialize) {\n  Writable.call(this, {\n    objectMode: true\n  });\n  this.call = call;\n  this.finished = false;\n  setUpWritable(this, serialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerWritableStream#cancelled\n   */\n\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerWritableStream#metadata\n   */\n\n  this.metadata = metadata;\n  /**\n   * The request message from the client\n   * @member {*} grpc~ServerWritableStream#request\n   */\n\n  this.request = undefined;\n}\n/**\n * Start writing a chunk of data. This is an implementation of a method required\n * for implementing stream.Writable.\n * @private\n * @param {Buffer} chunk The chunk of data to write\n * @param {string} encoding Used to pass write flags\n * @param {function(Error=)} callback Callback to indicate that the write is\n *     complete\n */\n\n\nfunction _write(chunk, encoding, callback) {\n  /* jshint validthis: true */\n  var batch = {};\n  var self = this;\n  var message;\n\n  try {\n    message = this.serialize(chunk);\n  } catch (e) {\n    common.log(constants.logVerbosity.ERROR, e);\n    e.code = constants.status.INTERNAL;\n    callback(e);\n    return;\n  }\n\n  if (!this.call.metadataSent) {\n    batch[grpc.opType.SEND_INITIAL_METADATA] = new Metadata()._getCoreRepresentation();\n    this.call.metadataSent = true;\n  }\n\n  if (Number.isFinite(encoding)) {\n    /* Attach the encoding if it is a finite number. This is the closest we\n     * can get to checking that it is valid flags */\n    message.grpcWriteFlags = encoding;\n  }\n\n  batch[grpc.opType.SEND_MESSAGE] = message;\n  this.call.startBatch(batch, function (err, value) {\n    if (err) {\n      self.emit('error', err);\n      return;\n    }\n\n    callback();\n  });\n}\n\nServerWritableStream.prototype._write = _write;\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerReadableStream~cancelled\n */\n\nutil.inherits(ServerReadableStream, Readable);\n/**\n * A stream that the server can read from. Used for calls that are streaming\n * from the client side.\n * @constructor grpc~ServerReadableStream\n * @extends external:Readable\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerReadableStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerReadableStream#getPeer\n * @param {grpc.internal~Call} call The call object to read data with\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~deserialize} deserialize Deserialization function for reads\n */\n\nfunction ServerReadableStream(call, metadata, deserialize) {\n  Readable.call(this, {\n    objectMode: true\n  });\n  this.call = call;\n  setUpReadable(this, deserialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerReadableStream#cancelled\n   */\n\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerReadableStream#metadata\n   */\n\n  this.metadata = metadata;\n}\n/**\n * Start reading from the gRPC data source. This is an implementation of a\n * method required for implementing stream.Readable\n * @access private\n * @param {number} size Ignored\n */\n\n\nfunction _read(size) {\n  /* jshint validthis: true */\n  var self = this;\n  /**\n   * Callback to be called when a READ event is received. Pushes the data onto\n   * the read queue and starts reading again if applicable\n   * @param {grpc.Event} event READ event object\n   */\n\n  function readCallback(err, event) {\n    if (err) {\n      self.terminate();\n      return;\n    }\n\n    if (self.finished) {\n      self.push(null);\n      return;\n    }\n\n    var data = event.read;\n    var deserialized;\n\n    try {\n      deserialized = self.deserialize(data);\n    } catch (e) {\n      common.log(constants.logVerbosity.ERROR, e);\n      e.code = constants.status.INTERNAL;\n      self.emit('error', e);\n      return;\n    }\n\n    if (self.push(deserialized) && data !== null) {\n      var read_batch = {};\n      read_batch[grpc.opType.RECV_MESSAGE] = true;\n      self.call.startBatch(read_batch, readCallback);\n    } else {\n      self.reading = false;\n    }\n  }\n\n  if (self.finished) {\n    self.push(null);\n  } else {\n    if (!self.reading) {\n      self.reading = true;\n      var batch = {};\n      batch[grpc.opType.RECV_MESSAGE] = true;\n      self.call.startBatch(batch, readCallback);\n    }\n  }\n}\n\nServerReadableStream.prototype._read = _read;\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerDuplexStream~cancelled\n */\n\nutil.inherits(ServerDuplexStream, Duplex);\n/**\n * A stream that the server can read from or write to. Used for calls with\n * duplex streaming.\n * @constructor grpc~ServerDuplexStream\n * @extends external:Duplex\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerDuplexStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerDuplexStream#getPeer\n * @param {grpc.internal~Call} call Call object to proxy\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~serialize} serialize Serialization function for requests\n * @param {grpc~deserialize} deserialize Deserialization function for\n *     responses\n */\n\nfunction ServerDuplexStream(call, metadata, serialize, deserialize) {\n  Duplex.call(this, {\n    objectMode: true\n  });\n  this.call = call;\n  setUpWritable(this, serialize);\n  setUpReadable(this, deserialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerReadableStream#cancelled\n   */\n\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerReadableStream#metadata\n   */\n\n  this.metadata = metadata;\n}\n\nServerDuplexStream.prototype._read = _read;\nServerDuplexStream.prototype._write = _write;\n/**\n * Send the initial metadata for a writable stream.\n * @alias grpc~ServerUnaryCall#sendMetadata\n * @param {grpc.Metadata} responseMetadata Metadata to send\n */\n\nfunction sendMetadata(responseMetadata) {\n  /* jshint validthis: true */\n  var self = this;\n\n  if (!this.call.metadataSent) {\n    this.call.metadataSent = true;\n    var batch = {};\n    batch[grpc.opType.SEND_INITIAL_METADATA] = responseMetadata._getCoreRepresentation();\n    this.call.startBatch(batch, function (err) {\n      if (err) {\n        self.emit('error', err);\n        return;\n      }\n    });\n  }\n}\n\nServerUnaryCall.prototype.sendMetadata = sendMetadata;\nServerWritableStream.prototype.sendMetadata = sendMetadata;\nServerReadableStream.prototype.sendMetadata = sendMetadata;\nServerDuplexStream.prototype.sendMetadata = sendMetadata;\n/**\n * Get the endpoint this call/stream is connected to.\n * @alias grpc~ServerUnaryCall#getPeer\n * @return {string} The URI of the endpoint\n */\n\nfunction getPeer() {\n  /* jshint validthis: true */\n  return this.call.getPeer();\n}\n\nServerUnaryCall.prototype.getPeer = getPeer;\nServerReadableStream.prototype.getPeer = getPeer;\nServerWritableStream.prototype.getPeer = getPeer;\nServerDuplexStream.prototype.getPeer = getPeer;\n/**\n * Wait for the client to close, then emit a cancelled event if the client\n * cancelled.\n * @private\n */\n\nfunction waitForCancel() {\n  /* jshint validthis: true */\n  var self = this;\n  var cancel_batch = {};\n  cancel_batch[grpc.opType.RECV_CLOSE_ON_SERVER] = true;\n  self.call.startBatch(cancel_batch, function (err, result) {\n    if (err) {\n      self.emit('error', err);\n    }\n\n    if (result.cancelled) {\n      self.cancelled = true;\n      self.emit('cancelled');\n    }\n  });\n}\n\nServerUnaryCall.prototype.waitForCancel = waitForCancel;\nServerReadableStream.prototype.waitForCancel = waitForCancel;\nServerWritableStream.prototype.waitForCancel = waitForCancel;\nServerDuplexStream.prototype.waitForCancel = waitForCancel;\n/**\n * Callback function passed to server handlers that handle methods with unary\n * responses.\n * @callback grpc.Server~sendUnaryData\n * @param {grpc~ServiceError} error An error, if the call failed\n * @param {*} value The response value. Must be a valid argument to the\n *     `responseSerialize` method of the method that is being handled\n * @param {grpc.Metadata=} trailer Trailing metadata to send, if applicable\n * @param {grpc.writeFlags=} flags Flags to modify writing the response\n */\n\n/**\n * User-provided method to handle unary requests on a server\n * @callback grpc.Server~handleUnaryCall\n * @param {grpc~ServerUnaryCall} call The call object\n * @param {grpc.Server~sendUnaryData} callback The callback to call to respond\n *     to the request\n */\n\n/**\n * Fully handle a unary call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleUnaryCall} handler.func The handler function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\n\nfunction handleUnary(call, handler, metadata) {\n  var emitter = new ServerUnaryCall(call, metadata);\n  emitter.on('error', function (error) {\n    handleError(call, error);\n  });\n  emitter.waitForCancel();\n  var batch = {};\n  batch[grpc.opType.RECV_MESSAGE] = true;\n  call.startBatch(batch, function (err, result) {\n    if (err) {\n      handleError(call, err);\n      return;\n    }\n\n    try {\n      emitter.request = handler.deserialize(result.read);\n    } catch (e) {\n      common.log(constants.logVerbosity.ERROR, e);\n      e.code = constants.status.INTERNAL;\n      handleError(call, e);\n      return;\n    }\n\n    if (emitter.cancelled) {\n      return;\n    }\n\n    handler.func(emitter, function sendUnaryData(err, value, trailer, flags) {\n      if (err) {\n        if (trailer) {\n          err.metadata = trailer;\n        }\n\n        handleError(call, err);\n      } else {\n        sendUnaryResponse(call, value, handler.serialize, trailer, flags);\n      }\n    });\n  });\n}\n/**\n * User provided method to handle server streaming methods on the server.\n * @callback grpc.Server~handleServerStreamingCall\n * @param {grpc~ServerWritableStream} call The call object\n */\n\n/**\n * Fully handle a server streaming call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleServerStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\n\n\nfunction handleServerStreaming(call, handler, metadata) {\n  var stream = new ServerWritableStream(call, metadata, handler.serialize);\n  stream.waitForCancel();\n  var batch = {};\n  batch[grpc.opType.RECV_MESSAGE] = true;\n  call.startBatch(batch, function (err, result) {\n    if (err) {\n      stream.emit('error', err);\n      return;\n    }\n\n    try {\n      stream.request = handler.deserialize(result.read);\n    } catch (e) {\n      common.log(constants.logVerbosity.ERROR, e);\n      e.code = constants.status.INTERNAL;\n      stream.emit('error', e);\n      return;\n    }\n\n    handler.func(stream);\n  });\n}\n/**\n * User provided method to handle client streaming methods on the server.\n * @callback grpc.Server~handleClientStreamingCall\n * @param {grpc~ServerReadableStream} call The call object\n * @param {grpc.Server~sendUnaryData} callback The callback to call to respond\n *     to the request\n */\n\n/**\n * Fully handle a client streaming call\n * @access private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleClientStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\n\n\nfunction handleClientStreaming(call, handler, metadata) {\n  var stream = new ServerReadableStream(call, metadata, handler.deserialize);\n  stream.on('error', function (error) {\n    handleError(call, error);\n  });\n  stream.waitForCancel();\n  handler.func(stream, function (err, value, trailer, flags) {\n    stream.terminate();\n\n    if (err) {\n      if (trailer) {\n        err.metadata = trailer;\n      }\n\n      handleError(call, err);\n    } else {\n      sendUnaryResponse(call, value, handler.serialize, trailer, flags);\n    }\n  });\n}\n/**\n * User provided method to handle bidirectional streaming calls on the server.\n * @callback grpc.Server~handleBidiStreamingCall\n * @param {grpc~ServerDuplexStream} call The call object\n */\n\n/**\n * Fully handle a bidirectional streaming call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleBidiStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {Metadata} metadata Metadata from the client\n */\n\n\nfunction handleBidiStreaming(call, handler, metadata) {\n  var stream = new ServerDuplexStream(call, metadata, handler.serialize, handler.deserialize);\n  stream.waitForCancel();\n  handler.func(stream);\n}\n\nvar streamHandlers = {\n  unary: handleUnary,\n  server_stream: handleServerStreaming,\n  client_stream: handleClientStreaming,\n  bidi: handleBidiStreaming\n};\n/**\n * Constructs a server object that stores request handlers and delegates\n * incoming requests to those handlers\n * @memberof grpc\n * @constructor\n * @param {Object=} options Options that should be passed to the internal server\n *     implementation. The available options are listed in\n *     [this document]{@link https://grpc.github.io/grpc/core/group__grpc__arg__keys.html}.\n * @example\n * var server = new grpc.Server();\n * server.addProtoService(protobuf_service_descriptor, service_implementation);\n * server.bind('address:port', server_credential);\n * server.start();\n */\n\nfunction Server(options) {\n  this.handlers = {};\n  var server = new grpc.Server(options);\n  this._server = server;\n  this.started = false;\n}\n/**\n * Start the server and begin handling requests\n */\n\n\nServer.prototype.start = function () {\n  if (this.started) {\n    throw new Error('Server is already running');\n  }\n\n  var self = this;\n  this.started = true;\n\n  this._server.start();\n  /**\n   * Handles the SERVER_RPC_NEW event. If there is a handler associated with\n   * the requested method, use that handler to respond to the request. Then\n   * wait for the next request\n   * @param {grpc.internal~Event} event The event to handle with tag\n   *     SERVER_RPC_NEW\n   */\n\n\n  function handleNewCall(err, event) {\n    if (err) {\n      return;\n    }\n\n    var details = event.new_call;\n    var call = details.call;\n    var method = details.method;\n\n    var metadata = Metadata._fromCoreRepresentation(details.metadata);\n\n    if (method === null) {\n      return;\n    }\n\n    self._server.requestCall(handleNewCall);\n\n    var handler;\n\n    if (self.handlers.hasOwnProperty(method)) {\n      handler = self.handlers[method];\n    } else {\n      var batch = {};\n      batch[grpc.opType.SEND_INITIAL_METADATA] = new Metadata()._getCoreRepresentation();\n      batch[grpc.opType.SEND_STATUS_FROM_SERVER] = {\n        code: constants.status.UNIMPLEMENTED,\n        details: 'RPC method not implemented ' + method,\n        metadata: new Metadata()._getCoreRepresentation()\n      };\n      batch[grpc.opType.RECV_CLOSE_ON_SERVER] = true;\n      call.startBatch(batch, function () {});\n      return;\n    }\n\n    streamHandlers[handler.type](call, handler, metadata);\n  }\n\n  this._server.requestCall(handleNewCall);\n};\n/**\n * Unified type for application handlers for all types of calls\n * @typedef {(grpc.Server~handleUnaryCall\n *            |grpc.Server~handleClientStreamingCall\n *            |grpc.Server~handleServerStreamingCall\n *            |grpc.Server~handleBidiStreamingCall)} grpc.Server~handleCall\n */\n\n/**\n * Registers a handler to handle the named method. Fails if there already is\n * a handler for the given method. Returns true on success\n * @param {string} name The name of the method that the provided function should\n *     handle/respond to.\n * @param {grpc.Server~handleCall} handler Function that takes a stream of\n *     request values and returns a stream of response values\n * @param {grpc~serialize} serialize Serialization function for responses\n * @param {grpc~deserialize} deserialize Deserialization function for requests\n * @param {('unary'|'client_stream'|'server_stream'|'bidi')} type The streaming type of method that this handles\n * @return {boolean} True if the handler was set. False if a handler was already\n *     set for that name.\n */\n\n\nServer.prototype.register = function (name, handler, serialize, deserialize, type) {\n  if (this.handlers.hasOwnProperty(name)) {\n    return false;\n  }\n\n  this.handlers[name] = {\n    func: handler,\n    serialize: serialize,\n    deserialize: deserialize,\n    type: type\n  };\n  return true;\n};\n/**\n * Gracefully shuts down the server. The server will stop receiving new calls,\n * and any pending calls will complete. The callback will be called when all\n * pending calls have completed and the server is fully shut down. This method\n * is idempotent with itself and forceShutdown.\n * @param {function()} callback The shutdown complete callback\n */\n\n\nServer.prototype.tryShutdown = function (callback) {\n  this._server.tryShutdown(callback);\n};\n/**\n * Forcibly shuts down the server. The server will stop receiving new calls\n * and cancel all pending calls. When it returns, the server has shut down.\n * This method is idempotent with itself and tryShutdown, and it will trigger\n * any outstanding tryShutdown callbacks.\n */\n\n\nServer.prototype.forceShutdown = function () {\n  this._server.forceShutdown();\n};\n\nvar unimplementedStatusResponse = {\n  code: constants.status.UNIMPLEMENTED,\n  details: 'The server does not implement this method'\n};\nvar defaultHandler = {\n  unary: function (call, callback) {\n    callback(unimplementedStatusResponse);\n  },\n  client_stream: function (call, callback) {\n    callback(unimplementedStatusResponse);\n  },\n  server_stream: function (call) {\n    call.emit('error', unimplementedStatusResponse);\n  },\n  bidi: function (call) {\n    call.emit('error', unimplementedStatusResponse);\n  }\n};\n\nfunction isObject(thing) {\n  return (typeof thing === 'object' || typeof thing === 'function') && thing !== null;\n}\n/**\n * Add a service to the server, with a corresponding implementation.\n * @param {grpc~ServiceDefinition} service The service descriptor\n * @param {Object<String, grpc.Server~handleCall>} implementation Map of method\n *     names to method implementation for the provided service.\n */\n\n\nServer.prototype.addService = function (service, implementation) {\n  if (!isObject(service) || !isObject(implementation)) {\n    throw new Error('addService requires two objects as arguments');\n  }\n\n  if (Object.keys(service).length === 0) {\n    throw new Error('Cannot add an empty service to a server');\n  }\n\n  if (this.started) {\n    throw new Error('Can\\'t add a service to a started server.');\n  }\n\n  var self = this;\n  Object.keys(service).forEach(name => {\n    const attrs = service[name];\n    var method_type;\n\n    if (attrs.requestStream) {\n      if (attrs.responseStream) {\n        method_type = 'bidi';\n      } else {\n        method_type = 'client_stream';\n      }\n    } else {\n      if (attrs.responseStream) {\n        method_type = 'server_stream';\n      } else {\n        method_type = 'unary';\n      }\n    }\n\n    var impl;\n\n    if (implementation[name] === undefined) {\n      /* Handle the case where the method is passed with the name exactly as\n         written in the proto file, instead of using JavaScript function\n         naming style */\n      if (implementation[attrs.originalName] === undefined) {\n        common.log(constants.logVerbosity.ERROR, 'Method handler ' + name + ' for ' + attrs.path + ' expected but not provided');\n        impl = defaultHandler[method_type];\n      } else {\n        impl = implementation[attrs.originalName].bind(implementation);\n      }\n    } else {\n      impl = implementation[name].bind(implementation);\n    }\n\n    var serialize = attrs.responseSerialize;\n    var deserialize = attrs.requestDeserialize;\n    var register_success = self.register(attrs.path, impl, serialize, deserialize, method_type);\n\n    if (!register_success) {\n      throw new Error('Method handler for ' + attrs.path + ' already provided.');\n    }\n  });\n};\n/**\n * Add a proto service to the server, with a corresponding implementation\n * @deprecated Use {@link grpc.Server#addService} instead\n * @param {Protobuf.Reflect.Service} service The proto service descriptor\n * @param {Object<String, grpc.Server~handleCall>} implementation Map of method\n *     names to method implementation for the provided service.\n */\n\n\nServer.prototype.addProtoService = util.deprecate(function (service, implementation) {\n  var options;\n\n  var protobuf_js_5_common = require('./protobuf_js_5_common');\n\n  var protobuf_js_6_common = require('./protobuf_js_6_common');\n\n  if (protobuf_js_5_common.isProbablyProtobufJs5(service)) {\n    options = Object.assign({}, common.defaultGrpcOptions, service.grpc_options);\n    this.addService(protobuf_js_5_common.getProtobufServiceAttrs(service, options), implementation);\n  } else if (protobuf_js_6_common.isProbablyProtobufJs6(service)) {\n    options = Object.assign({}, common.defaultGrpcOptions, service.grpc_options);\n    this.addService(protobuf_js_6_common.getProtobufServiceAttrs(service, options), implementation);\n  } else {\n    // We assume that this is a service attributes object\n    this.addService(service, implementation);\n  }\n}, 'Server#addProtoService: Use Server#addService instead');\n/**\n * Binds the server to the given port, with SSL disabled if creds is an\n * insecure credentials object\n * @param {string} port The port that the server should bind on, in the format\n *     \"address:port\"\n * @param {grpc.ServerCredentials} creds Server credential object to be used for\n *     SSL. Pass an insecure credentials object for an insecure port.\n * @return {number} The bound port number. Negative if binding the port failed.\n */\n\nServer.prototype.bind = function (port, creds) {\n  if (this.started) {\n    throw new Error('Can\\'t bind an already running server to an address');\n  }\n\n  return this._server.addHttp2Port(port, creds);\n};\n/**\n * Called with the result of attempting to bind a port\n * @callback grpc.Server~bindCallback\n * @param {Error=} error If non-null, indicates that binding the port failed.\n * @param {number} port The bound port number. If binding the port fails, this\n *     will be negative to match the output of bind.\n */\n\n/**\n * Binds the server to the given port, with SSL disabled if creds is an\n * insecure credentials object. Provides the result asynchronously.\n * @param {string} port The port that the server should bind on, in the format\n *     \"address:port\"\n * @param {grpc.ServerCredentials} creds Server credential object to be used for\n *     SSL. Pass an insecure credentials object for an insecure port.\n */\n\n\nServer.prototype.bindAsync = function (port, creds, callback) {\n  /* This can throw. We do not try to catch that error because it indicates an\n   * incorrect use of the function, which should not be surfaced asynchronously\n   */\n  const result = this.bind(port, creds);\n\n  if (result < 0) {\n    setImmediate(callback, new Error('Failed to bind port'), result);\n  } else {\n    setImmediate(callback, null, result);\n  }\n};\n\nexports.Server = Server;","map":{"version":3,"names":["grpc","require","common","Metadata","constants","stream","Readable","Writable","Duplex","util","EventEmitter","handleError","call","error","statusMetadata","status","code","UNKNOWN","details","hasOwnProperty","message","Number","isInteger","metadata","_getCoreRepresentation","error_batch","metadataSent","opType","SEND_INITIAL_METADATA","SEND_STATUS_FROM_SERVER","startBatch","sendUnaryResponse","value","serialize","flags","end_batch","OK","e","log","logVerbosity","ERROR","INTERNAL","grpcWriteFlags","SEND_MESSAGE","setUpWritable","finished","wrapIgnoreNull","sendStatus","batch","on","setStatus","err","terminateCall","end","prototype","setUpReadable","deserialize","reading","terminate","inherits","ServerUnaryCall","cancelled","request","undefined","ServerWritableStream","objectMode","_write","chunk","encoding","callback","self","isFinite","emit","ServerReadableStream","_read","size","readCallback","event","push","data","read","deserialized","read_batch","RECV_MESSAGE","ServerDuplexStream","sendMetadata","responseMetadata","getPeer","waitForCancel","cancel_batch","RECV_CLOSE_ON_SERVER","result","handleUnary","handler","emitter","func","sendUnaryData","trailer","handleServerStreaming","handleClientStreaming","handleBidiStreaming","streamHandlers","unary","server_stream","client_stream","bidi","Server","options","handlers","server","_server","started","start","Error","handleNewCall","new_call","method","_fromCoreRepresentation","requestCall","UNIMPLEMENTED","type","register","name","tryShutdown","forceShutdown","unimplementedStatusResponse","defaultHandler","isObject","thing","addService","service","implementation","Object","keys","length","forEach","attrs","method_type","requestStream","responseStream","impl","originalName","path","bind","responseSerialize","requestDeserialize","register_success","addProtoService","deprecate","protobuf_js_5_common","protobuf_js_6_common","isProbablyProtobufJs5","assign","defaultGrpcOptions","grpc_options","getProtobufServiceAttrs","isProbablyProtobufJs6","port","creds","addHttp2Port","bindAsync","setImmediate","exports"],"sources":["C:/Users/Asus/Documents/threejs/miro learning/20.12 neuroweb textures/node_modules/grpc/src/server.js"],"sourcesContent":["/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n'use strict';\n\nvar grpc = require('./grpc_extension');\n\nvar common = require('./common');\n\nvar Metadata = require('./metadata');\n\nvar constants = require('./constants');\n\nvar stream = require('stream');\n\nvar Readable = stream.Readable;\nvar Writable = stream.Writable;\nvar Duplex = stream.Duplex;\nvar util = require('util');\n\nvar EventEmitter = require('events').EventEmitter;\n\n/**\n * Handle an error on a call by sending it as a status\n * @private\n * @param {grpc.internal~Call} call The call to send the error on\n * @param {(Object|Error)} error The error object\n */\nfunction handleError(call, error) {\n  var statusMetadata = new Metadata();\n  var status = {\n    code: constants.status.UNKNOWN,\n    details: 'Unknown Error'\n  };\n  if (error.hasOwnProperty('message')) {\n    status.details = error.message;\n  }\n  if (error.hasOwnProperty('code') && Number.isInteger(error.code)) {\n    status.code = error.code;\n    if (error.hasOwnProperty('details')) {\n      status.details = error.details;\n    }\n  }\n  if (error.hasOwnProperty('metadata')) {\n    statusMetadata = error.metadata;\n  }\n  status.metadata = statusMetadata._getCoreRepresentation();\n  var error_batch = {};\n  if (!call.metadataSent) {\n    error_batch[grpc.opType.SEND_INITIAL_METADATA] =\n        (new Metadata())._getCoreRepresentation();\n  }\n  error_batch[grpc.opType.SEND_STATUS_FROM_SERVER] = status;\n  call.startBatch(error_batch, function(){});\n}\n\n/**\n * Send a response to a unary or client streaming call.\n * @private\n * @param {grpc.Call} call The call to respond on\n * @param {*} value The value to respond with\n * @param {grpc~serialize} serialize Serialization function for the\n *     response\n * @param {grpc.Metadata=} metadata Optional trailing metadata to send with\n *     status\n * @param {number=} [flags=0] Flags for modifying how the message is sent.\n */\nfunction sendUnaryResponse(call, value, serialize, metadata, flags) {\n  var end_batch = {};\n  var statusMetadata = new Metadata();\n  var status = {\n    code: constants.status.OK,\n    details: 'OK'\n  };\n  if (metadata) {\n    statusMetadata = metadata;\n  }\n  var message;\n  try {\n    message = serialize(value);\n  } catch (e) {\n    common.log(constants.logVerbosity.ERROR, e);\n    e.code = constants.status.INTERNAL;\n    handleError(call, e);\n    return;\n  }\n  status.metadata = statusMetadata._getCoreRepresentation();\n  if (!call.metadataSent) {\n    end_batch[grpc.opType.SEND_INITIAL_METADATA] =\n        (new Metadata())._getCoreRepresentation();\n    call.metadataSent = true;\n  }\n  message.grpcWriteFlags = flags;\n  end_batch[grpc.opType.SEND_MESSAGE] = message;\n  end_batch[grpc.opType.SEND_STATUS_FROM_SERVER] = status;\n  call.startBatch(end_batch, function (){});\n}\n\n/**\n * Initialize a writable stream. This is used for both the writable and duplex\n * stream constructors.\n * @private\n * @param {Writable} stream The stream to set up\n * @param {function(*):Buffer=} Serialization function for responses\n */\nfunction setUpWritable(stream, serialize) {\n  stream.finished = false;\n  stream.status = {\n    code : constants.status.OK,\n    details : 'OK',\n    metadata : new Metadata()\n  };\n  stream.serialize = common.wrapIgnoreNull(serialize);\n  function sendStatus() {\n    var batch = {};\n    if (!stream.call.metadataSent) {\n      stream.call.metadataSent = true;\n      batch[grpc.opType.SEND_INITIAL_METADATA] =\n          (new Metadata())._getCoreRepresentation();\n    }\n\n    if (stream.status.metadata) {\n      stream.status.metadata = stream.status.metadata._getCoreRepresentation();\n    }\n    batch[grpc.opType.SEND_STATUS_FROM_SERVER] = stream.status;\n    stream.call.startBatch(batch, function(){});\n  }\n  stream.on('finish', sendStatus);\n  /**\n   * Set the pending status to a given error status. If the error does not have\n   * code or details properties, the code will be set to grpc.status.UNKNOWN\n   * and the details will be set to 'Unknown Error'.\n   * @param {Error} err The error object\n   */\n  function setStatus(err) {\n    var code = constants.status.UNKNOWN;\n    var details = 'Unknown Error';\n    var metadata = new Metadata();\n    if (err.hasOwnProperty('message')) {\n      details = err.message;\n    }\n    if (err.hasOwnProperty('code')) {\n      code = err.code;\n      if (err.hasOwnProperty('details')) {\n        details = err.details;\n      }\n    }\n    if (err.hasOwnProperty('metadata')) {\n      metadata = err.metadata;\n    }\n    stream.status = {code: code, details: details, metadata: metadata};\n  }\n  /**\n   * Terminate the call. This includes indicating that reads are done, draining\n   * all pending writes, and sending the given error as a status\n   * @param {Error} err The error object\n   * @this GrpcServerStream\n   */\n  function terminateCall(err) {\n    // Drain readable data\n    setStatus(err);\n    stream.end();\n  }\n  stream.on('error', terminateCall);\n  /**\n   * Override of Writable#end method that allows for sending metadata with a\n   * success status.\n   * @param {Metadata=} metadata Metadata to send with the status\n   */\n  stream.end = function(metadata) {\n    if (metadata) {\n      stream.status.metadata = metadata;\n    }\n    Writable.prototype.end.call(this);\n  };\n}\n\n/**\n * Initialize a readable stream. This is used for both the readable and duplex\n * stream constructors.\n * @private\n * @param {Readable} stream The stream to initialize\n * @param {grpc~deserialize} deserialize Deserialization function for\n *     incoming data.\n */\nfunction setUpReadable(stream, deserialize) {\n  stream.deserialize = common.wrapIgnoreNull(deserialize);\n  stream.finished = false;\n  stream.reading = false;\n\n  stream.terminate = function() {\n    stream.finished = true;\n    stream.on('data', function() {});\n  };\n\n  stream.on('cancelled', function() {\n    stream.terminate();\n  });\n}\n\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerUnaryCall~cancelled\n */\n\nutil.inherits(ServerUnaryCall, EventEmitter);\n\n/**\n * An EventEmitter. Used for unary calls.\n * @constructor grpc~ServerUnaryCall\n * @extends external:EventEmitter\n * @param {grpc.internal~Call} call The call object associated with the request\n * @param {grpc.Metadata} metadata The request metadata from the client\n */\nfunction ServerUnaryCall(call, metadata) {\n  EventEmitter.call(this);\n  this.call = call;\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerUnaryCall#cancelled\n   */\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerUnaryCall#metadata\n   */\n  this.metadata = metadata;\n  /**\n   * The request message from the client\n   * @member {*} grpc~ServerUnaryCall#request\n   */\n  this.request = undefined;\n}\n\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerWritableStream~cancelled\n */\n\nutil.inherits(ServerWritableStream, Writable);\n\n/**\n * A stream that the server can write to. Used for calls that are streaming from\n * the server side.\n * @constructor grpc~ServerWritableStream\n * @extends external:Writable\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerWritableStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerWritableStream#getPeer\n * @param {grpc.internal~Call} call The call object to send data with\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~serialize} serialize Serialization function for writes\n */\nfunction ServerWritableStream(call, metadata, serialize) {\n  Writable.call(this, {objectMode: true});\n  this.call = call;\n\n  this.finished = false;\n  setUpWritable(this, serialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerWritableStream#cancelled\n   */\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerWritableStream#metadata\n   */\n  this.metadata = metadata;\n  /**\n   * The request message from the client\n   * @member {*} grpc~ServerWritableStream#request\n   */\n  this.request = undefined;\n}\n\n/**\n * Start writing a chunk of data. This is an implementation of a method required\n * for implementing stream.Writable.\n * @private\n * @param {Buffer} chunk The chunk of data to write\n * @param {string} encoding Used to pass write flags\n * @param {function(Error=)} callback Callback to indicate that the write is\n *     complete\n */\nfunction _write(chunk, encoding, callback) {\n  /* jshint validthis: true */\n  var batch = {};\n  var self = this;\n  var message;\n  try {\n    message = this.serialize(chunk);\n  } catch (e) {\n    common.log(constants.logVerbosity.ERROR, e);\n    e.code = constants.status.INTERNAL;\n    callback(e);\n    return;\n  }\n  if (!this.call.metadataSent) {\n    batch[grpc.opType.SEND_INITIAL_METADATA] =\n        (new Metadata())._getCoreRepresentation();\n    this.call.metadataSent = true;\n  }\n  if (Number.isFinite(encoding)) {\n    /* Attach the encoding if it is a finite number. This is the closest we\n     * can get to checking that it is valid flags */\n    message.grpcWriteFlags = encoding;\n  }\n  batch[grpc.opType.SEND_MESSAGE] = message;\n  this.call.startBatch(batch, function(err, value) {\n    if (err) {\n      self.emit('error', err);\n      return;\n    }\n    callback();\n  });\n}\n\nServerWritableStream.prototype._write = _write;\n\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerReadableStream~cancelled\n */\n\nutil.inherits(ServerReadableStream, Readable);\n\n/**\n * A stream that the server can read from. Used for calls that are streaming\n * from the client side.\n * @constructor grpc~ServerReadableStream\n * @extends external:Readable\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerReadableStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerReadableStream#getPeer\n * @param {grpc.internal~Call} call The call object to read data with\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~deserialize} deserialize Deserialization function for reads\n */\nfunction ServerReadableStream(call, metadata, deserialize) {\n  Readable.call(this, {objectMode: true});\n  this.call = call;\n  setUpReadable(this, deserialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerReadableStream#cancelled\n   */\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerReadableStream#metadata\n   */\n  this.metadata = metadata;\n}\n\n/**\n * Start reading from the gRPC data source. This is an implementation of a\n * method required for implementing stream.Readable\n * @access private\n * @param {number} size Ignored\n */\nfunction _read(size) {\n  /* jshint validthis: true */\n  var self = this;\n  /**\n   * Callback to be called when a READ event is received. Pushes the data onto\n   * the read queue and starts reading again if applicable\n   * @param {grpc.Event} event READ event object\n   */\n  function readCallback(err, event) {\n    if (err) {\n      self.terminate();\n      return;\n    }\n    if (self.finished) {\n      self.push(null);\n      return;\n    }\n    var data = event.read;\n    var deserialized;\n    try {\n      deserialized = self.deserialize(data);\n    } catch (e) {\n      common.log(constants.logVerbosity.ERROR, e);\n      e.code = constants.status.INTERNAL;\n      self.emit('error', e);\n      return;\n    }\n    if (self.push(deserialized) && data !== null) {\n      var read_batch = {};\n      read_batch[grpc.opType.RECV_MESSAGE] = true;\n      self.call.startBatch(read_batch, readCallback);\n    } else {\n      self.reading = false;\n    }\n  }\n  if (self.finished) {\n    self.push(null);\n  } else {\n    if (!self.reading) {\n      self.reading = true;\n      var batch = {};\n      batch[grpc.opType.RECV_MESSAGE] = true;\n      self.call.startBatch(batch, readCallback);\n    }\n  }\n}\n\nServerReadableStream.prototype._read = _read;\n\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerDuplexStream~cancelled\n */\n\nutil.inherits(ServerDuplexStream, Duplex);\n\n/**\n * A stream that the server can read from or write to. Used for calls with\n * duplex streaming.\n * @constructor grpc~ServerDuplexStream\n * @extends external:Duplex\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerDuplexStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerDuplexStream#getPeer\n * @param {grpc.internal~Call} call Call object to proxy\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~serialize} serialize Serialization function for requests\n * @param {grpc~deserialize} deserialize Deserialization function for\n *     responses\n */\nfunction ServerDuplexStream(call, metadata, serialize, deserialize) {\n  Duplex.call(this, {objectMode: true});\n  this.call = call;\n  setUpWritable(this, serialize);\n  setUpReadable(this, deserialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerReadableStream#cancelled\n   */\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerReadableStream#metadata\n   */\n  this.metadata = metadata;\n}\n\nServerDuplexStream.prototype._read = _read;\nServerDuplexStream.prototype._write = _write;\n\n/**\n * Send the initial metadata for a writable stream.\n * @alias grpc~ServerUnaryCall#sendMetadata\n * @param {grpc.Metadata} responseMetadata Metadata to send\n */\nfunction sendMetadata(responseMetadata) {\n  /* jshint validthis: true */\n  var self = this;\n  if (!this.call.metadataSent) {\n    this.call.metadataSent = true;\n    var batch = {};\n    batch[grpc.opType.SEND_INITIAL_METADATA] =\n        responseMetadata._getCoreRepresentation();\n    this.call.startBatch(batch, function(err) {\n      if (err) {\n        self.emit('error', err);\n        return;\n      }\n    });\n  }\n}\n\nServerUnaryCall.prototype.sendMetadata = sendMetadata;\nServerWritableStream.prototype.sendMetadata = sendMetadata;\nServerReadableStream.prototype.sendMetadata = sendMetadata;\nServerDuplexStream.prototype.sendMetadata = sendMetadata;\n\n/**\n * Get the endpoint this call/stream is connected to.\n * @alias grpc~ServerUnaryCall#getPeer\n * @return {string} The URI of the endpoint\n */\nfunction getPeer() {\n  /* jshint validthis: true */\n  return this.call.getPeer();\n}\n\nServerUnaryCall.prototype.getPeer = getPeer;\nServerReadableStream.prototype.getPeer = getPeer;\nServerWritableStream.prototype.getPeer = getPeer;\nServerDuplexStream.prototype.getPeer = getPeer;\n\n/**\n * Wait for the client to close, then emit a cancelled event if the client\n * cancelled.\n * @private\n */\nfunction waitForCancel() {\n  /* jshint validthis: true */\n  var self = this;\n  var cancel_batch = {};\n  cancel_batch[grpc.opType.RECV_CLOSE_ON_SERVER] = true;\n  self.call.startBatch(cancel_batch, function(err, result) {\n    if (err) {\n      self.emit('error', err);\n    }\n    if (result.cancelled) {\n      self.cancelled = true;\n      self.emit('cancelled');\n    }\n  });\n}\n\nServerUnaryCall.prototype.waitForCancel = waitForCancel;\nServerReadableStream.prototype.waitForCancel = waitForCancel;\nServerWritableStream.prototype.waitForCancel = waitForCancel;\nServerDuplexStream.prototype.waitForCancel = waitForCancel;\n\n/**\n * Callback function passed to server handlers that handle methods with unary\n * responses.\n * @callback grpc.Server~sendUnaryData\n * @param {grpc~ServiceError} error An error, if the call failed\n * @param {*} value The response value. Must be a valid argument to the\n *     `responseSerialize` method of the method that is being handled\n * @param {grpc.Metadata=} trailer Trailing metadata to send, if applicable\n * @param {grpc.writeFlags=} flags Flags to modify writing the response\n */\n\n/**\n * User-provided method to handle unary requests on a server\n * @callback grpc.Server~handleUnaryCall\n * @param {grpc~ServerUnaryCall} call The call object\n * @param {grpc.Server~sendUnaryData} callback The callback to call to respond\n *     to the request\n */\n\n/**\n * Fully handle a unary call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleUnaryCall} handler.func The handler function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\nfunction handleUnary(call, handler, metadata) {\n  var emitter = new ServerUnaryCall(call, metadata);\n  emitter.on('error', function(error) {\n    handleError(call, error);\n  });\n  emitter.waitForCancel();\n  var batch = {};\n  batch[grpc.opType.RECV_MESSAGE] = true;\n  call.startBatch(batch, function(err, result) {\n    if (err) {\n      handleError(call, err);\n      return;\n    }\n    try {\n      emitter.request = handler.deserialize(result.read);\n    } catch (e) {\n      common.log(constants.logVerbosity.ERROR, e);\n      e.code = constants.status.INTERNAL;\n      handleError(call, e);\n      return;\n    }\n    if (emitter.cancelled) {\n      return;\n    }\n    handler.func(emitter, function sendUnaryData(err, value, trailer, flags) {\n      if (err) {\n        if (trailer) {\n          err.metadata = trailer;\n        }\n        handleError(call, err);\n      } else {\n        sendUnaryResponse(call, value, handler.serialize, trailer, flags);\n      }\n    });\n  });\n}\n\n/**\n * User provided method to handle server streaming methods on the server.\n * @callback grpc.Server~handleServerStreamingCall\n * @param {grpc~ServerWritableStream} call The call object\n */\n\n/**\n * Fully handle a server streaming call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleServerStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\nfunction handleServerStreaming(call, handler, metadata) {\n  var stream = new ServerWritableStream(call, metadata, handler.serialize);\n  stream.waitForCancel();\n  var batch = {};\n  batch[grpc.opType.RECV_MESSAGE] = true;\n  call.startBatch(batch, function(err, result) {\n    if (err) {\n      stream.emit('error', err);\n      return;\n    }\n    try {\n      stream.request = handler.deserialize(result.read);\n    } catch (e) {\n      common.log(constants.logVerbosity.ERROR, e);\n      e.code = constants.status.INTERNAL;\n      stream.emit('error', e);\n      return;\n    }\n    handler.func(stream);\n  });\n}\n\n/**\n * User provided method to handle client streaming methods on the server.\n * @callback grpc.Server~handleClientStreamingCall\n * @param {grpc~ServerReadableStream} call The call object\n * @param {grpc.Server~sendUnaryData} callback The callback to call to respond\n *     to the request\n */\n\n/**\n * Fully handle a client streaming call\n * @access private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleClientStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\nfunction handleClientStreaming(call, handler, metadata) {\n  var stream = new ServerReadableStream(call, metadata, handler.deserialize);\n  stream.on('error', function(error) {\n    handleError(call, error);\n  });\n  stream.waitForCancel();\n  handler.func(stream, function(err, value, trailer, flags) {\n    stream.terminate();\n    if (err) {\n      if (trailer) {\n        err.metadata = trailer;\n      }\n      handleError(call, err);\n    } else {\n      sendUnaryResponse(call, value, handler.serialize, trailer, flags);\n    }\n  });\n}\n\n/**\n * User provided method to handle bidirectional streaming calls on the server.\n * @callback grpc.Server~handleBidiStreamingCall\n * @param {grpc~ServerDuplexStream} call The call object\n */\n\n/**\n * Fully handle a bidirectional streaming call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleBidiStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {Metadata} metadata Metadata from the client\n */\nfunction handleBidiStreaming(call, handler, metadata) {\n  var stream = new ServerDuplexStream(call, metadata, handler.serialize,\n                                      handler.deserialize);\n  stream.waitForCancel();\n  handler.func(stream);\n}\n\nvar streamHandlers = {\n  unary: handleUnary,\n  server_stream: handleServerStreaming,\n  client_stream: handleClientStreaming,\n  bidi: handleBidiStreaming\n};\n\n/**\n * Constructs a server object that stores request handlers and delegates\n * incoming requests to those handlers\n * @memberof grpc\n * @constructor\n * @param {Object=} options Options that should be passed to the internal server\n *     implementation. The available options are listed in\n *     [this document]{@link https://grpc.github.io/grpc/core/group__grpc__arg__keys.html}.\n * @example\n * var server = new grpc.Server();\n * server.addProtoService(protobuf_service_descriptor, service_implementation);\n * server.bind('address:port', server_credential);\n * server.start();\n */\nfunction Server(options) {\n  this.handlers = {};\n  var server = new grpc.Server(options);\n  this._server = server;\n  this.started = false;\n}\n\n/**\n * Start the server and begin handling requests\n */\nServer.prototype.start = function() {\n  if (this.started) {\n    throw new Error('Server is already running');\n  }\n  var self = this;\n  this.started = true;\n  this._server.start();\n  /**\n   * Handles the SERVER_RPC_NEW event. If there is a handler associated with\n   * the requested method, use that handler to respond to the request. Then\n   * wait for the next request\n   * @param {grpc.internal~Event} event The event to handle with tag\n   *     SERVER_RPC_NEW\n   */\n  function handleNewCall(err, event) {\n    if (err) {\n      return;\n    }\n    var details = event.new_call;\n    var call = details.call;\n    var method = details.method;\n    var metadata = Metadata._fromCoreRepresentation(details.metadata);\n    if (method === null) {\n      return;\n    }\n    self._server.requestCall(handleNewCall);\n    var handler;\n    if (self.handlers.hasOwnProperty(method)) {\n      handler = self.handlers[method];\n    } else {\n      var batch = {};\n      batch[grpc.opType.SEND_INITIAL_METADATA] =\n          (new Metadata())._getCoreRepresentation();\n      batch[grpc.opType.SEND_STATUS_FROM_SERVER] = {\n        code: constants.status.UNIMPLEMENTED,\n        details: 'RPC method not implemented ' + method,\n        metadata: (new Metadata())._getCoreRepresentation()\n      };\n      batch[grpc.opType.RECV_CLOSE_ON_SERVER] = true;\n      call.startBatch(batch, function() {});\n      return;\n    }\n    streamHandlers[handler.type](call, handler, metadata);\n  }\n  this._server.requestCall(handleNewCall);\n};\n\n/**\n * Unified type for application handlers for all types of calls\n * @typedef {(grpc.Server~handleUnaryCall\n *            |grpc.Server~handleClientStreamingCall\n *            |grpc.Server~handleServerStreamingCall\n *            |grpc.Server~handleBidiStreamingCall)} grpc.Server~handleCall\n */\n\n/**\n * Registers a handler to handle the named method. Fails if there already is\n * a handler for the given method. Returns true on success\n * @param {string} name The name of the method that the provided function should\n *     handle/respond to.\n * @param {grpc.Server~handleCall} handler Function that takes a stream of\n *     request values and returns a stream of response values\n * @param {grpc~serialize} serialize Serialization function for responses\n * @param {grpc~deserialize} deserialize Deserialization function for requests\n * @param {('unary'|'client_stream'|'server_stream'|'bidi')} type The streaming type of method that this handles\n * @return {boolean} True if the handler was set. False if a handler was already\n *     set for that name.\n */\nServer.prototype.register = function(name, handler, serialize, deserialize,\n                                     type) {\n  if (this.handlers.hasOwnProperty(name)) {\n    return false;\n  }\n  this.handlers[name] = {\n    func: handler,\n    serialize: serialize,\n    deserialize: deserialize,\n    type: type\n  };\n  return true;\n};\n\n/**\n * Gracefully shuts down the server. The server will stop receiving new calls,\n * and any pending calls will complete. The callback will be called when all\n * pending calls have completed and the server is fully shut down. This method\n * is idempotent with itself and forceShutdown.\n * @param {function()} callback The shutdown complete callback\n */\nServer.prototype.tryShutdown = function(callback) {\n  this._server.tryShutdown(callback);\n};\n\n/**\n * Forcibly shuts down the server. The server will stop receiving new calls\n * and cancel all pending calls. When it returns, the server has shut down.\n * This method is idempotent with itself and tryShutdown, and it will trigger\n * any outstanding tryShutdown callbacks.\n */\nServer.prototype.forceShutdown = function() {\n  this._server.forceShutdown();\n};\n\nvar unimplementedStatusResponse = {\n  code: constants.status.UNIMPLEMENTED,\n  details: 'The server does not implement this method'\n};\n\nvar defaultHandler = {\n  unary: function(call, callback) {\n    callback(unimplementedStatusResponse);\n  },\n  client_stream: function(call, callback) {\n    callback(unimplementedStatusResponse);\n  },\n  server_stream: function(call) {\n    call.emit('error', unimplementedStatusResponse);\n  },\n  bidi: function(call) {\n    call.emit('error', unimplementedStatusResponse);\n  }\n};\n\nfunction isObject(thing) {\n  return (typeof thing === 'object' || typeof thing === 'function') && thing !== null;\n}\n\n/**\n * Add a service to the server, with a corresponding implementation.\n * @param {grpc~ServiceDefinition} service The service descriptor\n * @param {Object<String, grpc.Server~handleCall>} implementation Map of method\n *     names to method implementation for the provided service.\n */\nServer.prototype.addService = function(service, implementation) {\n  if (!isObject(service) || !isObject(implementation)) {\n    throw new Error('addService requires two objects as arguments');\n  }\n  if (Object.keys(service).length === 0) {\n    throw new Error('Cannot add an empty service to a server');\n  }\n  if (this.started) {\n    throw new Error('Can\\'t add a service to a started server.');\n  }\n  var self = this;\n  Object.keys(service).forEach(name => {\n    const attrs = service[name];\n    var method_type;\n    if (attrs.requestStream) {\n      if (attrs.responseStream) {\n        method_type = 'bidi';\n      } else {\n        method_type = 'client_stream';\n      }\n    } else {\n      if (attrs.responseStream) {\n        method_type = 'server_stream';\n      } else {\n        method_type = 'unary';\n      }\n    }\n    var impl;\n    if (implementation[name] === undefined) {\n      /* Handle the case where the method is passed with the name exactly as\n         written in the proto file, instead of using JavaScript function\n         naming style */\n      if (implementation[attrs.originalName] === undefined) {\n        common.log(constants.logVerbosity.ERROR, 'Method handler ' + name +\n            ' for ' + attrs.path + ' expected but not provided');\n        impl = defaultHandler[method_type];\n      } else {\n        impl = implementation[attrs.originalName].bind(implementation);\n      }\n    } else {\n      impl = implementation[name].bind(implementation);\n    }\n    var serialize = attrs.responseSerialize;\n    var deserialize = attrs.requestDeserialize;\n    var register_success = self.register(attrs.path, impl, serialize,\n                                         deserialize, method_type);\n    if (!register_success) {\n      throw new Error('Method handler for ' + attrs.path +\n          ' already provided.');\n    }\n  });\n};\n\n/**\n * Add a proto service to the server, with a corresponding implementation\n * @deprecated Use {@link grpc.Server#addService} instead\n * @param {Protobuf.Reflect.Service} service The proto service descriptor\n * @param {Object<String, grpc.Server~handleCall>} implementation Map of method\n *     names to method implementation for the provided service.\n */\nServer.prototype.addProtoService = util.deprecate(function(service,\n                                                           implementation) {\n  var options;\n  var protobuf_js_5_common = require('./protobuf_js_5_common');\n  var protobuf_js_6_common = require('./protobuf_js_6_common');\n  if (protobuf_js_5_common.isProbablyProtobufJs5(service)) {\n    options = Object.assign({}, common.defaultGrpcOptions, service.grpc_options);\n    this.addService(\n        protobuf_js_5_common.getProtobufServiceAttrs(service, options),\n        implementation);\n  } else if (protobuf_js_6_common.isProbablyProtobufJs6(service)) {\n    options = Object.assign({}, common.defaultGrpcOptions, service.grpc_options);\n    this.addService(\n        protobuf_js_6_common.getProtobufServiceAttrs(service, options),\n        implementation);\n  } else {\n    // We assume that this is a service attributes object\n    this.addService(service, implementation);\n  }\n}, 'Server#addProtoService: Use Server#addService instead');\n\n/**\n * Binds the server to the given port, with SSL disabled if creds is an\n * insecure credentials object\n * @param {string} port The port that the server should bind on, in the format\n *     \"address:port\"\n * @param {grpc.ServerCredentials} creds Server credential object to be used for\n *     SSL. Pass an insecure credentials object for an insecure port.\n * @return {number} The bound port number. Negative if binding the port failed.\n */\nServer.prototype.bind = function(port, creds) {\n  if (this.started) {\n    throw new Error('Can\\'t bind an already running server to an address');\n  }\n  return this._server.addHttp2Port(port, creds);\n};\n\n/**\n * Called with the result of attempting to bind a port\n * @callback grpc.Server~bindCallback\n * @param {Error=} error If non-null, indicates that binding the port failed.\n * @param {number} port The bound port number. If binding the port fails, this\n *     will be negative to match the output of bind.\n */\n\n/**\n * Binds the server to the given port, with SSL disabled if creds is an\n * insecure credentials object. Provides the result asynchronously.\n * @param {string} port The port that the server should bind on, in the format\n *     \"address:port\"\n * @param {grpc.ServerCredentials} creds Server credential object to be used for\n *     SSL. Pass an insecure credentials object for an insecure port.\n */\nServer.prototype.bindAsync = function(port, creds, callback) {\n  /* This can throw. We do not try to catch that error because it indicates an\n   * incorrect use of the function, which should not be surfaced asynchronously\n   */\n  const result = this.bind(port, creds)\n  if (result < 0) {\n    setImmediate(callback, new Error('Failed to bind port'), result);\n  } else {\n    setImmediate(callback, null, result);\n  }\n}\n\nexports.Server = Server;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAAlB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAApB;;AAEA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAAtB;;AAEA,IAAIG,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAII,MAAM,GAAGJ,OAAO,CAAC,QAAD,CAApB;;AAEA,IAAIK,QAAQ,GAAGD,MAAM,CAACC,QAAtB;AACA,IAAIC,QAAQ,GAAGF,MAAM,CAACE,QAAtB;AACA,IAAIC,MAAM,GAAGH,MAAM,CAACG,MAApB;;AACA,IAAIC,IAAI,GAAGR,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIS,YAAY,GAAGT,OAAO,CAAC,QAAD,CAAP,CAAkBS,YAArC;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,KAA3B,EAAkC;EAChC,IAAIC,cAAc,GAAG,IAAIX,QAAJ,EAArB;EACA,IAAIY,MAAM,GAAG;IACXC,IAAI,EAAEZ,SAAS,CAACW,MAAV,CAAiBE,OADZ;IAEXC,OAAO,EAAE;EAFE,CAAb;;EAIA,IAAIL,KAAK,CAACM,cAAN,CAAqB,SAArB,CAAJ,EAAqC;IACnCJ,MAAM,CAACG,OAAP,GAAiBL,KAAK,CAACO,OAAvB;EACD;;EACD,IAAIP,KAAK,CAACM,cAAN,CAAqB,MAArB,KAAgCE,MAAM,CAACC,SAAP,CAAiBT,KAAK,CAACG,IAAvB,CAApC,EAAkE;IAChED,MAAM,CAACC,IAAP,GAAcH,KAAK,CAACG,IAApB;;IACA,IAAIH,KAAK,CAACM,cAAN,CAAqB,SAArB,CAAJ,EAAqC;MACnCJ,MAAM,CAACG,OAAP,GAAiBL,KAAK,CAACK,OAAvB;IACD;EACF;;EACD,IAAIL,KAAK,CAACM,cAAN,CAAqB,UAArB,CAAJ,EAAsC;IACpCL,cAAc,GAAGD,KAAK,CAACU,QAAvB;EACD;;EACDR,MAAM,CAACQ,QAAP,GAAkBT,cAAc,CAACU,sBAAf,EAAlB;EACA,IAAIC,WAAW,GAAG,EAAlB;;EACA,IAAI,CAACb,IAAI,CAACc,YAAV,EAAwB;IACtBD,WAAW,CAACzB,IAAI,CAAC2B,MAAL,CAAYC,qBAAb,CAAX,GACK,IAAIzB,QAAJ,EAAD,CAAiBqB,sBAAjB,EADJ;EAED;;EACDC,WAAW,CAACzB,IAAI,CAAC2B,MAAL,CAAYE,uBAAb,CAAX,GAAmDd,MAAnD;EACAH,IAAI,CAACkB,UAAL,CAAgBL,WAAhB,EAA6B,YAAU,CAAE,CAAzC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,iBAAT,CAA2BnB,IAA3B,EAAiCoB,KAAjC,EAAwCC,SAAxC,EAAmDV,QAAnD,EAA6DW,KAA7D,EAAoE;EAClE,IAAIC,SAAS,GAAG,EAAhB;EACA,IAAIrB,cAAc,GAAG,IAAIX,QAAJ,EAArB;EACA,IAAIY,MAAM,GAAG;IACXC,IAAI,EAAEZ,SAAS,CAACW,MAAV,CAAiBqB,EADZ;IAEXlB,OAAO,EAAE;EAFE,CAAb;;EAIA,IAAIK,QAAJ,EAAc;IACZT,cAAc,GAAGS,QAAjB;EACD;;EACD,IAAIH,OAAJ;;EACA,IAAI;IACFA,OAAO,GAAGa,SAAS,CAACD,KAAD,CAAnB;EACD,CAFD,CAEE,OAAOK,CAAP,EAAU;IACVnC,MAAM,CAACoC,GAAP,CAAWlC,SAAS,CAACmC,YAAV,CAAuBC,KAAlC,EAAyCH,CAAzC;IACAA,CAAC,CAACrB,IAAF,GAASZ,SAAS,CAACW,MAAV,CAAiB0B,QAA1B;IACA9B,WAAW,CAACC,IAAD,EAAOyB,CAAP,CAAX;IACA;EACD;;EACDtB,MAAM,CAACQ,QAAP,GAAkBT,cAAc,CAACU,sBAAf,EAAlB;;EACA,IAAI,CAACZ,IAAI,CAACc,YAAV,EAAwB;IACtBS,SAAS,CAACnC,IAAI,CAAC2B,MAAL,CAAYC,qBAAb,CAAT,GACK,IAAIzB,QAAJ,EAAD,CAAiBqB,sBAAjB,EADJ;IAEAZ,IAAI,CAACc,YAAL,GAAoB,IAApB;EACD;;EACDN,OAAO,CAACsB,cAAR,GAAyBR,KAAzB;EACAC,SAAS,CAACnC,IAAI,CAAC2B,MAAL,CAAYgB,YAAb,CAAT,GAAsCvB,OAAtC;EACAe,SAAS,CAACnC,IAAI,CAAC2B,MAAL,CAAYE,uBAAb,CAAT,GAAiDd,MAAjD;EACAH,IAAI,CAACkB,UAAL,CAAgBK,SAAhB,EAA2B,YAAW,CAAE,CAAxC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASS,aAAT,CAAuBvC,MAAvB,EAA+B4B,SAA/B,EAA0C;EACxC5B,MAAM,CAACwC,QAAP,GAAkB,KAAlB;EACAxC,MAAM,CAACU,MAAP,GAAgB;IACdC,IAAI,EAAGZ,SAAS,CAACW,MAAV,CAAiBqB,EADV;IAEdlB,OAAO,EAAG,IAFI;IAGdK,QAAQ,EAAG,IAAIpB,QAAJ;EAHG,CAAhB;EAKAE,MAAM,CAAC4B,SAAP,GAAmB/B,MAAM,CAAC4C,cAAP,CAAsBb,SAAtB,CAAnB;;EACA,SAASc,UAAT,GAAsB;IACpB,IAAIC,KAAK,GAAG,EAAZ;;IACA,IAAI,CAAC3C,MAAM,CAACO,IAAP,CAAYc,YAAjB,EAA+B;MAC7BrB,MAAM,CAACO,IAAP,CAAYc,YAAZ,GAA2B,IAA3B;MACAsB,KAAK,CAAChD,IAAI,CAAC2B,MAAL,CAAYC,qBAAb,CAAL,GACK,IAAIzB,QAAJ,EAAD,CAAiBqB,sBAAjB,EADJ;IAED;;IAED,IAAInB,MAAM,CAACU,MAAP,CAAcQ,QAAlB,EAA4B;MAC1BlB,MAAM,CAACU,MAAP,CAAcQ,QAAd,GAAyBlB,MAAM,CAACU,MAAP,CAAcQ,QAAd,CAAuBC,sBAAvB,EAAzB;IACD;;IACDwB,KAAK,CAAChD,IAAI,CAAC2B,MAAL,CAAYE,uBAAb,CAAL,GAA6CxB,MAAM,CAACU,MAApD;IACAV,MAAM,CAACO,IAAP,CAAYkB,UAAZ,CAAuBkB,KAAvB,EAA8B,YAAU,CAAE,CAA1C;EACD;;EACD3C,MAAM,CAAC4C,EAAP,CAAU,QAAV,EAAoBF,UAApB;EACA;AACF;AACA;AACA;AACA;AACA;;EACE,SAASG,SAAT,CAAmBC,GAAnB,EAAwB;IACtB,IAAInC,IAAI,GAAGZ,SAAS,CAACW,MAAV,CAAiBE,OAA5B;IACA,IAAIC,OAAO,GAAG,eAAd;IACA,IAAIK,QAAQ,GAAG,IAAIpB,QAAJ,EAAf;;IACA,IAAIgD,GAAG,CAAChC,cAAJ,CAAmB,SAAnB,CAAJ,EAAmC;MACjCD,OAAO,GAAGiC,GAAG,CAAC/B,OAAd;IACD;;IACD,IAAI+B,GAAG,CAAChC,cAAJ,CAAmB,MAAnB,CAAJ,EAAgC;MAC9BH,IAAI,GAAGmC,GAAG,CAACnC,IAAX;;MACA,IAAImC,GAAG,CAAChC,cAAJ,CAAmB,SAAnB,CAAJ,EAAmC;QACjCD,OAAO,GAAGiC,GAAG,CAACjC,OAAd;MACD;IACF;;IACD,IAAIiC,GAAG,CAAChC,cAAJ,CAAmB,UAAnB,CAAJ,EAAoC;MAClCI,QAAQ,GAAG4B,GAAG,CAAC5B,QAAf;IACD;;IACDlB,MAAM,CAACU,MAAP,GAAgB;MAACC,IAAI,EAAEA,IAAP;MAAaE,OAAO,EAAEA,OAAtB;MAA+BK,QAAQ,EAAEA;IAAzC,CAAhB;EACD;EACD;AACF;AACA;AACA;AACA;AACA;;;EACE,SAAS6B,aAAT,CAAuBD,GAAvB,EAA4B;IAC1B;IACAD,SAAS,CAACC,GAAD,CAAT;IACA9C,MAAM,CAACgD,GAAP;EACD;;EACDhD,MAAM,CAAC4C,EAAP,CAAU,OAAV,EAAmBG,aAAnB;EACA;AACF;AACA;AACA;AACA;;EACE/C,MAAM,CAACgD,GAAP,GAAa,UAAS9B,QAAT,EAAmB;IAC9B,IAAIA,QAAJ,EAAc;MACZlB,MAAM,CAACU,MAAP,CAAcQ,QAAd,GAAyBA,QAAzB;IACD;;IACDhB,QAAQ,CAAC+C,SAAT,CAAmBD,GAAnB,CAAuBzC,IAAvB,CAA4B,IAA5B;EACD,CALD;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS2C,aAAT,CAAuBlD,MAAvB,EAA+BmD,WAA/B,EAA4C;EAC1CnD,MAAM,CAACmD,WAAP,GAAqBtD,MAAM,CAAC4C,cAAP,CAAsBU,WAAtB,CAArB;EACAnD,MAAM,CAACwC,QAAP,GAAkB,KAAlB;EACAxC,MAAM,CAACoD,OAAP,GAAiB,KAAjB;;EAEApD,MAAM,CAACqD,SAAP,GAAmB,YAAW;IAC5BrD,MAAM,CAACwC,QAAP,GAAkB,IAAlB;IACAxC,MAAM,CAAC4C,EAAP,CAAU,MAAV,EAAkB,YAAW,CAAE,CAA/B;EACD,CAHD;;EAKA5C,MAAM,CAAC4C,EAAP,CAAU,WAAV,EAAuB,YAAW;IAChC5C,MAAM,CAACqD,SAAP;EACD,CAFD;AAGD;AAED;AACA;AACA;AACA;AACA;;;AAEAjD,IAAI,CAACkD,QAAL,CAAcC,eAAd,EAA+BlD,YAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASkD,eAAT,CAAyBhD,IAAzB,EAA+BW,QAA/B,EAAyC;EACvCb,YAAY,CAACE,IAAb,CAAkB,IAAlB;EACA,KAAKA,IAAL,GAAYA,IAAZ;EACA;AACF;AACA;AACA;;EACE,KAAKiD,SAAL,GAAiB,KAAjB;EACA;AACF;AACA;AACA;;EACE,KAAKtC,QAAL,GAAgBA,QAAhB;EACA;AACF;AACA;AACA;;EACE,KAAKuC,OAAL,GAAeC,SAAf;AACD;AAED;AACA;AACA;AACA;AACA;;;AAEAtD,IAAI,CAACkD,QAAL,CAAcK,oBAAd,EAAoCzD,QAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASyD,oBAAT,CAA8BpD,IAA9B,EAAoCW,QAApC,EAA8CU,SAA9C,EAAyD;EACvD1B,QAAQ,CAACK,IAAT,CAAc,IAAd,EAAoB;IAACqD,UAAU,EAAE;EAAb,CAApB;EACA,KAAKrD,IAAL,GAAYA,IAAZ;EAEA,KAAKiC,QAAL,GAAgB,KAAhB;EACAD,aAAa,CAAC,IAAD,EAAOX,SAAP,CAAb;EACA;AACF;AACA;AACA;;EACE,KAAK4B,SAAL,GAAiB,KAAjB;EACA;AACF;AACA;AACA;;EACE,KAAKtC,QAAL,GAAgBA,QAAhB;EACA;AACF;AACA;AACA;;EACE,KAAKuC,OAAL,GAAeC,SAAf;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,MAAT,CAAgBC,KAAhB,EAAuBC,QAAvB,EAAiCC,QAAjC,EAA2C;EACzC;EACA,IAAIrB,KAAK,GAAG,EAAZ;EACA,IAAIsB,IAAI,GAAG,IAAX;EACA,IAAIlD,OAAJ;;EACA,IAAI;IACFA,OAAO,GAAG,KAAKa,SAAL,CAAekC,KAAf,CAAV;EACD,CAFD,CAEE,OAAO9B,CAAP,EAAU;IACVnC,MAAM,CAACoC,GAAP,CAAWlC,SAAS,CAACmC,YAAV,CAAuBC,KAAlC,EAAyCH,CAAzC;IACAA,CAAC,CAACrB,IAAF,GAASZ,SAAS,CAACW,MAAV,CAAiB0B,QAA1B;IACA4B,QAAQ,CAAChC,CAAD,CAAR;IACA;EACD;;EACD,IAAI,CAAC,KAAKzB,IAAL,CAAUc,YAAf,EAA6B;IAC3BsB,KAAK,CAAChD,IAAI,CAAC2B,MAAL,CAAYC,qBAAb,CAAL,GACK,IAAIzB,QAAJ,EAAD,CAAiBqB,sBAAjB,EADJ;IAEA,KAAKZ,IAAL,CAAUc,YAAV,GAAyB,IAAzB;EACD;;EACD,IAAIL,MAAM,CAACkD,QAAP,CAAgBH,QAAhB,CAAJ,EAA+B;IAC7B;AACJ;IACIhD,OAAO,CAACsB,cAAR,GAAyB0B,QAAzB;EACD;;EACDpB,KAAK,CAAChD,IAAI,CAAC2B,MAAL,CAAYgB,YAAb,CAAL,GAAkCvB,OAAlC;EACA,KAAKR,IAAL,CAAUkB,UAAV,CAAqBkB,KAArB,EAA4B,UAASG,GAAT,EAAcnB,KAAd,EAAqB;IAC/C,IAAImB,GAAJ,EAAS;MACPmB,IAAI,CAACE,IAAL,CAAU,OAAV,EAAmBrB,GAAnB;MACA;IACD;;IACDkB,QAAQ;EACT,CAND;AAOD;;AAEDL,oBAAoB,CAACV,SAArB,CAA+BY,MAA/B,GAAwCA,MAAxC;AAEA;AACA;AACA;AACA;AACA;;AAEAzD,IAAI,CAACkD,QAAL,CAAcc,oBAAd,EAAoCnE,QAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASmE,oBAAT,CAA8B7D,IAA9B,EAAoCW,QAApC,EAA8CiC,WAA9C,EAA2D;EACzDlD,QAAQ,CAACM,IAAT,CAAc,IAAd,EAAoB;IAACqD,UAAU,EAAE;EAAb,CAApB;EACA,KAAKrD,IAAL,GAAYA,IAAZ;EACA2C,aAAa,CAAC,IAAD,EAAOC,WAAP,CAAb;EACA;AACF;AACA;AACA;;EACE,KAAKK,SAAL,GAAiB,KAAjB;EACA;AACF;AACA;AACA;;EACE,KAAKtC,QAAL,GAAgBA,QAAhB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmD,KAAT,CAAeC,IAAf,EAAqB;EACnB;EACA,IAAIL,IAAI,GAAG,IAAX;EACA;AACF;AACA;AACA;AACA;;EACE,SAASM,YAAT,CAAsBzB,GAAtB,EAA2B0B,KAA3B,EAAkC;IAChC,IAAI1B,GAAJ,EAAS;MACPmB,IAAI,CAACZ,SAAL;MACA;IACD;;IACD,IAAIY,IAAI,CAACzB,QAAT,EAAmB;MACjByB,IAAI,CAACQ,IAAL,CAAU,IAAV;MACA;IACD;;IACD,IAAIC,IAAI,GAAGF,KAAK,CAACG,IAAjB;IACA,IAAIC,YAAJ;;IACA,IAAI;MACFA,YAAY,GAAGX,IAAI,CAACd,WAAL,CAAiBuB,IAAjB,CAAf;IACD,CAFD,CAEE,OAAO1C,CAAP,EAAU;MACVnC,MAAM,CAACoC,GAAP,CAAWlC,SAAS,CAACmC,YAAV,CAAuBC,KAAlC,EAAyCH,CAAzC;MACAA,CAAC,CAACrB,IAAF,GAASZ,SAAS,CAACW,MAAV,CAAiB0B,QAA1B;MACA6B,IAAI,CAACE,IAAL,CAAU,OAAV,EAAmBnC,CAAnB;MACA;IACD;;IACD,IAAIiC,IAAI,CAACQ,IAAL,CAAUG,YAAV,KAA2BF,IAAI,KAAK,IAAxC,EAA8C;MAC5C,IAAIG,UAAU,GAAG,EAAjB;MACAA,UAAU,CAAClF,IAAI,CAAC2B,MAAL,CAAYwD,YAAb,CAAV,GAAuC,IAAvC;MACAb,IAAI,CAAC1D,IAAL,CAAUkB,UAAV,CAAqBoD,UAArB,EAAiCN,YAAjC;IACD,CAJD,MAIO;MACLN,IAAI,CAACb,OAAL,GAAe,KAAf;IACD;EACF;;EACD,IAAIa,IAAI,CAACzB,QAAT,EAAmB;IACjByB,IAAI,CAACQ,IAAL,CAAU,IAAV;EACD,CAFD,MAEO;IACL,IAAI,CAACR,IAAI,CAACb,OAAV,EAAmB;MACjBa,IAAI,CAACb,OAAL,GAAe,IAAf;MACA,IAAIT,KAAK,GAAG,EAAZ;MACAA,KAAK,CAAChD,IAAI,CAAC2B,MAAL,CAAYwD,YAAb,CAAL,GAAkC,IAAlC;MACAb,IAAI,CAAC1D,IAAL,CAAUkB,UAAV,CAAqBkB,KAArB,EAA4B4B,YAA5B;IACD;EACF;AACF;;AAEDH,oBAAoB,CAACnB,SAArB,CAA+BoB,KAA/B,GAAuCA,KAAvC;AAEA;AACA;AACA;AACA;AACA;;AAEAjE,IAAI,CAACkD,QAAL,CAAcyB,kBAAd,EAAkC5E,MAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS4E,kBAAT,CAA4BxE,IAA5B,EAAkCW,QAAlC,EAA4CU,SAA5C,EAAuDuB,WAAvD,EAAoE;EAClEhD,MAAM,CAACI,IAAP,CAAY,IAAZ,EAAkB;IAACqD,UAAU,EAAE;EAAb,CAAlB;EACA,KAAKrD,IAAL,GAAYA,IAAZ;EACAgC,aAAa,CAAC,IAAD,EAAOX,SAAP,CAAb;EACAsB,aAAa,CAAC,IAAD,EAAOC,WAAP,CAAb;EACA;AACF;AACA;AACA;;EACE,KAAKK,SAAL,GAAiB,KAAjB;EACA;AACF;AACA;AACA;;EACE,KAAKtC,QAAL,GAAgBA,QAAhB;AACD;;AAED6D,kBAAkB,CAAC9B,SAAnB,CAA6BoB,KAA7B,GAAqCA,KAArC;AACAU,kBAAkB,CAAC9B,SAAnB,CAA6BY,MAA7B,GAAsCA,MAAtC;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASmB,YAAT,CAAsBC,gBAAtB,EAAwC;EACtC;EACA,IAAIhB,IAAI,GAAG,IAAX;;EACA,IAAI,CAAC,KAAK1D,IAAL,CAAUc,YAAf,EAA6B;IAC3B,KAAKd,IAAL,CAAUc,YAAV,GAAyB,IAAzB;IACA,IAAIsB,KAAK,GAAG,EAAZ;IACAA,KAAK,CAAChD,IAAI,CAAC2B,MAAL,CAAYC,qBAAb,CAAL,GACI0D,gBAAgB,CAAC9D,sBAAjB,EADJ;IAEA,KAAKZ,IAAL,CAAUkB,UAAV,CAAqBkB,KAArB,EAA4B,UAASG,GAAT,EAAc;MACxC,IAAIA,GAAJ,EAAS;QACPmB,IAAI,CAACE,IAAL,CAAU,OAAV,EAAmBrB,GAAnB;QACA;MACD;IACF,CALD;EAMD;AACF;;AAEDS,eAAe,CAACN,SAAhB,CAA0B+B,YAA1B,GAAyCA,YAAzC;AACArB,oBAAoB,CAACV,SAArB,CAA+B+B,YAA/B,GAA8CA,YAA9C;AACAZ,oBAAoB,CAACnB,SAArB,CAA+B+B,YAA/B,GAA8CA,YAA9C;AACAD,kBAAkB,CAAC9B,SAAnB,CAA6B+B,YAA7B,GAA4CA,YAA5C;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASE,OAAT,GAAmB;EACjB;EACA,OAAO,KAAK3E,IAAL,CAAU2E,OAAV,EAAP;AACD;;AAED3B,eAAe,CAACN,SAAhB,CAA0BiC,OAA1B,GAAoCA,OAApC;AACAd,oBAAoB,CAACnB,SAArB,CAA+BiC,OAA/B,GAAyCA,OAAzC;AACAvB,oBAAoB,CAACV,SAArB,CAA+BiC,OAA/B,GAAyCA,OAAzC;AACAH,kBAAkB,CAAC9B,SAAnB,CAA6BiC,OAA7B,GAAuCA,OAAvC;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,GAAyB;EACvB;EACA,IAAIlB,IAAI,GAAG,IAAX;EACA,IAAImB,YAAY,GAAG,EAAnB;EACAA,YAAY,CAACzF,IAAI,CAAC2B,MAAL,CAAY+D,oBAAb,CAAZ,GAAiD,IAAjD;EACApB,IAAI,CAAC1D,IAAL,CAAUkB,UAAV,CAAqB2D,YAArB,EAAmC,UAAStC,GAAT,EAAcwC,MAAd,EAAsB;IACvD,IAAIxC,GAAJ,EAAS;MACPmB,IAAI,CAACE,IAAL,CAAU,OAAV,EAAmBrB,GAAnB;IACD;;IACD,IAAIwC,MAAM,CAAC9B,SAAX,EAAsB;MACpBS,IAAI,CAACT,SAAL,GAAiB,IAAjB;MACAS,IAAI,CAACE,IAAL,CAAU,WAAV;IACD;EACF,CARD;AASD;;AAEDZ,eAAe,CAACN,SAAhB,CAA0BkC,aAA1B,GAA0CA,aAA1C;AACAf,oBAAoB,CAACnB,SAArB,CAA+BkC,aAA/B,GAA+CA,aAA/C;AACAxB,oBAAoB,CAACV,SAArB,CAA+BkC,aAA/B,GAA+CA,aAA/C;AACAJ,kBAAkB,CAAC9B,SAAnB,CAA6BkC,aAA7B,GAA6CA,aAA7C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASI,WAAT,CAAqBhF,IAArB,EAA2BiF,OAA3B,EAAoCtE,QAApC,EAA8C;EAC5C,IAAIuE,OAAO,GAAG,IAAIlC,eAAJ,CAAoBhD,IAApB,EAA0BW,QAA1B,CAAd;EACAuE,OAAO,CAAC7C,EAAR,CAAW,OAAX,EAAoB,UAASpC,KAAT,EAAgB;IAClCF,WAAW,CAACC,IAAD,EAAOC,KAAP,CAAX;EACD,CAFD;EAGAiF,OAAO,CAACN,aAAR;EACA,IAAIxC,KAAK,GAAG,EAAZ;EACAA,KAAK,CAAChD,IAAI,CAAC2B,MAAL,CAAYwD,YAAb,CAAL,GAAkC,IAAlC;EACAvE,IAAI,CAACkB,UAAL,CAAgBkB,KAAhB,EAAuB,UAASG,GAAT,EAAcwC,MAAd,EAAsB;IAC3C,IAAIxC,GAAJ,EAAS;MACPxC,WAAW,CAACC,IAAD,EAAOuC,GAAP,CAAX;MACA;IACD;;IACD,IAAI;MACF2C,OAAO,CAAChC,OAAR,GAAkB+B,OAAO,CAACrC,WAAR,CAAoBmC,MAAM,CAACX,IAA3B,CAAlB;IACD,CAFD,CAEE,OAAO3C,CAAP,EAAU;MACVnC,MAAM,CAACoC,GAAP,CAAWlC,SAAS,CAACmC,YAAV,CAAuBC,KAAlC,EAAyCH,CAAzC;MACAA,CAAC,CAACrB,IAAF,GAASZ,SAAS,CAACW,MAAV,CAAiB0B,QAA1B;MACA9B,WAAW,CAACC,IAAD,EAAOyB,CAAP,CAAX;MACA;IACD;;IACD,IAAIyD,OAAO,CAACjC,SAAZ,EAAuB;MACrB;IACD;;IACDgC,OAAO,CAACE,IAAR,CAAaD,OAAb,EAAsB,SAASE,aAAT,CAAuB7C,GAAvB,EAA4BnB,KAA5B,EAAmCiE,OAAnC,EAA4C/D,KAA5C,EAAmD;MACvE,IAAIiB,GAAJ,EAAS;QACP,IAAI8C,OAAJ,EAAa;UACX9C,GAAG,CAAC5B,QAAJ,GAAe0E,OAAf;QACD;;QACDtF,WAAW,CAACC,IAAD,EAAOuC,GAAP,CAAX;MACD,CALD,MAKO;QACLpB,iBAAiB,CAACnB,IAAD,EAAOoB,KAAP,EAAc6D,OAAO,CAAC5D,SAAtB,EAAiCgE,OAAjC,EAA0C/D,KAA1C,CAAjB;MACD;IACF,CATD;EAUD,CA1BD;AA2BD;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgE,qBAAT,CAA+BtF,IAA/B,EAAqCiF,OAArC,EAA8CtE,QAA9C,EAAwD;EACtD,IAAIlB,MAAM,GAAG,IAAI2D,oBAAJ,CAAyBpD,IAAzB,EAA+BW,QAA/B,EAAyCsE,OAAO,CAAC5D,SAAjD,CAAb;EACA5B,MAAM,CAACmF,aAAP;EACA,IAAIxC,KAAK,GAAG,EAAZ;EACAA,KAAK,CAAChD,IAAI,CAAC2B,MAAL,CAAYwD,YAAb,CAAL,GAAkC,IAAlC;EACAvE,IAAI,CAACkB,UAAL,CAAgBkB,KAAhB,EAAuB,UAASG,GAAT,EAAcwC,MAAd,EAAsB;IAC3C,IAAIxC,GAAJ,EAAS;MACP9C,MAAM,CAACmE,IAAP,CAAY,OAAZ,EAAqBrB,GAArB;MACA;IACD;;IACD,IAAI;MACF9C,MAAM,CAACyD,OAAP,GAAiB+B,OAAO,CAACrC,WAAR,CAAoBmC,MAAM,CAACX,IAA3B,CAAjB;IACD,CAFD,CAEE,OAAO3C,CAAP,EAAU;MACVnC,MAAM,CAACoC,GAAP,CAAWlC,SAAS,CAACmC,YAAV,CAAuBC,KAAlC,EAAyCH,CAAzC;MACAA,CAAC,CAACrB,IAAF,GAASZ,SAAS,CAACW,MAAV,CAAiB0B,QAA1B;MACApC,MAAM,CAACmE,IAAP,CAAY,OAAZ,EAAqBnC,CAArB;MACA;IACD;;IACDwD,OAAO,CAACE,IAAR,CAAa1F,MAAb;EACD,CAdD;AAeD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8F,qBAAT,CAA+BvF,IAA/B,EAAqCiF,OAArC,EAA8CtE,QAA9C,EAAwD;EACtD,IAAIlB,MAAM,GAAG,IAAIoE,oBAAJ,CAAyB7D,IAAzB,EAA+BW,QAA/B,EAAyCsE,OAAO,CAACrC,WAAjD,CAAb;EACAnD,MAAM,CAAC4C,EAAP,CAAU,OAAV,EAAmB,UAASpC,KAAT,EAAgB;IACjCF,WAAW,CAACC,IAAD,EAAOC,KAAP,CAAX;EACD,CAFD;EAGAR,MAAM,CAACmF,aAAP;EACAK,OAAO,CAACE,IAAR,CAAa1F,MAAb,EAAqB,UAAS8C,GAAT,EAAcnB,KAAd,EAAqBiE,OAArB,EAA8B/D,KAA9B,EAAqC;IACxD7B,MAAM,CAACqD,SAAP;;IACA,IAAIP,GAAJ,EAAS;MACP,IAAI8C,OAAJ,EAAa;QACX9C,GAAG,CAAC5B,QAAJ,GAAe0E,OAAf;MACD;;MACDtF,WAAW,CAACC,IAAD,EAAOuC,GAAP,CAAX;IACD,CALD,MAKO;MACLpB,iBAAiB,CAACnB,IAAD,EAAOoB,KAAP,EAAc6D,OAAO,CAAC5D,SAAtB,EAAiCgE,OAAjC,EAA0C/D,KAA1C,CAAjB;IACD;EACF,CAVD;AAWD;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkE,mBAAT,CAA6BxF,IAA7B,EAAmCiF,OAAnC,EAA4CtE,QAA5C,EAAsD;EACpD,IAAIlB,MAAM,GAAG,IAAI+E,kBAAJ,CAAuBxE,IAAvB,EAA6BW,QAA7B,EAAuCsE,OAAO,CAAC5D,SAA/C,EACuB4D,OAAO,CAACrC,WAD/B,CAAb;EAEAnD,MAAM,CAACmF,aAAP;EACAK,OAAO,CAACE,IAAR,CAAa1F,MAAb;AACD;;AAED,IAAIgG,cAAc,GAAG;EACnBC,KAAK,EAAEV,WADY;EAEnBW,aAAa,EAAEL,qBAFI;EAGnBM,aAAa,EAAEL,qBAHI;EAInBM,IAAI,EAAEL;AAJa,CAArB;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASM,MAAT,CAAgBC,OAAhB,EAAyB;EACvB,KAAKC,QAAL,GAAgB,EAAhB;EACA,IAAIC,MAAM,GAAG,IAAI7G,IAAI,CAAC0G,MAAT,CAAgBC,OAAhB,CAAb;EACA,KAAKG,OAAL,GAAeD,MAAf;EACA,KAAKE,OAAL,GAAe,KAAf;AACD;AAED;AACA;AACA;;;AACAL,MAAM,CAACpD,SAAP,CAAiB0D,KAAjB,GAAyB,YAAW;EAClC,IAAI,KAAKD,OAAT,EAAkB;IAChB,MAAM,IAAIE,KAAJ,CAAU,2BAAV,CAAN;EACD;;EACD,IAAI3C,IAAI,GAAG,IAAX;EACA,KAAKyC,OAAL,GAAe,IAAf;;EACA,KAAKD,OAAL,CAAaE,KAAb;EACA;AACF;AACA;AACA;AACA;AACA;AACA;;;EACE,SAASE,aAAT,CAAuB/D,GAAvB,EAA4B0B,KAA5B,EAAmC;IACjC,IAAI1B,GAAJ,EAAS;MACP;IACD;;IACD,IAAIjC,OAAO,GAAG2D,KAAK,CAACsC,QAApB;IACA,IAAIvG,IAAI,GAAGM,OAAO,CAACN,IAAnB;IACA,IAAIwG,MAAM,GAAGlG,OAAO,CAACkG,MAArB;;IACA,IAAI7F,QAAQ,GAAGpB,QAAQ,CAACkH,uBAAT,CAAiCnG,OAAO,CAACK,QAAzC,CAAf;;IACA,IAAI6F,MAAM,KAAK,IAAf,EAAqB;MACnB;IACD;;IACD9C,IAAI,CAACwC,OAAL,CAAaQ,WAAb,CAAyBJ,aAAzB;;IACA,IAAIrB,OAAJ;;IACA,IAAIvB,IAAI,CAACsC,QAAL,CAAczF,cAAd,CAA6BiG,MAA7B,CAAJ,EAA0C;MACxCvB,OAAO,GAAGvB,IAAI,CAACsC,QAAL,CAAcQ,MAAd,CAAV;IACD,CAFD,MAEO;MACL,IAAIpE,KAAK,GAAG,EAAZ;MACAA,KAAK,CAAChD,IAAI,CAAC2B,MAAL,CAAYC,qBAAb,CAAL,GACK,IAAIzB,QAAJ,EAAD,CAAiBqB,sBAAjB,EADJ;MAEAwB,KAAK,CAAChD,IAAI,CAAC2B,MAAL,CAAYE,uBAAb,CAAL,GAA6C;QAC3Cb,IAAI,EAAEZ,SAAS,CAACW,MAAV,CAAiBwG,aADoB;QAE3CrG,OAAO,EAAE,gCAAgCkG,MAFE;QAG3C7F,QAAQ,EAAG,IAAIpB,QAAJ,EAAD,CAAiBqB,sBAAjB;MAHiC,CAA7C;MAKAwB,KAAK,CAAChD,IAAI,CAAC2B,MAAL,CAAY+D,oBAAb,CAAL,GAA0C,IAA1C;MACA9E,IAAI,CAACkB,UAAL,CAAgBkB,KAAhB,EAAuB,YAAW,CAAE,CAApC;MACA;IACD;;IACDqD,cAAc,CAACR,OAAO,CAAC2B,IAAT,CAAd,CAA6B5G,IAA7B,EAAmCiF,OAAnC,EAA4CtE,QAA5C;EACD;;EACD,KAAKuF,OAAL,CAAaQ,WAAb,CAAyBJ,aAAzB;AACD,CA7CD;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAR,MAAM,CAACpD,SAAP,CAAiBmE,QAAjB,GAA4B,UAASC,IAAT,EAAe7B,OAAf,EAAwB5D,SAAxB,EAAmCuB,WAAnC,EACSgE,IADT,EACe;EACzC,IAAI,KAAKZ,QAAL,CAAczF,cAAd,CAA6BuG,IAA7B,CAAJ,EAAwC;IACtC,OAAO,KAAP;EACD;;EACD,KAAKd,QAAL,CAAcc,IAAd,IAAsB;IACpB3B,IAAI,EAAEF,OADc;IAEpB5D,SAAS,EAAEA,SAFS;IAGpBuB,WAAW,EAAEA,WAHO;IAIpBgE,IAAI,EAAEA;EAJc,CAAtB;EAMA,OAAO,IAAP;AACD,CAZD;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAd,MAAM,CAACpD,SAAP,CAAiBqE,WAAjB,GAA+B,UAAStD,QAAT,EAAmB;EAChD,KAAKyC,OAAL,CAAaa,WAAb,CAAyBtD,QAAzB;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACAqC,MAAM,CAACpD,SAAP,CAAiBsE,aAAjB,GAAiC,YAAW;EAC1C,KAAKd,OAAL,CAAac,aAAb;AACD,CAFD;;AAIA,IAAIC,2BAA2B,GAAG;EAChC7G,IAAI,EAAEZ,SAAS,CAACW,MAAV,CAAiBwG,aADS;EAEhCrG,OAAO,EAAE;AAFuB,CAAlC;AAKA,IAAI4G,cAAc,GAAG;EACnBxB,KAAK,EAAE,UAAS1F,IAAT,EAAeyD,QAAf,EAAyB;IAC9BA,QAAQ,CAACwD,2BAAD,CAAR;EACD,CAHkB;EAInBrB,aAAa,EAAE,UAAS5F,IAAT,EAAeyD,QAAf,EAAyB;IACtCA,QAAQ,CAACwD,2BAAD,CAAR;EACD,CANkB;EAOnBtB,aAAa,EAAE,UAAS3F,IAAT,EAAe;IAC5BA,IAAI,CAAC4D,IAAL,CAAU,OAAV,EAAmBqD,2BAAnB;EACD,CATkB;EAUnBpB,IAAI,EAAE,UAAS7F,IAAT,EAAe;IACnBA,IAAI,CAAC4D,IAAL,CAAU,OAAV,EAAmBqD,2BAAnB;EACD;AAZkB,CAArB;;AAeA,SAASE,QAAT,CAAkBC,KAAlB,EAAyB;EACvB,OAAO,CAAC,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,UAA/C,KAA8DA,KAAK,KAAK,IAA/E;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAtB,MAAM,CAACpD,SAAP,CAAiB2E,UAAjB,GAA8B,UAASC,OAAT,EAAkBC,cAAlB,EAAkC;EAC9D,IAAI,CAACJ,QAAQ,CAACG,OAAD,CAAT,IAAsB,CAACH,QAAQ,CAACI,cAAD,CAAnC,EAAqD;IACnD,MAAM,IAAIlB,KAAJ,CAAU,8CAAV,CAAN;EACD;;EACD,IAAImB,MAAM,CAACC,IAAP,CAAYH,OAAZ,EAAqBI,MAArB,KAAgC,CAApC,EAAuC;IACrC,MAAM,IAAIrB,KAAJ,CAAU,yCAAV,CAAN;EACD;;EACD,IAAI,KAAKF,OAAT,EAAkB;IAChB,MAAM,IAAIE,KAAJ,CAAU,2CAAV,CAAN;EACD;;EACD,IAAI3C,IAAI,GAAG,IAAX;EACA8D,MAAM,CAACC,IAAP,CAAYH,OAAZ,EAAqBK,OAArB,CAA6Bb,IAAI,IAAI;IACnC,MAAMc,KAAK,GAAGN,OAAO,CAACR,IAAD,CAArB;IACA,IAAIe,WAAJ;;IACA,IAAID,KAAK,CAACE,aAAV,EAAyB;MACvB,IAAIF,KAAK,CAACG,cAAV,EAA0B;QACxBF,WAAW,GAAG,MAAd;MACD,CAFD,MAEO;QACLA,WAAW,GAAG,eAAd;MACD;IACF,CAND,MAMO;MACL,IAAID,KAAK,CAACG,cAAV,EAA0B;QACxBF,WAAW,GAAG,eAAd;MACD,CAFD,MAEO;QACLA,WAAW,GAAG,OAAd;MACD;IACF;;IACD,IAAIG,IAAJ;;IACA,IAAIT,cAAc,CAACT,IAAD,CAAd,KAAyB3D,SAA7B,EAAwC;MACtC;AACN;AACA;MACM,IAAIoE,cAAc,CAACK,KAAK,CAACK,YAAP,CAAd,KAAuC9E,SAA3C,EAAsD;QACpD7D,MAAM,CAACoC,GAAP,CAAWlC,SAAS,CAACmC,YAAV,CAAuBC,KAAlC,EAAyC,oBAAoBkF,IAApB,GACrC,OADqC,GAC3Bc,KAAK,CAACM,IADqB,GACd,4BAD3B;QAEAF,IAAI,GAAGd,cAAc,CAACW,WAAD,CAArB;MACD,CAJD,MAIO;QACLG,IAAI,GAAGT,cAAc,CAACK,KAAK,CAACK,YAAP,CAAd,CAAmCE,IAAnC,CAAwCZ,cAAxC,CAAP;MACD;IACF,CAXD,MAWO;MACLS,IAAI,GAAGT,cAAc,CAACT,IAAD,CAAd,CAAqBqB,IAArB,CAA0BZ,cAA1B,CAAP;IACD;;IACD,IAAIlG,SAAS,GAAGuG,KAAK,CAACQ,iBAAtB;IACA,IAAIxF,WAAW,GAAGgF,KAAK,CAACS,kBAAxB;IACA,IAAIC,gBAAgB,GAAG5E,IAAI,CAACmD,QAAL,CAAce,KAAK,CAACM,IAApB,EAA0BF,IAA1B,EAAgC3G,SAAhC,EACcuB,WADd,EAC2BiF,WAD3B,CAAvB;;IAEA,IAAI,CAACS,gBAAL,EAAuB;MACrB,MAAM,IAAIjC,KAAJ,CAAU,wBAAwBuB,KAAK,CAACM,IAA9B,GACZ,oBADE,CAAN;IAED;EACF,CAvCD;AAwCD,CAnDD;AAqDA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACApC,MAAM,CAACpD,SAAP,CAAiB6F,eAAjB,GAAmC1I,IAAI,CAAC2I,SAAL,CAAe,UAASlB,OAAT,EACSC,cADT,EACyB;EACzE,IAAIxB,OAAJ;;EACA,IAAI0C,oBAAoB,GAAGpJ,OAAO,CAAC,wBAAD,CAAlC;;EACA,IAAIqJ,oBAAoB,GAAGrJ,OAAO,CAAC,wBAAD,CAAlC;;EACA,IAAIoJ,oBAAoB,CAACE,qBAArB,CAA2CrB,OAA3C,CAAJ,EAAyD;IACvDvB,OAAO,GAAGyB,MAAM,CAACoB,MAAP,CAAc,EAAd,EAAkBtJ,MAAM,CAACuJ,kBAAzB,EAA6CvB,OAAO,CAACwB,YAArD,CAAV;IACA,KAAKzB,UAAL,CACIoB,oBAAoB,CAACM,uBAArB,CAA6CzB,OAA7C,EAAsDvB,OAAtD,CADJ,EAEIwB,cAFJ;EAGD,CALD,MAKO,IAAImB,oBAAoB,CAACM,qBAArB,CAA2C1B,OAA3C,CAAJ,EAAyD;IAC9DvB,OAAO,GAAGyB,MAAM,CAACoB,MAAP,CAAc,EAAd,EAAkBtJ,MAAM,CAACuJ,kBAAzB,EAA6CvB,OAAO,CAACwB,YAArD,CAAV;IACA,KAAKzB,UAAL,CACIqB,oBAAoB,CAACK,uBAArB,CAA6CzB,OAA7C,EAAsDvB,OAAtD,CADJ,EAEIwB,cAFJ;EAGD,CALM,MAKA;IACL;IACA,KAAKF,UAAL,CAAgBC,OAAhB,EAAyBC,cAAzB;EACD;AACF,CAnBkC,EAmBhC,uDAnBgC,CAAnC;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAzB,MAAM,CAACpD,SAAP,CAAiByF,IAAjB,GAAwB,UAASc,IAAT,EAAeC,KAAf,EAAsB;EAC5C,IAAI,KAAK/C,OAAT,EAAkB;IAChB,MAAM,IAAIE,KAAJ,CAAU,qDAAV,CAAN;EACD;;EACD,OAAO,KAAKH,OAAL,CAAaiD,YAAb,CAA0BF,IAA1B,EAAgCC,KAAhC,CAAP;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACApD,MAAM,CAACpD,SAAP,CAAiB0G,SAAjB,GAA6B,UAASH,IAAT,EAAeC,KAAf,EAAsBzF,QAAtB,EAAgC;EAC3D;AACF;AACA;EACE,MAAMsB,MAAM,GAAG,KAAKoD,IAAL,CAAUc,IAAV,EAAgBC,KAAhB,CAAf;;EACA,IAAInE,MAAM,GAAG,CAAb,EAAgB;IACdsE,YAAY,CAAC5F,QAAD,EAAW,IAAI4C,KAAJ,CAAU,qBAAV,CAAX,EAA6CtB,MAA7C,CAAZ;EACD,CAFD,MAEO;IACLsE,YAAY,CAAC5F,QAAD,EAAW,IAAX,EAAiBsB,MAAjB,CAAZ;EACD;AACF,CAVD;;AAYAuE,OAAO,CAACxD,MAAR,GAAiBA,MAAjB"},"metadata":{},"sourceType":"script"}