{"ast":null,"code":"/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n * Credentials module\n *\n * This module contains factory methods for two different credential types:\n * CallCredentials and ChannelCredentials. ChannelCredentials are things like\n * SSL credentials that can be used to secure a connection, and are used to\n * construct a Client object. CallCredentials genrally modify metadata, so they\n * can be attached to an individual method call.\n *\n * CallCredentials can be composed with other CallCredentials to create\n * CallCredentials. ChannelCredentials can be composed with CallCredentials\n * to create ChannelCredentials. No combined credential can have more than\n * one ChannelCredentials.\n *\n * For example, to create a client secured with SSL that uses Google\n * default application credentials to authenticate:\n *\n * @example\n * var channel_creds = credentials.createSsl(root_certs);\n * (new GoogleAuth()).getApplicationDefault(function(err, credential) {\n *   var call_creds = credentials.createFromGoogleCredential(credential);\n *   var combined_creds = credentials.combineChannelCredentials(\n *       channel_creds, call_creds);\n *   var client = new Client(address, combined_creds);\n * });\n *\n * @namespace grpc.credentials\n */\n'use strict';\n\nvar grpc = require('./grpc_extension');\n/**\n * This cannot be constructed directly. Instead, instances of this class should\n * be created using the factory functions in {@link grpc.credentials}\n * @constructor grpc.credentials~CallCredentials\n */\n\n\nvar CallCredentials = grpc.CallCredentials;\n/**\n * This cannot be constructed directly. Instead, instances of this class should\n * be created using the factory functions in {@link grpc.credentials}\n * @constructor grpc.credentials~ChannelCredentials\n */\n\nvar ChannelCredentials = grpc.ChannelCredentials;\n\nvar Metadata = require('./metadata.js');\n\nvar common = require('./common.js');\n\nvar constants = require('./constants');\n/**\n * @external GoogleCredential\n * @see https://github.com/google/google-auth-library-nodejs\n */\n\n\nconst PEM_CERT_HEADER = \"-----BEGIN CERTIFICATE-----\";\nconst PEM_CERT_FOOTER = \"-----END CERTIFICATE-----\";\n\nfunction wrapCheckServerIdentityCallback(callback) {\n  return function (hostname, cert) {\n    // Parse cert from pem to a version that matches the tls.checkServerIdentity\n    // format.\n    // https://nodejs.org/api/tls.html#tls_tls_checkserveridentity_hostname_cert\n    var pemHeaderIndex = cert.indexOf(PEM_CERT_HEADER);\n\n    if (pemHeaderIndex === -1) {\n      return new Error(\"Unable to parse certificate PEM.\");\n    }\n\n    cert = cert.substring(pemHeaderIndex);\n    var pemFooterIndex = cert.indexOf(PEM_CERT_FOOTER);\n\n    if (pemFooterIndex === -1) {\n      return new Error(\"Unable to parse certificate PEM.\");\n    }\n\n    cert = cert.substring(PEM_CERT_HEADER.length, pemFooterIndex);\n    var rawBuffer = Buffer.from(cert.replace(\"\\n\", \"\").replace(\" \", \"\"), \"base64\");\n    return callback(hostname, {\n      raw: rawBuffer\n    });\n  };\n}\n/**\n * Create an SSL Credentials object. If using a client-side certificate, both\n * the second and third arguments must be passed. Additional peer verification\n * options can be passed in the fourth argument as described below.\n * @memberof grpc.credentials\n * @alias grpc.credentials.createSsl\n * @kind function\n * @param {Buffer=} root_certs The root certificate data\n * @param {Buffer=} private_key The client certificate private key, if\n *     applicable\n * @param {Buffer=} cert_chain The client certificate cert chain, if applicable\n * @param {Function} verify_options.checkServerIdentity Optional callback\n *     receiving the expected hostname and peer certificate for additional\n *     verification. The callback should return an Error if verification\n *     fails and otherwise return undefined.\n * @return {grpc.credentials~ChannelCredentials} The SSL Credentials object\n */\n\n\nexports.createSsl = function (root_certs, private_key, cert_chain, verify_options) {\n  // The checkServerIdentity callback from gRPC core will receive the cert as a PEM.\n  // To better match the checkServerIdentity callback of Node, we wrap the callback\n  // to decode the PEM and populate a cert object.\n  if (verify_options && verify_options.checkServerIdentity) {\n    if (typeof verify_options.checkServerIdentity !== 'function') {\n      throw new TypeError(\"Value of checkServerIdentity must be a function.\");\n    } // Make a shallow clone of verify_options so our modification of the callback\n    // isn't reflected to the caller\n\n\n    var updated_verify_options = Object.assign({}, verify_options);\n    updated_verify_options.checkServerIdentity = wrapCheckServerIdentityCallback(verify_options.checkServerIdentity);\n    arguments[3] = updated_verify_options;\n  }\n\n  return ChannelCredentials.createSsl.apply(this, arguments);\n};\n/**\n * @callback grpc.credentials~metadataCallback\n * @param {Error} error The error, if getting metadata failed\n * @param {grpc.Metadata} metadata The metadata\n */\n\n/**\n * @callback grpc.credentials~generateMetadata\n * @param {Object} params Parameters that can modify metadata generation\n * @param {string} params.service_url The URL of the service that the call is\n *     going to\n * @param {grpc.credentials~metadataCallback} callback\n */\n\n/**\n * Create a gRPC credentials object from a metadata generation function. This\n * function gets the service URL and a callback as parameters. The error\n * passed to the callback can optionally have a 'code' value attached to it,\n * which corresponds to a status code that this library uses.\n * @memberof grpc.credentials\n * @alias grpc.credentials.createFromMetadataGenerator\n * @param {grpc.credentials~generateMetadata} metadata_generator The function\n *     that generates metadata\n * @return {grpc.credentials~CallCredentials} The credentials object\n */\n\n\nexports.createFromMetadataGenerator = function (metadata_generator) {\n  return CallCredentials.createFromPlugin(function (service_url, cb_data, callback) {\n    metadata_generator({\n      service_url: service_url\n    }, function (error, metadata) {\n      var code = constants.status.OK;\n      var message = '';\n\n      if (error) {\n        message = error.message;\n\n        if (error.hasOwnProperty('code') && Number.isFinite(error.code)) {\n          code = error.code;\n        } else {\n          code = constants.status.UNAUTHENTICATED;\n        }\n\n        if (!metadata) {\n          metadata = new Metadata();\n        }\n      }\n\n      callback(code, message, metadata._getCoreRepresentation(), cb_data);\n    });\n  });\n};\n\nfunction getAuthorizationHeaderFromGoogleCredential(google_credential, url, callback) {\n  // google-auth-library pre-v2.0.0 does not have getRequestHeaders\n  // but has getRequestMetadata, which is deprecated in v2.0.0\n  if (typeof google_credential.getRequestHeaders === 'function') {\n    google_credential.getRequestHeaders(url).then(function (header) {\n      callback(null, header.Authorization);\n    }).catch(function (err) {\n      callback(err);\n      return;\n    });\n  } else {\n    google_credential.getRequestMetadata(url, function (err, header) {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(null, header.Authorization);\n    });\n  }\n}\n/**\n * Create a gRPC credential from a Google credential object.\n * @memberof grpc.credentials\n * @alias grpc.credentials.createFromGoogleCredential\n * @param {external:GoogleCredential} google_credential The Google credential\n *     object to use\n * @return {grpc.credentials~CallCredentials} The resulting credentials object\n */\n\n\nexports.createFromGoogleCredential = function (google_credential) {\n  return exports.createFromMetadataGenerator(function (auth_context, callback) {\n    var service_url = auth_context.service_url;\n    getAuthorizationHeaderFromGoogleCredential(google_credential, service_url, function (err, authHeader) {\n      if (err) {\n        common.log(constants.logVerbosity.INFO, 'Auth error:' + err);\n        callback(err);\n        return;\n      }\n\n      var metadata = new Metadata();\n      metadata.add('authorization', authHeader);\n      callback(null, metadata);\n    });\n  });\n};\n/**\n * Combine a ChannelCredentials with any number of CallCredentials into a single\n * ChannelCredentials object.\n * @memberof grpc.credentials\n * @alias grpc.credentials.combineChannelCredentials\n * @param {grpc.credentials~ChannelCredentials} channel_credential The ChannelCredentials to\n *     start with\n * @param {...grpc.credentials~CallCredentials} credentials The CallCredentials to compose\n * @return {grpc.credentials~ChannelCredentials} A credentials object that combines all of the\n *     input credentials\n */\n\n\nexports.combineChannelCredentials = function (channel_credential) {\n  var current = channel_credential;\n\n  for (var i = 1; i < arguments.length; i++) {\n    current = current.compose(arguments[i]);\n  }\n\n  return current;\n};\n/**\n * Combine any number of CallCredentials into a single CallCredentials object\n * @memberof grpc.credentials\n * @alias grpc.credentials.combineCallCredentials\n * @param {...grpc.credentials~CallCredentials} credentials The CallCredentials to compose\n * @return {grpc.credentials~CallCredentials} A credentials object that combines all of the input\n *     credentials\n */\n\n\nexports.combineCallCredentials = function () {\n  var current = arguments[0];\n\n  for (var i = 1; i < arguments.length; i++) {\n    current = current.compose(arguments[i]);\n  }\n\n  return current;\n};\n/**\n * Create an insecure credentials object. This is used to create a channel that\n * does not use SSL. This cannot be composed with anything.\n * @memberof grpc.credentials\n * @alias grpc.credentials.createInsecure\n * @kind function\n * @return {grpc.credentials~ChannelCredentials} The insecure credentials object\n */\n\n\nexports.createInsecure = ChannelCredentials.createInsecure;","map":{"version":3,"names":["grpc","require","CallCredentials","ChannelCredentials","Metadata","common","constants","PEM_CERT_HEADER","PEM_CERT_FOOTER","wrapCheckServerIdentityCallback","callback","hostname","cert","pemHeaderIndex","indexOf","Error","substring","pemFooterIndex","length","rawBuffer","Buffer","from","replace","raw","exports","createSsl","root_certs","private_key","cert_chain","verify_options","checkServerIdentity","TypeError","updated_verify_options","Object","assign","arguments","apply","createFromMetadataGenerator","metadata_generator","createFromPlugin","service_url","cb_data","error","metadata","code","status","OK","message","hasOwnProperty","Number","isFinite","UNAUTHENTICATED","_getCoreRepresentation","getAuthorizationHeaderFromGoogleCredential","google_credential","url","getRequestHeaders","then","header","Authorization","catch","err","getRequestMetadata","createFromGoogleCredential","auth_context","authHeader","log","logVerbosity","INFO","add","combineChannelCredentials","channel_credential","current","i","compose","combineCallCredentials","createInsecure"],"sources":["C:/Users/Asus/Documents/threejs/miro learning/20.12 neuroweb textures/node_modules/grpc/src/credentials.js"],"sourcesContent":["/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n * Credentials module\n *\n * This module contains factory methods for two different credential types:\n * CallCredentials and ChannelCredentials. ChannelCredentials are things like\n * SSL credentials that can be used to secure a connection, and are used to\n * construct a Client object. CallCredentials genrally modify metadata, so they\n * can be attached to an individual method call.\n *\n * CallCredentials can be composed with other CallCredentials to create\n * CallCredentials. ChannelCredentials can be composed with CallCredentials\n * to create ChannelCredentials. No combined credential can have more than\n * one ChannelCredentials.\n *\n * For example, to create a client secured with SSL that uses Google\n * default application credentials to authenticate:\n *\n * @example\n * var channel_creds = credentials.createSsl(root_certs);\n * (new GoogleAuth()).getApplicationDefault(function(err, credential) {\n *   var call_creds = credentials.createFromGoogleCredential(credential);\n *   var combined_creds = credentials.combineChannelCredentials(\n *       channel_creds, call_creds);\n *   var client = new Client(address, combined_creds);\n * });\n *\n * @namespace grpc.credentials\n */\n\n'use strict';\n\nvar grpc = require('./grpc_extension');\n\n/**\n * This cannot be constructed directly. Instead, instances of this class should\n * be created using the factory functions in {@link grpc.credentials}\n * @constructor grpc.credentials~CallCredentials\n */\nvar CallCredentials = grpc.CallCredentials;\n\n/**\n * This cannot be constructed directly. Instead, instances of this class should\n * be created using the factory functions in {@link grpc.credentials}\n * @constructor grpc.credentials~ChannelCredentials\n */\nvar ChannelCredentials = grpc.ChannelCredentials;\n\nvar Metadata = require('./metadata.js');\n\nvar common = require('./common.js');\n\nvar constants = require('./constants');\n\n/**\n * @external GoogleCredential\n * @see https://github.com/google/google-auth-library-nodejs\n */\n\nconst PEM_CERT_HEADER = \"-----BEGIN CERTIFICATE-----\";\nconst PEM_CERT_FOOTER = \"-----END CERTIFICATE-----\";\n\nfunction wrapCheckServerIdentityCallback(callback) {\n  return function(hostname, cert) {\n    // Parse cert from pem to a version that matches the tls.checkServerIdentity\n    // format.\n    // https://nodejs.org/api/tls.html#tls_tls_checkserveridentity_hostname_cert\n\n    var pemHeaderIndex = cert.indexOf(PEM_CERT_HEADER);\n    if (pemHeaderIndex === -1) {\n      return new Error(\"Unable to parse certificate PEM.\");\n    }\n    cert = cert.substring(pemHeaderIndex);\n    var pemFooterIndex = cert.indexOf(PEM_CERT_FOOTER);\n    if (pemFooterIndex === -1) {\n      return new Error(\"Unable to parse certificate PEM.\");\n    }\n    cert = cert.substring(PEM_CERT_HEADER.length, pemFooterIndex);\n    var rawBuffer = Buffer.from(cert.replace(\"\\n\", \"\").replace(\" \", \"\"), \"base64\");\n\n    return callback(hostname, { raw: rawBuffer });\n  }\n}\n\n/**\n * Create an SSL Credentials object. If using a client-side certificate, both\n * the second and third arguments must be passed. Additional peer verification\n * options can be passed in the fourth argument as described below.\n * @memberof grpc.credentials\n * @alias grpc.credentials.createSsl\n * @kind function\n * @param {Buffer=} root_certs The root certificate data\n * @param {Buffer=} private_key The client certificate private key, if\n *     applicable\n * @param {Buffer=} cert_chain The client certificate cert chain, if applicable\n * @param {Function} verify_options.checkServerIdentity Optional callback\n *     receiving the expected hostname and peer certificate for additional\n *     verification. The callback should return an Error if verification\n *     fails and otherwise return undefined.\n * @return {grpc.credentials~ChannelCredentials} The SSL Credentials object\n */\nexports.createSsl = function(root_certs, private_key, cert_chain, verify_options) {\n  // The checkServerIdentity callback from gRPC core will receive the cert as a PEM.\n  // To better match the checkServerIdentity callback of Node, we wrap the callback\n  // to decode the PEM and populate a cert object.\n  if (verify_options && verify_options.checkServerIdentity) {\n    if (typeof verify_options.checkServerIdentity !== 'function') {\n      throw new TypeError(\"Value of checkServerIdentity must be a function.\");\n    }\n    // Make a shallow clone of verify_options so our modification of the callback\n    // isn't reflected to the caller\n    var updated_verify_options = Object.assign({}, verify_options);\n    updated_verify_options.checkServerIdentity = wrapCheckServerIdentityCallback(\n        verify_options.checkServerIdentity);\n    arguments[3] = updated_verify_options;\n  }\n  return ChannelCredentials.createSsl.apply(this, arguments);\n}\n\n\n/**\n * @callback grpc.credentials~metadataCallback\n * @param {Error} error The error, if getting metadata failed\n * @param {grpc.Metadata} metadata The metadata\n */\n\n/**\n * @callback grpc.credentials~generateMetadata\n * @param {Object} params Parameters that can modify metadata generation\n * @param {string} params.service_url The URL of the service that the call is\n *     going to\n * @param {grpc.credentials~metadataCallback} callback\n */\n\n/**\n * Create a gRPC credentials object from a metadata generation function. This\n * function gets the service URL and a callback as parameters. The error\n * passed to the callback can optionally have a 'code' value attached to it,\n * which corresponds to a status code that this library uses.\n * @memberof grpc.credentials\n * @alias grpc.credentials.createFromMetadataGenerator\n * @param {grpc.credentials~generateMetadata} metadata_generator The function\n *     that generates metadata\n * @return {grpc.credentials~CallCredentials} The credentials object\n */\nexports.createFromMetadataGenerator = function(metadata_generator) {\n  return CallCredentials.createFromPlugin(function(service_url, cb_data,\n                                                   callback) {\n    metadata_generator({service_url: service_url}, function(error, metadata) {\n      var code = constants.status.OK;\n      var message = '';\n      if (error) {\n        message = error.message;\n        if (error.hasOwnProperty('code') && Number.isFinite(error.code)) {\n          code = error.code;\n        } else {\n          code = constants.status.UNAUTHENTICATED;\n        }\n        if (!metadata) {\n          metadata = new Metadata();\n        }\n      }\n      callback(code, message, metadata._getCoreRepresentation(), cb_data);\n    });\n  });\n};\n\nfunction getAuthorizationHeaderFromGoogleCredential(google_credential, url, callback) {\n  // google-auth-library pre-v2.0.0 does not have getRequestHeaders\n  // but has getRequestMetadata, which is deprecated in v2.0.0\n  if (typeof google_credential.getRequestHeaders === 'function') {\n    google_credential.getRequestHeaders(url)\n      .then(function(header) {\n        callback(null, header.Authorization);\n      })\n      .catch(function(err) {\n        callback(err);\n        return;\n      });\n  } else {\n    google_credential.getRequestMetadata(url, function(err, header) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      callback(null, header.Authorization);\n    });\n  }\n}\n\n/**\n * Create a gRPC credential from a Google credential object.\n * @memberof grpc.credentials\n * @alias grpc.credentials.createFromGoogleCredential\n * @param {external:GoogleCredential} google_credential The Google credential\n *     object to use\n * @return {grpc.credentials~CallCredentials} The resulting credentials object\n */\nexports.createFromGoogleCredential = function(google_credential) {\n  return exports.createFromMetadataGenerator(function(auth_context, callback) {\n    var service_url = auth_context.service_url;\n    getAuthorizationHeaderFromGoogleCredential(google_credential, service_url,\n      function(err, authHeader) {\n        if (err) {\n          common.log(constants.logVerbosity.INFO, 'Auth error:' + err);\n          callback(err);\n          return;\n        }\n        var metadata = new Metadata();\n        metadata.add('authorization', authHeader);\n        callback(null, metadata);\n      });\n  });\n};\n\n/**\n * Combine a ChannelCredentials with any number of CallCredentials into a single\n * ChannelCredentials object.\n * @memberof grpc.credentials\n * @alias grpc.credentials.combineChannelCredentials\n * @param {grpc.credentials~ChannelCredentials} channel_credential The ChannelCredentials to\n *     start with\n * @param {...grpc.credentials~CallCredentials} credentials The CallCredentials to compose\n * @return {grpc.credentials~ChannelCredentials} A credentials object that combines all of the\n *     input credentials\n */\nexports.combineChannelCredentials = function(channel_credential) {\n  var current = channel_credential;\n  for (var i = 1; i < arguments.length; i++) {\n    current = current.compose(arguments[i]);\n  }\n  return current;\n};\n\n/**\n * Combine any number of CallCredentials into a single CallCredentials object\n * @memberof grpc.credentials\n * @alias grpc.credentials.combineCallCredentials\n * @param {...grpc.credentials~CallCredentials} credentials The CallCredentials to compose\n * @return {grpc.credentials~CallCredentials} A credentials object that combines all of the input\n *     credentials\n */\nexports.combineCallCredentials = function() {\n  var current = arguments[0];\n  for (var i = 1; i < arguments.length; i++) {\n    current = current.compose(arguments[i]);\n  }\n  return current;\n};\n\n/**\n * Create an insecure credentials object. This is used to create a channel that\n * does not use SSL. This cannot be composed with anything.\n * @memberof grpc.credentials\n * @alias grpc.credentials.createInsecure\n * @kind function\n * @return {grpc.credentials~ChannelCredentials} The insecure credentials object\n */\nexports.createInsecure = ChannelCredentials.createInsecure;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}