{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Documents\\\\threejs\\\\miro learning\\\\20.12 neuroweb textures\\\\src\\\\Dalle.js\",\n    _s = $RefreshSig$();\n\nimport \"./interface.css\";\nimport * as THREE from 'three';\nimport { useState, createContext, useContext, useEffect } from \"react\";\nimport { Configuration, OpenAIApi } from \"openai\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { generatePicture } from \"./service\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Dalle() {\n  _s();\n\n  const dispatch = useDispatch();\n  const [prompt, setPrompt] = useState(\"\");\n  const [imageUrl, setImageUrl] = useState('');\n  const [texture, setTexture] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const textureLoader = new THREE.TextureLoader();\n  const [placeholder, setPlaceholder] = useState(\"Search Bears with Paint Brushes the Starry Night, painted by Vincent Van Gogh..\");\n  const configuration = new Configuration({\n    apiKey: \"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\"\n  });\n  const openai = new OpenAIApi(configuration);\n\n  const generateImage = async () => {\n    setPlaceholder(`Search ${prompt}..`);\n    setLoading(true);\n    const res = await openai.createImage({\n      prompt: prompt,\n      n: 1,\n      size: \"512x512\"\n    });\n    setLoading(false);\n    setImageUrl(res.data.data[0].url);\n    textureLoader.load(imageUrl, texture => {\n      setTexture(texture);\n    });\n  };\n\n  const handleGenerateImage = () => {\n    dispatch(generatePicture({\n      prompt\n    }));\n  };\n\n  useEffect(() => {// Use texture in your scene here\n  }, [imageUrl]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-main\",\n      children: loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Generating..Please Wait..\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lds-ripple\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Generate an Image using Open AI API\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), imageUrl.length > 0 ? /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"result-image\",\n          src: imageUrl,\n          alt: \"result\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"app-input\",\n            placeholder: placeholder,\n            onChange: e => setPrompt(e.target.value),\n            rows: \"10\",\n            cols: \"40\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button-create \",\n            onClick: generateImage,\n            children: \"Generate an Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(Dalle, \"g2UIkUw14wnXctVJqsPUjYppeGw=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Dalle;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dalle\");","map":{"version":3,"names":["THREE","useState","createContext","useContext","useEffect","Configuration","OpenAIApi","useDispatch","useSelector","generatePicture","Dalle","dispatch","prompt","setPrompt","imageUrl","setImageUrl","texture","setTexture","loading","setLoading","textureLoader","TextureLoader","placeholder","setPlaceholder","configuration","apiKey","openai","generateImage","res","createImage","n","size","data","url","load","handleGenerateImage","length","e","target","value"],"sources":["C:/Users/Asus/Documents/threejs/miro learning/20.12 neuroweb textures/src/Dalle.js"],"sourcesContent":["import \"./interface.css\";\r\nimport * as THREE from 'three';\r\nimport { useState, createContext, useContext , useEffect } from \"react\";\r\nimport { Configuration, OpenAIApi } from \"openai\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { generatePicture } from \"./service\";\r\n\r\n\r\nexport default function Dalle(){\r\n  const dispatch = useDispatch();\r\n  const [prompt, setPrompt] = useState(\"\");\r\n  const [imageUrl, setImageUrl] = useState('');\r\n  const [texture, setTexture] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const textureLoader = new THREE.TextureLoader();\r\n\r\n  const [placeholder, setPlaceholder] = useState(\r\n    \"Search Bears with Paint Brushes the Starry Night, painted by Vincent Van Gogh..\"\r\n  );\r\n  const configuration = new Configuration({\r\n    apiKey: \"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\",\r\n  });\r\n\r\n  const openai = new OpenAIApi(configuration);\r\n  const generateImage = async () => {\r\n    setPlaceholder(`Search ${prompt}..`);\r\n    setLoading(true);\r\n    const res = await openai.createImage({\r\n      prompt: prompt,\r\n      n: 1,\r\n      size: \"512x512\",\r\n    });\r\n    \r\n    setLoading(false);\r\n    setImageUrl(res.data.data[0].url);\r\n    textureLoader.load(imageUrl, texture => {\r\n        setTexture(texture);\r\n      });\r\n  };\r\n\r\n\r\n  const handleGenerateImage = () => {\r\n    dispatch(generatePicture({prompt}));\r\n  };\r\n  useEffect(() => {\r\n\r\n\r\n    // Use texture in your scene here\r\n  }, [imageUrl]);\r\n\r\n\r\n \r\n  return (\r\n    <>\r\n    <div className=\"app-main\">\r\n      {loading ? (\r\n        <>\r\n          <h2>Generating..Please Wait..</h2>\r\n          <div className=\"lds-ripple\">\r\n            <div></div>\r\n            <div></div>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h2>Generate an Image using Open AI API</h2>\r\n\r\n          \r\n          {imageUrl.length > 0 ? (\r\n              \r\n            <img className=\"result-image\" src={imageUrl} alt=\"result\"  />\r\n          ) : (\r\n            <><textarea\r\n            className=\"app-input\"\r\n            placeholder={placeholder}\r\n            onChange={(e) => setPrompt(e.target.value)}\r\n            rows=\"10\"\r\n            cols=\"40\"\r\n          />\r\n          <button className=\"button-create \" onClick={generateImage}>Generate an Image</button></>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n    </>\r\n  );\r\n}"],"mappings":";;;AAAA,OAAO,iBAAP;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,aAAnB,EAAkCC,UAAlC,EAA+CC,SAA/C,QAAgE,OAAhE;AACA,SAASC,aAAT,EAAwBC,SAAxB,QAAyC,QAAzC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,eAAT,QAAgC,WAAhC;;;AAGA,eAAe,SAASC,KAAT,GAAgB;EAAA;;EAC7B,MAAMC,QAAQ,GAAGJ,WAAW,EAA5B;EACA,MAAM,CAACK,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAApC;EACA,MAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,IAAD,CAAtC;EACA,MAAM,CAACiB,OAAD,EAAUC,UAAV,IAAwBlB,QAAQ,CAAC,KAAD,CAAtC;EAEA,MAAMmB,aAAa,GAAG,IAAIpB,KAAK,CAACqB,aAAV,EAAtB;EAEA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,CAC5C,iFAD4C,CAA9C;EAGA,MAAMuB,aAAa,GAAG,IAAInB,aAAJ,CAAkB;IACtCoB,MAAM,EAAE;EAD8B,CAAlB,CAAtB;EAIA,MAAMC,MAAM,GAAG,IAAIpB,SAAJ,CAAckB,aAAd,CAAf;;EACA,MAAMG,aAAa,GAAG,YAAY;IAChCJ,cAAc,CAAE,UAASX,MAAO,IAAlB,CAAd;IACAO,UAAU,CAAC,IAAD,CAAV;IACA,MAAMS,GAAG,GAAG,MAAMF,MAAM,CAACG,WAAP,CAAmB;MACnCjB,MAAM,EAAEA,MAD2B;MAEnCkB,CAAC,EAAE,CAFgC;MAGnCC,IAAI,EAAE;IAH6B,CAAnB,CAAlB;IAMAZ,UAAU,CAAC,KAAD,CAAV;IACAJ,WAAW,CAACa,GAAG,CAACI,IAAJ,CAASA,IAAT,CAAc,CAAd,EAAiBC,GAAlB,CAAX;IACAb,aAAa,CAACc,IAAd,CAAmBpB,QAAnB,EAA6BE,OAAO,IAAI;MACpCC,UAAU,CAACD,OAAD,CAAV;IACD,CAFH;EAGD,CAdD;;EAiBA,MAAMmB,mBAAmB,GAAG,MAAM;IAChCxB,QAAQ,CAACF,eAAe,CAAC;MAACG;IAAD,CAAD,CAAhB,CAAR;EACD,CAFD;;EAGAR,SAAS,CAAC,MAAM,CAGd;EACD,CAJQ,EAIN,CAACU,QAAD,CAJM,CAAT;EAQA,oBACE;IAAA,uBACA;MAAK,SAAS,EAAC,UAAf;MAAA,UACGI,OAAO,gBACN;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAK,SAAS,EAAC,YAAf;UAAA,wBACE;YAAA;YAAA;YAAA;UAAA,QADF,eAEE;YAAA;YAAA;YAAA;UAAA,QAFF;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA,gBADM,gBASN;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,EAIGJ,QAAQ,CAACsB,MAAT,GAAkB,CAAlB,gBAEC;UAAK,SAAS,EAAC,cAAf;UAA8B,GAAG,EAAEtB,QAAnC;UAA6C,GAAG,EAAC;QAAjD;UAAA;UAAA;UAAA;QAAA,QAFD,gBAIC;UAAA,wBAAE;YACF,SAAS,EAAC,WADR;YAEF,WAAW,EAAEQ,WAFX;YAGF,QAAQ,EAAGe,CAAD,IAAOxB,SAAS,CAACwB,CAAC,CAACC,MAAF,CAASC,KAAV,CAHxB;YAIF,IAAI,EAAC,IAJH;YAKF,IAAI,EAAC;UALH;YAAA;YAAA;YAAA;UAAA,QAAF,eAOF;YAAQ,SAAS,EAAC,gBAAlB;YAAmC,OAAO,EAAEZ,aAA5C;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAPE;QAAA,gBARJ;MAAA;IAVJ;MAAA;MAAA;MAAA;IAAA;EADA,iBADF;AAkCD;;GA/EuBjB,K;UACLH,W;;;KADKG,K"},"metadata":{},"sourceType":"module"}