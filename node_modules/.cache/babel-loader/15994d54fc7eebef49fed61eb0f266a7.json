{"ast":null,"code":"import GenerationService from \"./generation/generation_pb_service\";\nimport Generation from \"./generation/generation_pb\"; // Set up image parameters\n\nconst imageParams = new Generation.ImageParameters();\nimageParams.setWidth(512);\nimageParams.setHeight(512);\nimageParams.addSeed(1234);\nimageParams.setSamples(1);\nimageParams.setSteps(50); // Use the `k-dpmpp-2` sampler\n\nconst transformType = new Generation.TransformType();\ntransformType.setDiffusion(Generation.DiffusionSampler.SAMPLER_K_DPMPP_2M);\nimageParams.setTransform(transformType); // Use Stable Diffusion 2.0\n\nconst request = new Generation.Request();\nrequest.setEngineId(\"stable-diffusion-v2-0\");\nrequest.setRequestedType(Generation.ArtifactType.ARTIFACT_IMAGE);\nrequest.setClassifier(new Generation.ClassifierParameters()); // Use a CFG scale of `13`\n\nconst samplerParams = new Generation.SamplerParameters();\nsamplerParams.setCfgScale(13);\nconst stepParams = new Generation.StepParameter();\nconst scheduleParameters = new Generation.ScheduleParameters(); // Set the schedule to `0`, this changes when doing an initial image generation\n\nstepParams.setScaledStep(0);\nstepParams.setSampler(samplerParams);\nstepParams.setSchedule(scheduleParameters);\nimageParams.addParameters(stepParams);\nrequest.setImage(imageParams); // Set our text prompt\n\nconst promptText = new Generation.Prompt();\npromptText.setText(\"A dream of a distant galaxy, by Caspar David Friedrich, matte painting trending on artstation HQ\");\nrequest.addPrompt(promptText); // Authenticate using your API key, don't commit your key to a public repository!\n\nconst metadata = new grpc.Metadata();\nmetadata.set(\"Authorization\", \"Bearer \" + process.env.API_KEY); // Create a generation client\n\nconst generationClient = new GenerationService.GenerationServiceClient(ApiUrl, {}); ////\n// Send the request using the `metadata` with our key from earlier\n\nconst generation = generationClient.generate(request, metadata); // Set up a callback to handle data being returned\n\ngeneration.on(\"data\", data => {\n  data.getArtifactsList().forEach(artifact => {\n    // Oh no! We were filtered by the NSFW classifier!\n    if (artifact.getType() === Generation.ArtifactType.ARTIFACT_TEXT && artifact.getFinishReason() === Generation.FinishReason.FILTER) {\n      return console.error(\"Your image was filtered by the NSFW classifier.\");\n    } // Make sure we have an image\n\n\n    if (artifact.getType() !== Generation.ArtifactType.ARTIFACT_IMAGE) return; // You can convert the raw binary into a base64 string\n\n    const base64Image = btoa(new Uint8Array(artifact.getBinary()).reduce((data, byte) => data + String.fromCodePoint(byte), \"\")); // Here's how you get the seed back if you set it to `0` (random)\n\n    const seed = artifact.getSeed(); // We're done!\n\n    someFunctionToCallWhenFinished({\n      seed,\n      base64Image\n    });\n  });\n}); // Anything other than `status.code === 0` is an error\n\ngeneration.on(\"status\", status => {\n  if (status.code === 0) return;\n  console.error(\"Your image could not be generated. You might not have enough credits.\");\n}); ///\n\nexport function someFunctionToCallWhenFinished(_ref) {\n  let {\n    seed,\n    base64Image\n  } = _ref;\n  const image = document.createElement(\"img\");\n  image.src = `data:image/png;base64,${base64Image}`;\n  document.body.appendChild(image);\n  console.log(image);\n}","map":{"version":3,"names":["GenerationService","Generation","imageParams","ImageParameters","setWidth","setHeight","addSeed","setSamples","setSteps","transformType","TransformType","setDiffusion","DiffusionSampler","SAMPLER_K_DPMPP_2M","setTransform","request","Request","setEngineId","setRequestedType","ArtifactType","ARTIFACT_IMAGE","setClassifier","ClassifierParameters","samplerParams","SamplerParameters","setCfgScale","stepParams","StepParameter","scheduleParameters","ScheduleParameters","setScaledStep","setSampler","setSchedule","addParameters","setImage","promptText","Prompt","setText","addPrompt","metadata","grpc","Metadata","set","process","env","API_KEY","generationClient","GenerationServiceClient","ApiUrl","generation","generate","on","data","getArtifactsList","forEach","artifact","getType","ARTIFACT_TEXT","getFinishReason","FinishReason","FILTER","console","error","base64Image","btoa","Uint8Array","getBinary","reduce","byte","String","fromCodePoint","seed","getSeed","someFunctionToCallWhenFinished","status","code","image","document","createElement","src","body","appendChild","log"],"sources":["C:/Users/Asus/Documents/threejs/miro learning/20.12 neuroweb textures/src/imageRequest.js"],"sourcesContent":["import GenerationService from \"./generation/generation_pb_service\";\r\nimport Generation from \"./generation/generation_pb\";\r\n\r\n\r\n\r\n// Set up image parameters\r\nconst imageParams = new Generation.ImageParameters();\r\nimageParams.setWidth(512);\r\nimageParams.setHeight(512);\r\nimageParams.addSeed(1234);\r\nimageParams.setSamples(1);\r\nimageParams.setSteps(50);\r\n\r\n// Use the `k-dpmpp-2` sampler\r\nconst transformType = new Generation.TransformType();\r\ntransformType.setDiffusion(Generation.DiffusionSampler.SAMPLER_K_DPMPP_2M);\r\nimageParams.setTransform(transformType);\r\n\r\n// Use Stable Diffusion 2.0\r\nconst request = new Generation.Request();\r\nrequest.setEngineId(\"stable-diffusion-v2-0\");\r\nrequest.setRequestedType(Generation.ArtifactType.ARTIFACT_IMAGE);\r\nrequest.setClassifier(new Generation.ClassifierParameters());\r\n\r\n// Use a CFG scale of `13`\r\nconst samplerParams = new Generation.SamplerParameters();\r\nsamplerParams.setCfgScale(13);\r\n\r\nconst stepParams = new Generation.StepParameter();\r\nconst scheduleParameters = new Generation.ScheduleParameters();\r\n\r\n// Set the schedule to `0`, this changes when doing an initial image generation\r\nstepParams.setScaledStep(0);\r\nstepParams.setSampler(samplerParams);\r\nstepParams.setSchedule(scheduleParameters);\r\n\r\nimageParams.addParameters(stepParams);\r\nrequest.setImage(imageParams);\r\n\r\n// Set our text prompt\r\nconst promptText = new Generation.Prompt();\r\npromptText.setText(\r\n  \"A dream of a distant galaxy, by Caspar David Friedrich, matte painting trending on artstation HQ\"\r\n);\r\n\r\nrequest.addPrompt(promptText);\r\n\r\n// Authenticate using your API key, don't commit your key to a public repository!\r\nconst metadata = new grpc.Metadata();\r\nmetadata.set(\"Authorization\", \"Bearer \" + process.env.API_KEY);\r\n\r\n// Create a generation client\r\nconst generationClient = new GenerationService.GenerationServiceClient(\r\n  ApiUrl,\r\n  {}\r\n);\r\n\r\n\r\n////\r\n\r\n// Send the request using the `metadata` with our key from earlier\r\nconst generation = generationClient.generate(request, metadata);\r\n\r\n// Set up a callback to handle data being returned\r\ngeneration.on(\"data\", (data) => {\r\n  data.getArtifactsList().forEach((artifact) => {\r\n    // Oh no! We were filtered by the NSFW classifier!\r\n    if (\r\n      artifact.getType() === Generation.ArtifactType.ARTIFACT_TEXT &&\r\n      artifact.getFinishReason() === Generation.FinishReason.FILTER\r\n    ) {\r\n      return console.error(\"Your image was filtered by the NSFW classifier.\");\r\n    }\r\n\r\n    // Make sure we have an image\r\n    if (artifact.getType() !== Generation.ArtifactType.ARTIFACT_IMAGE) return;\r\n\r\n    // You can convert the raw binary into a base64 string\r\n    const base64Image = btoa(\r\n      new Uint8Array(artifact.getBinary()).reduce(\r\n        (data, byte) => data + String.fromCodePoint(byte),\r\n        \"\"\r\n      )\r\n    );\r\n\r\n    // Here's how you get the seed back if you set it to `0` (random)\r\n    const seed = artifact.getSeed();\r\n\r\n    // We're done!\r\n    someFunctionToCallWhenFinished({ seed, base64Image });\r\n  });\r\n});\r\n\r\n// Anything other than `status.code === 0` is an error\r\ngeneration.on(\"status\", (status) => {\r\n  if (status.code === 0) return;\r\n  console.error(\r\n    \"Your image could not be generated. You might not have enough credits.\"\r\n  );\r\n});\r\n\r\n\r\n///\r\n\r\nexport function someFunctionToCallWhenFinished({ seed, base64Image }) {\r\n    const image = document.createElement(\"img\");\r\n    image.src = `data:image/png;base64,${base64Image}`;\r\n    document.body.appendChild(image);\r\n    console.log(image)\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}