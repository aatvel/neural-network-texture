{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport Composer from 'react-composer';\n\nconst _instanceLocalMatrix = /*@__PURE__*/new THREE.Matrix4();\n\nconst _instanceWorldMatrix = /*@__PURE__*/new THREE.Matrix4();\n\nconst _instanceIntersects = [];\n\nconst _mesh = /*@__PURE__*/new THREE.Mesh();\n\nclass PositionMesh extends THREE.Group {\n  constructor() {\n    super();\n    this.color = new THREE.Color('white');\n    this.instance = {\n      current: undefined\n    };\n    this.instanceKey = {\n      current: undefined\n    };\n  } // This will allow the virtual instance have bounds\n\n\n  get geometry() {\n    var _this$instance$curren;\n\n    return (_this$instance$curren = this.instance.current) == null ? void 0 : _this$instance$curren.geometry;\n  } // And this will allow the virtual instance to receive events\n\n\n  raycast(raycaster, intersects) {\n    const parent = this.instance.current;\n    if (!parent) return;\n    if (!parent.geometry || !parent.material) return;\n    _mesh.geometry = parent.geometry;\n    const matrixWorld = parent.matrixWorld;\n    let instanceId = parent.userData.instances.indexOf(this.instanceKey); // If the instance wasn't found or exceeds the parents draw range, bail out\n\n    if (instanceId === -1 || instanceId > parent.count) return; // calculate the world matrix for each instance\n\n    parent.getMatrixAt(instanceId, _instanceLocalMatrix);\n\n    _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\n\n\n    _mesh.matrixWorld = _instanceWorldMatrix;\n\n    _mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\n\n\n    for (let i = 0, l = _instanceIntersects.length; i < l; i++) {\n      const intersect = _instanceIntersects[i];\n      intersect.instanceId = instanceId;\n      intersect.object = this;\n      intersects.push(intersect);\n    }\n\n    _instanceIntersects.length = 0;\n  }\n\n}\n\nlet i, instanceRef;\nconst globalContext = /*@__PURE__*/React.createContext(null);\nconst parentMatrix = /*@__PURE__*/new THREE.Matrix4();\nconst instanceMatrix = /*@__PURE__*/new THREE.Matrix4();\nconst tempMatrix = /*@__PURE__*/new THREE.Matrix4();\nconst translation = /*@__PURE__*/new THREE.Vector3();\nconst rotation = /*@__PURE__*/new THREE.Quaternion();\nconst scale = /*@__PURE__*/new THREE.Vector3();\nconst Instance = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    context,\n    children,\n    ...props\n  } = _ref;\n  React.useMemo(() => extend({\n    PositionMesh\n  }), []);\n  const group = React.useRef();\n  const {\n    subscribe,\n    getParent\n  } = React.useContext(context || globalContext);\n  React.useLayoutEffect(() => subscribe(group), []);\n  return /*#__PURE__*/React.createElement(\"positionMesh\", _extends({\n    instance: getParent(),\n    instanceKey: group,\n    ref: mergeRefs([ref, group])\n  }, props), children);\n});\nconst Instances = /*#__PURE__*/React.forwardRef((_ref2, ref) => {\n  let {\n    children,\n    range,\n    limit = 1000,\n    frames = Infinity,\n    ...props\n  } = _ref2;\n  const [{\n    context,\n    instance\n  }] = React.useState(() => {\n    const context = /*#__PURE__*/React.createContext(null);\n    return {\n      context,\n      instance: /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Instance, _extends({\n        context: context\n      }, props, {\n        ref: ref\n      })))\n    };\n  });\n  const parentRef = React.useRef(null);\n  const [instances, setInstances] = React.useState([]);\n  const [[matrices, colors]] = React.useState(() => {\n    const mArray = new Float32Array(limit * 16);\n\n    for (i = 0; i < limit; i++) tempMatrix.identity().toArray(mArray, i * 16);\n\n    return [mArray, new Float32Array([...new Array(limit * 3)].map(() => 1))];\n  });\n  React.useEffect(() => {\n    // We might be a frame too late? 🤷‍♂️\n    parentRef.current.instanceMatrix.needsUpdate = true;\n  });\n  let count = 0;\n  let updateRange = 0;\n  useFrame(() => {\n    if (frames === Infinity || count < frames) {\n      parentRef.current.updateMatrix();\n      parentRef.current.updateMatrixWorld();\n      parentMatrix.copy(parentRef.current.matrixWorld).invert();\n      updateRange = Math.min(limit, range !== undefined ? range : limit, instances.length);\n      parentRef.current.count = updateRange;\n      parentRef.current.instanceMatrix.updateRange.count = updateRange * 16;\n      parentRef.current.instanceColor.updateRange.count = updateRange * 3;\n\n      for (i = 0; i < instances.length; i++) {\n        instanceRef = instances[i].current; // Multiply the inverse of the InstancedMesh world matrix or else\n        // Instances will be double-transformed if <Instances> isn't at identity\n\n        instanceRef.matrixWorld.decompose(translation, rotation, scale);\n        instanceMatrix.compose(translation, rotation, scale).premultiply(parentMatrix);\n        instanceMatrix.toArray(matrices, i * 16);\n        parentRef.current.instanceMatrix.needsUpdate = true;\n        instanceRef.color.toArray(colors, i * 3);\n        parentRef.current.instanceColor.needsUpdate = true;\n      }\n\n      count++;\n    }\n  });\n  const api = React.useMemo(() => ({\n    getParent: () => parentRef,\n    subscribe: ref => {\n      setInstances(instances => [...instances, ref]);\n      return () => setInstances(instances => instances.filter(item => item.current !== ref.current));\n    }\n  }), []);\n  return /*#__PURE__*/React.createElement(\"instancedMesh\", _extends({\n    userData: {\n      instances\n    },\n    matrixAutoUpdate: false,\n    ref: mergeRefs([ref, parentRef]),\n    args: [null, null, 0],\n    raycast: () => null\n  }, props), /*#__PURE__*/React.createElement(\"instancedBufferAttribute\", {\n    attach: \"instanceMatrix\",\n    count: matrices.length / 16,\n    array: matrices,\n    itemSize: 16,\n    usage: THREE.DynamicDrawUsage\n  }), /*#__PURE__*/React.createElement(\"instancedBufferAttribute\", {\n    attach: \"instanceColor\",\n    count: colors.length / 3,\n    array: colors,\n    itemSize: 3,\n    usage: THREE.DynamicDrawUsage\n  }), typeof children === 'function' ? /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children(instance)) : /*#__PURE__*/React.createElement(globalContext.Provider, {\n    value: api\n  }, children));\n});\n\nfunction Merged(_ref3) {\n  let {\n    meshes,\n    children,\n    ...props\n  } = _ref3;\n  const isArray = Array.isArray(meshes); // Filter out meshes from collections, which may contain non-meshes\n\n  if (!isArray) for (const key of Object.keys(meshes)) if (!meshes[key].isMesh) delete meshes[key];\n  return /*#__PURE__*/React.createElement(Composer, {\n    components: (isArray ? meshes : Object.values(meshes)).map(_ref4 => {\n      let {\n        geometry,\n        material\n      } = _ref4;\n      return /*#__PURE__*/React.createElement(Instances, _extends({\n        key: geometry.uuid,\n        geometry: geometry,\n        material: material\n      }, props));\n    })\n  }, args => isArray ? children(...args) : children(Object.keys(meshes).filter(key => meshes[key].isMesh).reduce((acc, key, i) => ({ ...acc,\n    [key]: args[i]\n  }), {})));\n}\n\nexport { Instance, Instances, Merged };","map":{"version":3,"names":["_extends","THREE","React","extend","useFrame","mergeRefs","Composer","_instanceLocalMatrix","Matrix4","_instanceWorldMatrix","_instanceIntersects","_mesh","Mesh","PositionMesh","Group","constructor","color","Color","instance","current","undefined","instanceKey","geometry","_this$instance$curren","raycast","raycaster","intersects","parent","material","matrixWorld","instanceId","userData","instances","indexOf","count","getMatrixAt","multiplyMatrices","i","l","length","intersect","object","push","instanceRef","globalContext","createContext","parentMatrix","instanceMatrix","tempMatrix","translation","Vector3","rotation","Quaternion","scale","Instance","forwardRef","ref","context","children","props","useMemo","group","useRef","subscribe","getParent","useContext","useLayoutEffect","createElement","Instances","range","limit","frames","Infinity","useState","parentRef","setInstances","matrices","colors","mArray","Float32Array","identity","toArray","Array","map","useEffect","needsUpdate","updateRange","updateMatrix","updateMatrixWorld","copy","invert","Math","min","instanceColor","decompose","compose","premultiply","api","filter","item","matrixAutoUpdate","args","attach","array","itemSize","usage","DynamicDrawUsage","Provider","value","Merged","meshes","isArray","key","Object","keys","isMesh","components","values","uuid","reduce","acc"],"sources":["C:/Users/Asus/Documents/threejs/miro learning/20.12 neuroweb textures/node_modules/@react-three/drei/core/Instances.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport Composer from 'react-composer';\n\nconst _instanceLocalMatrix = /*@__PURE__*/new THREE.Matrix4();\n\nconst _instanceWorldMatrix = /*@__PURE__*/new THREE.Matrix4();\n\nconst _instanceIntersects = [];\n\nconst _mesh = /*@__PURE__*/new THREE.Mesh();\n\nclass PositionMesh extends THREE.Group {\n  constructor() {\n    super();\n    this.color = new THREE.Color('white');\n    this.instance = {\n      current: undefined\n    };\n    this.instanceKey = {\n      current: undefined\n    };\n  } // This will allow the virtual instance have bounds\n\n\n  get geometry() {\n    var _this$instance$curren;\n\n    return (_this$instance$curren = this.instance.current) == null ? void 0 : _this$instance$curren.geometry;\n  } // And this will allow the virtual instance to receive events\n\n\n  raycast(raycaster, intersects) {\n    const parent = this.instance.current;\n    if (!parent) return;\n    if (!parent.geometry || !parent.material) return;\n    _mesh.geometry = parent.geometry;\n    const matrixWorld = parent.matrixWorld;\n    let instanceId = parent.userData.instances.indexOf(this.instanceKey); // If the instance wasn't found or exceeds the parents draw range, bail out\n\n    if (instanceId === -1 || instanceId > parent.count) return; // calculate the world matrix for each instance\n\n    parent.getMatrixAt(instanceId, _instanceLocalMatrix);\n\n    _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\n\n\n    _mesh.matrixWorld = _instanceWorldMatrix;\n\n    _mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\n\n\n    for (let i = 0, l = _instanceIntersects.length; i < l; i++) {\n      const intersect = _instanceIntersects[i];\n      intersect.instanceId = instanceId;\n      intersect.object = this;\n      intersects.push(intersect);\n    }\n\n    _instanceIntersects.length = 0;\n  }\n\n}\n\nlet i, instanceRef;\nconst globalContext = /*@__PURE__*/React.createContext(null);\nconst parentMatrix = /*@__PURE__*/new THREE.Matrix4();\nconst instanceMatrix = /*@__PURE__*/new THREE.Matrix4();\nconst tempMatrix = /*@__PURE__*/new THREE.Matrix4();\nconst translation = /*@__PURE__*/new THREE.Vector3();\nconst rotation = /*@__PURE__*/new THREE.Quaternion();\nconst scale = /*@__PURE__*/new THREE.Vector3();\nconst Instance = /*#__PURE__*/React.forwardRef(({\n  context,\n  children,\n  ...props\n}, ref) => {\n  React.useMemo(() => extend({\n    PositionMesh\n  }), []);\n  const group = React.useRef();\n  const {\n    subscribe,\n    getParent\n  } = React.useContext(context || globalContext);\n  React.useLayoutEffect(() => subscribe(group), []);\n  return /*#__PURE__*/React.createElement(\"positionMesh\", _extends({\n    instance: getParent(),\n    instanceKey: group,\n    ref: mergeRefs([ref, group])\n  }, props), children);\n});\nconst Instances = /*#__PURE__*/React.forwardRef(({\n  children,\n  range,\n  limit = 1000,\n  frames = Infinity,\n  ...props\n}, ref) => {\n  const [{\n    context,\n    instance\n  }] = React.useState(() => {\n    const context = /*#__PURE__*/React.createContext(null);\n    return {\n      context,\n      instance: /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Instance, _extends({\n        context: context\n      }, props, {\n        ref: ref\n      })))\n    };\n  });\n  const parentRef = React.useRef(null);\n  const [instances, setInstances] = React.useState([]);\n  const [[matrices, colors]] = React.useState(() => {\n    const mArray = new Float32Array(limit * 16);\n\n    for (i = 0; i < limit; i++) tempMatrix.identity().toArray(mArray, i * 16);\n\n    return [mArray, new Float32Array([...new Array(limit * 3)].map(() => 1))];\n  });\n  React.useEffect(() => {\n    // We might be a frame too late? 🤷‍♂️\n    parentRef.current.instanceMatrix.needsUpdate = true;\n  });\n  let count = 0;\n  let updateRange = 0;\n  useFrame(() => {\n    if (frames === Infinity || count < frames) {\n      parentRef.current.updateMatrix();\n      parentRef.current.updateMatrixWorld();\n      parentMatrix.copy(parentRef.current.matrixWorld).invert();\n      updateRange = Math.min(limit, range !== undefined ? range : limit, instances.length);\n      parentRef.current.count = updateRange;\n      parentRef.current.instanceMatrix.updateRange.count = updateRange * 16;\n      parentRef.current.instanceColor.updateRange.count = updateRange * 3;\n\n      for (i = 0; i < instances.length; i++) {\n        instanceRef = instances[i].current; // Multiply the inverse of the InstancedMesh world matrix or else\n        // Instances will be double-transformed if <Instances> isn't at identity\n\n        instanceRef.matrixWorld.decompose(translation, rotation, scale);\n        instanceMatrix.compose(translation, rotation, scale).premultiply(parentMatrix);\n        instanceMatrix.toArray(matrices, i * 16);\n        parentRef.current.instanceMatrix.needsUpdate = true;\n        instanceRef.color.toArray(colors, i * 3);\n        parentRef.current.instanceColor.needsUpdate = true;\n      }\n\n      count++;\n    }\n  });\n  const api = React.useMemo(() => ({\n    getParent: () => parentRef,\n    subscribe: ref => {\n      setInstances(instances => [...instances, ref]);\n      return () => setInstances(instances => instances.filter(item => item.current !== ref.current));\n    }\n  }), []);\n  return /*#__PURE__*/React.createElement(\"instancedMesh\", _extends({\n    userData: {\n      instances\n    },\n    matrixAutoUpdate: false,\n    ref: mergeRefs([ref, parentRef]),\n    args: [null, null, 0],\n    raycast: () => null\n  }, props), /*#__PURE__*/React.createElement(\"instancedBufferAttribute\", {\n    attach: \"instanceMatrix\",\n    count: matrices.length / 16,\n    array: matrices,\n    itemSize: 16,\n    usage: THREE.DynamicDrawUsage\n  }), /*#__PURE__*/React.createElement(\"instancedBufferAttribute\", {\n    attach: \"instanceColor\",\n    count: colors.length / 3,\n    array: colors,\n    itemSize: 3,\n    usage: THREE.DynamicDrawUsage\n  }), typeof children === 'function' ? /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children(instance)) : /*#__PURE__*/React.createElement(globalContext.Provider, {\n    value: api\n  }, children));\n});\n\nfunction Merged({\n  meshes,\n  children,\n  ...props\n}) {\n  const isArray = Array.isArray(meshes); // Filter out meshes from collections, which may contain non-meshes\n\n  if (!isArray) for (const key of Object.keys(meshes)) if (!meshes[key].isMesh) delete meshes[key];\n  return /*#__PURE__*/React.createElement(Composer, {\n    components: (isArray ? meshes : Object.values(meshes)).map(({\n      geometry,\n      material\n    }) => /*#__PURE__*/React.createElement(Instances, _extends({\n      key: geometry.uuid,\n      geometry: geometry,\n      material: material\n    }, props)))\n  }, args => isArray ? children(...args) : children(Object.keys(meshes).filter(key => meshes[key].isMesh).reduce((acc, key, i) => ({ ...acc,\n    [key]: args[i]\n  }), {})));\n}\n\nexport { Instance, Instances, Merged };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}