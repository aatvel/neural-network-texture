{"ast":null,"code":"import React from 'react';\nimport { createStore } from 'redux';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Image } from 'openai';\nconst IMAGE_GENERATED = 'IMAGE_GENERATED';\nconst initialState = {\n  imageUrl: ''\n};\n\nfunction reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case IMAGE_GENERATED:\n      return { ...state,\n        imageUrl: action.imageUrl\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport const store = createStore(reducer);\nexport function generatePicture(data) {\n  console.log(data);\n  return async dispatch => {\n    const image = await Image.create(data); // const res = await openai.createImage({\n    //     prompt: data,\n    //     n: 1,\n    //     size: \"512x512\",\n    //   });\n\n    dispatch({\n      type: IMAGE_GENERATED,\n      imageUrl: image.url\n    });\n  };\n}","map":{"version":3,"names":["React","createStore","useDispatch","useSelector","Image","IMAGE_GENERATED","initialState","imageUrl","reducer","state","action","type","store","generatePicture","data","console","log","dispatch","image","create","url"],"sources":["C:/Users/Asus/Documents/threejs/miro learning/20.12 neuroweb textures/src/service.js"],"sourcesContent":["import React from 'react';\r\nimport { createStore } from 'redux';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Image } from 'openai';\r\n\r\nconst IMAGE_GENERATED = 'IMAGE_GENERATED';\r\n\r\nconst initialState = {\r\n  imageUrl: '',\r\n};\r\n\r\nfunction reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case IMAGE_GENERATED:\r\n      return {\r\n        ...state,\r\n        imageUrl: action.imageUrl,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const store = createStore(reducer);\r\n\r\nexport function generatePicture(data) {\r\n    console.log(data)\r\n  return async (dispatch) => {\r\n    const image = await Image.create(data);\r\n    // const res = await openai.createImage({\r\n    //     prompt: data,\r\n    //     n: 1,\r\n    //     size: \"512x512\",\r\n    //   });\r\n    dispatch({ type: IMAGE_GENERATED, imageUrl: image.url });\r\n  };\r\n}"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,KAAT,QAAsB,QAAtB;AAEA,MAAMC,eAAe,GAAG,iBAAxB;AAEA,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE;AADS,CAArB;;AAIA,SAASC,OAAT,GAA+C;EAAA,IAA9BC,KAA8B,uEAAtBH,YAAsB;EAAA,IAARI,MAAQ;;EAC7C,QAAQA,MAAM,CAACC,IAAf;IACE,KAAKN,eAAL;MACE,OAAO,EACL,GAAGI,KADE;QAELF,QAAQ,EAAEG,MAAM,CAACH;MAFZ,CAAP;;IAIF;MACE,OAAOE,KAAP;EAPJ;AASD;;AAED,OAAO,MAAMG,KAAK,GAAGX,WAAW,CAACO,OAAD,CAAzB;AAEP,OAAO,SAASK,eAAT,CAAyBC,IAAzB,EAA+B;EAClCC,OAAO,CAACC,GAAR,CAAYF,IAAZ;EACF,OAAO,MAAOG,QAAP,IAAoB;IACzB,MAAMC,KAAK,GAAG,MAAMd,KAAK,CAACe,MAAN,CAAaL,IAAb,CAApB,CADyB,CAEzB;IACA;IACA;IACA;IACA;;IACAG,QAAQ,CAAC;MAAEN,IAAI,EAAEN,eAAR;MAAyBE,QAAQ,EAAEW,KAAK,CAACE;IAAzC,CAAD,CAAR;EACD,CARD;AASD"},"metadata":{},"sourceType":"module"}