{"ast":null,"code":"/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n * Client module\n *\n * This module contains the factory method for creating Client classes, and the\n * method calling code for all types of methods.\n *\n * @example <caption>Create a client and call a method on it</caption>\n *\n * var proto_obj = grpc.load(proto_file_path);\n * var Client = proto_obj.package.subpackage.ServiceName;\n * var client = new Client(server_address, client_credentials);\n * var call = client.unaryMethod(arguments, callback);\n */\n'use strict';\n\nvar client_interceptors = require('./client_interceptors');\n\nvar grpc = require('./grpc_extension');\n\nvar common = require('./common');\n\nvar Metadata = require('./metadata');\n\nvar constants = require('./constants');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar stream = require('stream');\n\nvar Readable = stream.Readable;\nvar Writable = stream.Writable;\nvar Duplex = stream.Duplex;\nvar methodTypes = constants.methodTypes;\n\nvar util = require('util');\n\nvar version = require('../package.json').version;\n/**\n * Initial response metadata sent by the server when it starts processing the\n * call\n * @event grpc~ClientUnaryCall#metadata\n * @type {grpc.Metadata}\n */\n\n/**\n * Status of the call when it has completed.\n * @event grpc~ClientUnaryCall#status\n * @type grpc~StatusObject\n */\n\n\nutil.inherits(ClientUnaryCall, EventEmitter);\n/**\n * An EventEmitter. Used for unary calls.\n * @constructor grpc~ClientUnaryCall\n * @extends external:EventEmitter\n * @param {grpc.internal~Call} call The call object associated with the request\n */\n\nfunction ClientUnaryCall(call) {\n  EventEmitter.call(this);\n  this.call = call;\n}\n\nutil.inherits(ClientWritableStream, Writable);\n/**\n * A stream that the client can write to. Used for calls that are streaming from\n * the client side.\n * @constructor grpc~ClientWritableStream\n * @extends external:Writable\n * @borrows grpc~ClientUnaryCall#cancel as grpc~ClientWritableStream#cancel\n * @borrows grpc~ClientUnaryCall#getPeer as grpc~ClientWritableStream#getPeer\n * @borrows grpc~ClientUnaryCall#event:metadata as\n *     grpc~ClientWritableStream#metadata\n * @borrows grpc~ClientUnaryCall#event:status as\n *     grpc~ClientWritableStream#status\n * @param {InterceptingCall} call Exposes gRPC request operations, processed by\n *     an interceptor stack.\n */\n\nfunction ClientWritableStream(call) {\n  Writable.call(this, {\n    objectMode: true\n  });\n  this.call = call;\n  var self = this;\n  this.on('finish', function () {\n    self.call.halfClose();\n  });\n}\n/**\n * Write a message to the request stream. If serializing the argument fails,\n * the call will be cancelled and the stream will end with an error.\n * @name grpc~ClientWritableStream#write\n * @kind function\n * @override\n * @param {*} message The message to write. Must be a valid argument to the\n *     serialize function of the corresponding method\n * @param {grpc.writeFlags} flags Flags to modify how the message is written\n * @param {Function} callback Callback for when this chunk of data is flushed\n * @return {boolean} As defined for [Writable]{@link external:Writable}\n */\n\n/**\n * Attempt to write the given chunk. Calls the callback when done. This is an\n * implementation of a method needed for implementing stream.Writable.\n * @private\n * @param {*} chunk The chunk to write\n * @param {grpc.writeFlags} encoding Used to pass write flags\n * @param {function(Error=)} callback Called when the write is complete\n */\n\n\nfunction _write(chunk, encoding, callback) {\n  /* jshint validthis: true */\n  var self = this;\n\n  if (this.writeFailed) {\n    /* Once a write fails, just call the callback immediately to let the caller\n       flush any pending writes. */\n    setImmediate(callback);\n    return;\n  }\n\n  var outerCallback = function (err, event) {\n    if (err) {\n      /* Assume that the call is complete and that writing failed because a\n         status was received. In that case, set a flag to discard all future\n         writes */\n      self.writeFailed = true;\n    }\n\n    callback();\n  };\n\n  var context = {\n    encoding: encoding,\n    callback: outerCallback\n  };\n  this.call.sendMessageWithContext(context, chunk);\n}\n\nClientWritableStream.prototype._write = _write;\nutil.inherits(ClientReadableStream, Readable);\n/**\n * A stream that the client can read from. Used for calls that are streaming\n * from the server side.\n * @constructor grpc~ClientReadableStream\n * @extends external:Readable\n * @borrows grpc~ClientUnaryCall#cancel as grpc~ClientReadableStream#cancel\n * @borrows grpc~ClientUnaryCall#getPeer as grpc~ClientReadableStream#getPeer\n * @borrows grpc~ClientUnaryCall#event:metadata as\n *     grpc~ClientReadableStream#metadata\n * @borrows grpc~ClientUnaryCall#event:status as\n *     grpc~ClientReadableStream#status\n * @param {InterceptingCall} call Exposes gRPC request operations, processed by\n *     an interceptor stack.\n */\n\nfunction ClientReadableStream(call) {\n  Readable.call(this, {\n    objectMode: true\n  });\n  this.call = call;\n  this.finished = false;\n  this.reading = false;\n  /* Status generated from reading messages from the server. Overrides the\n   * status from the server if not OK */\n\n  this.read_status = null;\n  /* Status received from the server. */\n\n  this.received_status = null;\n}\n/**\n * Called when all messages from the server have been processed. The status\n * parameter indicates that the call should end with that status. status\n * defaults to OK if not provided.\n * @param {Object!} status The status that the call should end with\n * @private\n */\n\n\nfunction _readsDone(status) {\n  /* jshint validthis: true */\n  if (!status) {\n    status = {\n      code: constants.status.OK,\n      details: 'OK'\n    };\n  }\n\n  if (status.code !== constants.status.OK) {\n    this.call.cancelWithStatus(status.code, status.details);\n  }\n\n  this.finished = true;\n  this.read_status = status;\n\n  this._emitStatusIfDone();\n}\n\nClientReadableStream.prototype._readsDone = _readsDone;\n/**\n * Called to indicate that we have received a status from the server.\n * @private\n */\n\nfunction _receiveStatus(status) {\n  /* jshint validthis: true */\n  this.received_status = status;\n\n  this._emitStatusIfDone();\n}\n\nClientReadableStream.prototype._receiveStatus = _receiveStatus;\n/**\n * If we have both processed all incoming messages and received the status from\n * the server, emit the status. Otherwise, do nothing.\n * @private\n */\n\nfunction _emitStatusIfDone() {\n  /* jshint validthis: true */\n  var status;\n\n  if (this.read_status && this.received_status) {\n    if (this.read_status.code !== constants.status.OK) {\n      status = this.read_status;\n    } else {\n      status = this.received_status;\n    }\n\n    if (status.code === constants.status.OK) {\n      this.push(null);\n    } else {\n      var error = common.createStatusError(status);\n      this.emit('error', error);\n    }\n\n    this.emit('status', status);\n  }\n}\n\nClientReadableStream.prototype._emitStatusIfDone = _emitStatusIfDone;\n/**\n * Read the next object from the stream.\n * @private\n * @param {*} size Ignored because we use objectMode=true\n */\n\nfunction _read(size) {\n  /* jshint validthis: true */\n  if (this.finished) {\n    this.push(null);\n  } else {\n    if (!this.reading) {\n      this.reading = true;\n      var context = {\n        stream: this\n      };\n      this.call.recvMessageWithContext(context);\n    }\n  }\n}\n\nClientReadableStream.prototype._read = _read;\nutil.inherits(ClientDuplexStream, Duplex);\n/**\n * A stream that the client can read from or write to. Used for calls with\n * duplex streaming.\n * @constructor grpc~ClientDuplexStream\n * @extends external:Duplex\n * @borrows grpc~ClientUnaryCall#cancel as grpc~ClientDuplexStream#cancel\n * @borrows grpc~ClientUnaryCall#getPeer as grpc~ClientDuplexStream#getPeer\n * @borrows grpc~ClientWritableStream#write as grpc~ClientDuplexStream#write\n * @borrows grpc~ClientUnaryCall#event:metadata as\n *     grpc~ClientDuplexStream#metadata\n * @borrows grpc~ClientUnaryCall#event:status as\n *     grpc~ClientDuplexStream#status\n * @param {InterceptingCall} call Exposes gRPC request operations, processed by\n *     an interceptor stack.\n */\n\nfunction ClientDuplexStream(call) {\n  Duplex.call(this, {\n    objectMode: true\n  });\n  this.call = call;\n  /* Status generated from reading messages from the server. Overrides the\n   * status from the server if not OK */\n\n  this.read_status = null;\n  /* Status received from the server. */\n\n  this.received_status = null;\n  var self = this;\n  this.on('finish', function () {\n    self.call.halfClose();\n  });\n}\n\nClientDuplexStream.prototype._readsDone = _readsDone;\nClientDuplexStream.prototype._receiveStatus = _receiveStatus;\nClientDuplexStream.prototype._emitStatusIfDone = _emitStatusIfDone;\nClientDuplexStream.prototype._read = _read;\nClientDuplexStream.prototype._write = _write;\n/**\n * Cancel the ongoing call. Results in the call ending with a CANCELLED status,\n * unless it has already ended with some other status.\n * @alias grpc~ClientUnaryCall#cancel\n */\n\nfunction cancel() {\n  /* jshint validthis: true */\n  this.call.cancel();\n}\n\nClientUnaryCall.prototype.cancel = cancel;\nClientReadableStream.prototype.cancel = cancel;\nClientWritableStream.prototype.cancel = cancel;\nClientDuplexStream.prototype.cancel = cancel;\n/**\n * Get the endpoint this call/stream is connected to.\n * @return {string} The URI of the endpoint\n * @alias grpc~ClientUnaryCall#getPeer\n */\n\nfunction getPeer() {\n  /* jshint validthis: true */\n  return this.call.getPeer();\n}\n\nClientUnaryCall.prototype.getPeer = getPeer;\nClientReadableStream.prototype.getPeer = getPeer;\nClientWritableStream.prototype.getPeer = getPeer;\nClientDuplexStream.prototype.getPeer = getPeer;\n/**\n * Any client call type\n * @typedef {(grpc~ClientUnaryCall|grpc~ClientReadableStream|\n *            grpc~ClientWritableStream|grpc~ClientDuplexStream)}\n *     grpc.Client~Call\n */\n\n/**\n * Options that can be set on a call.\n * @typedef {Object} grpc.Client~CallOptions\n * @property {grpc~Deadline} deadline The deadline for the entire call to\n *     complete.\n * @property {string} host Server hostname to set on the call. Only meaningful\n *     if different from the server address used to construct the client.\n * @property {grpc.Client~Call} parent Parent call. Used in servers when\n *     making a call as part of the process of handling a call. Used to\n *     propagate some information automatically, as specified by\n *     propagate_flags.\n * @property {number} propagate_flags Indicates which properties of a parent\n *     call should propagate to this call. Bitwise combination of flags in\n *     {@link grpc.propagate}.\n * @property {grpc.credentials~CallCredentials} credentials The credentials that\n *     should be used to make this particular call.\n */\n\n/**\n * Properties of a call, for use with a {@link grpc.Client~callInvocationTransformer}.\n * @typedef {Object} grpc.Client~CallProperties\n * @property {*} argument The call argument. Only preset if the method is unary or server streaming.\n * @property {grpc.Metadata} metadata The request metadata\n * @property {grpc~Call} call The call object that will be returned by the client method\n * @property {grpc.Channel} channel The channel that will be used to make a request\n * @property {grpc~MethodDefinition} methodDefinition The MethodDefinition object that describes this method\n * @property {grpc.Client~CallOptions} options The call options passed when making this request\n * @property {grpc.Client~requestCallback} callback The callback that will handle the response.\n *     Only present if this method is unary or client streaming.\n */\n\n/**\n * Call invocation transformer. Has access to the full call properties before a\n * call is processed and can modify most of those properties. Some modifications\n * will have no effect or may cause problems.\n * @name grpc.Client~callInvocationTransformer\n * @function\n * @param {grpc.Client~CallProperties} callProperties The original call properties\n * @return {grpc.Client~CallProperties} The modified call properties.\n */\n\n/**\n * A function that functionally replaces the Channel constructor.\n * @name grpc.Client~channelFactory\n * @function\n * @param {string} target The address of the server to connect to\n * @param {grpc.ChannelCredentials} credentials Channel credentials to use when connecting\n * @param {grpc~ChannelOptions} options A map of channel options that will be passed to the core.\n *     The available options are listed in\n *     [this document]{@link https://grpc.github.io/grpc/core/group__grpc__arg__keys.html}.\n * @returns {grpc.Channel} This can either be an actual channel object, or an object with the\n *     same API.\n */\n\n/**\n * A generic gRPC client. Primarily useful as a base class for generated clients\n * @memberof grpc\n * @constructor\n * @param {string} address Server address to connect to\n * @param {grpc.credentials~ChannelCredentials} credentials Credentials to use\n *     to connect to the server\n * @param {Object} options Options to apply to channel creation. Any of\n *     [the channel arguments]{@link https://grpc.github.io/grpc/core/group__grpc__arg__keys.html}\n *     can be used here in addition to specific client options.\n * @param {grpc~Interceptor[]} [options.interceptors] Interceptors to apply to each request\n * @param {grpc~InterceptorProvider[]} [options.interceptor_providers] Interceptor providers\n *     to apply interceptors to each request depending on the method definition. At most\n *     one of the interceptors and interceptor_providers options may be set.\n * @param {grpc.Client~callInvocationTransformer=} options.callInvocationTransformer\n * @param {grpc.Channel=} options.channelOverride Channel to use instead of constructing a new one.\n *     If set, the address, credentials, channel arguments options, and channelFactoryOverride\n *     option will all be ignored.\n * @param {grpc.Client~channelFactory} options.channelFactoryOverride Function to use instead of\n *     the Channel constructor when creating the Client's channel.\n */\n\nfunction Client(address, credentials, options) {\n  var self = this;\n\n  if (!options) {\n    options = {};\n  } // Resolve interceptor options and assign interceptors to each method\n\n\n  if (Array.isArray(options.interceptor_providers) && Array.isArray(options.interceptors)) {\n    throw new client_interceptors.InterceptorConfigurationError('Both interceptors and interceptor_providers were passed as options ' + 'to the client constructor. Only one of these is allowed.');\n  }\n\n  self.$interceptors = options.interceptors || [];\n  self.$interceptor_providers = options.interceptor_providers || [];\n\n  if (self.$method_definitions) {\n    Object.keys(self.$method_definitions).forEach(method_name => {\n      const method_definition = self.$method_definitions[method_name];\n      self[method_name].interceptors = client_interceptors.resolveInterceptorProviders(self.$interceptor_providers, method_definition).concat(self.$interceptors);\n    });\n  }\n\n  this.$callInvocationTransformer = options.callInvocationTransformer;\n  let channelOverride = options.channelOverride;\n  let channelFactoryOverride = options.channelFactoryOverride; // Exclude channel options which have already been consumed\n\n  const ignoredKeys = ['interceptors', 'interceptor_providers', 'channelOverride', 'channelFactoryOverride', 'callInvocationTransformer'];\n  var channel_options = Object.getOwnPropertyNames(options).reduce((acc, key) => {\n    if (ignoredKeys.indexOf(key) === -1) {\n      acc[key] = options[key];\n    }\n\n    return acc;\n  }, {});\n  /* Private fields use $ as a prefix instead of _ because it is an invalid\n   * prefix of a method name */\n\n  if (channelOverride) {\n    this.$channel = options.channelOverride;\n  } else {\n    if (channelFactoryOverride) {\n      this.$channel = channelFactoryOverride(address, credentials, channel_options);\n    } else {\n      this.$channel = new grpc.Channel(address, credentials, channel_options);\n    }\n  }\n}\n\nexports.Client = Client;\n\nClient.prototype.resolveCallInterceptors = function (method_definition, interceptors, interceptor_providers) {\n  if (Array.isArray(interceptors) && Array.isArray(interceptor_providers)) {\n    throw new client_interceptors.InterceptorConfigurationError('Both interceptors and interceptor_providers were passed as call ' + 'options. Only one of these is allowed.');\n  }\n\n  if (Array.isArray(interceptors) || Array.isArray(interceptor_providers)) {\n    interceptors = interceptors || [];\n    interceptor_providers = interceptor_providers || [];\n    return client_interceptors.resolveInterceptorProviders(interceptor_providers, method_definition).concat(interceptors);\n  } else {\n    return client_interceptors.resolveInterceptorProviders(this.$interceptor_providers, method_definition).concat(this.$interceptors);\n  }\n};\n/**\n * @callback grpc.Client~requestCallback\n * @param {?grpc~ServiceError} error The error, if the call\n *     failed\n * @param {*} value The response value, if the call succeeded\n */\n\n/**\n * Make a unary request to the given method, using the given serialize\n * and deserialize functions, with the given argument.\n * @param {string} path The path of the method to request\n * @param {grpc~serialize} serialize The serialization function for\n *     inputs\n * @param {grpc~deserialize} deserialize The deserialization\n *     function for outputs\n * @param {*} argument The argument to the call. Should be serializable with\n *     serialize\n * @param {grpc.Metadata=} metadata Metadata to add to the call\n * @param {grpc.Client~CallOptions=} options Options map\n * @param {grpc.Client~requestCallback} callback The callback\n *     for when the response is received\n * @return {grpc~ClientUnaryCall} An event emitter for stream related events\n */\n\n\nClient.prototype.makeUnaryRequest = function (path, serialize, deserialize, argument, metadata, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n\n    if (metadata instanceof Metadata) {\n      options = {};\n    } else {\n      options = metadata;\n      metadata = new Metadata();\n    }\n  } else if (typeof metadata === 'function') {\n    callback = metadata;\n    metadata = new Metadata();\n    options = {};\n  }\n\n  if (!metadata) {\n    metadata = new Metadata();\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  if (!(metadata instanceof Metadata && options instanceof Object && typeof callback === 'function')) {\n    throw new Error('Argument mismatch in makeUnaryRequest');\n  }\n\n  var method_definition = options.method_definition = {\n    path: path,\n    requestStream: false,\n    responseStream: false,\n    requestSerialize: serialize,\n    responseDeserialize: deserialize\n  };\n  metadata = metadata.clone();\n  var callProperties = {\n    argument: argument,\n    metadata: metadata,\n    call: new ClientUnaryCall(),\n    channel: this.$channel,\n    methodDefinition: method_definition,\n    callOptions: options,\n    callback: callback\n  }; // Transform call properties if specified.\n\n  if (this.$callInvocationTransformer) {\n    callProperties = this.$callInvocationTransformer(callProperties);\n  }\n\n  var callOptions = callProperties.callOptions;\n  var methodDefinition = callProperties.methodDefinition;\n  var interceptors = Client.prototype.resolveCallInterceptors.call(this, methodDefinition, callOptions.interceptors, callOptions.interceptor_providers);\n  var intercepting_call = client_interceptors.getInterceptingCall(methodDefinition, callOptions, interceptors, callProperties.channel, callProperties.callback);\n  var emitter = callProperties.call;\n  emitter.call = intercepting_call;\n  var last_listener = client_interceptors.getLastListener(methodDefinition, emitter, callProperties.callback);\n  intercepting_call.start(callProperties.metadata, last_listener);\n  intercepting_call.sendMessage(callProperties.argument);\n  intercepting_call.halfClose();\n  return emitter;\n};\n/**\n * Make a client stream request to the given method, using the given serialize\n * and deserialize functions, with the given argument.\n * @param {string} path The path of the method to request\n * @param {grpc~serialize} serialize The serialization function for\n *     inputs\n * @param {grpc~deserialize} deserialize The deserialization\n *     function for outputs\n * @param {grpc.Metadata=} metadata Array of metadata key/value pairs to add to\n *     the call\n * @param {grpc.Client~CallOptions=} options Options map\n * @param {grpc.Client~requestCallback} callback The callback for when the\n *     response is received\n * @return {grpc~ClientWritableStream} An event emitter for stream related\n *     events\n */\n\n\nClient.prototype.makeClientStreamRequest = function (path, serialize, deserialize, metadata, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n\n    if (metadata instanceof Metadata) {\n      options = {};\n    } else {\n      options = metadata;\n      metadata = new Metadata();\n    }\n  } else if (typeof metadata === 'function') {\n    callback = metadata;\n    metadata = new Metadata();\n    options = {};\n  }\n\n  if (!metadata) {\n    metadata = new Metadata();\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  if (!(metadata instanceof Metadata && options instanceof Object && typeof callback === 'function')) {\n    throw new Error('Argument mismatch in makeClientStreamRequest');\n  }\n\n  var method_definition = options.method_definition = {\n    path: path,\n    requestStream: true,\n    responseStream: false,\n    requestSerialize: serialize,\n    responseDeserialize: deserialize\n  };\n  metadata = metadata.clone();\n  var callProperties = {\n    metadata: metadata,\n    call: new ClientWritableStream(),\n    channel: this.$channel,\n    methodDefinition: method_definition,\n    callOptions: options,\n    callback: callback\n  }; // Transform call properties if specified.\n\n  if (this.$callInvocationTransformer) {\n    callProperties = this.$callInvocationTransformer(callProperties);\n  }\n\n  var callOptions = callProperties.callOptions;\n  var methodDefinition = callProperties.methodDefinition;\n  var interceptors = Client.prototype.resolveCallInterceptors.call(this, methodDefinition, callOptions.interceptors, callOptions.interceptor_providers);\n  var intercepting_call = client_interceptors.getInterceptingCall(methodDefinition, callOptions, interceptors, callProperties.channel, callProperties.callback);\n  var emitter = callProperties.call;\n  emitter.call = intercepting_call;\n  var last_listener = client_interceptors.getLastListener(methodDefinition, emitter, callProperties.callback);\n  intercepting_call.start(callProperties.metadata, last_listener);\n  return emitter;\n};\n/**\n * Make a server stream request to the given method, with the given serialize\n * and deserialize function, using the given argument\n * @param {string} path The path of the method to request\n * @param {grpc~serialize} serialize The serialization function for inputs\n * @param {grpc~deserialize} deserialize The deserialization\n *     function for outputs\n * @param {*} argument The argument to the call. Should be serializable with\n *     serialize\n * @param {grpc.Metadata=} metadata Array of metadata key/value pairs to add to\n *     the call\n * @param {grpc.Client~CallOptions=} options Options map\n * @return {grpc~ClientReadableStream} An event emitter for stream related\n *     events\n */\n\n\nClient.prototype.makeServerStreamRequest = function (path, serialize, deserialize, argument, metadata, options) {\n  if (!(metadata instanceof Metadata)) {\n    options = metadata;\n    metadata = new Metadata();\n  }\n\n  if (!(options instanceof Object)) {\n    options = {};\n  }\n\n  if (!(metadata instanceof Metadata && options instanceof Object)) {\n    throw new Error('Argument mismatch in makeServerStreamRequest');\n  }\n\n  var method_definition = options.method_definition = {\n    path: path,\n    requestStream: false,\n    responseStream: true,\n    requestSerialize: serialize,\n    responseDeserialize: deserialize\n  };\n  metadata = metadata.clone();\n  var callProperties = {\n    argument: argument,\n    metadata: metadata,\n    call: new ClientReadableStream(),\n    channel: this.$channel,\n    methodDefinition: method_definition,\n    callOptions: options\n  }; // Transform call properties if specified.\n\n  if (this.$callInvocationTransformer) {\n    callProperties = this.$callInvocationTransformer(callProperties);\n  }\n\n  var callOptions = callProperties.callOptions;\n  var methodDefinition = callProperties.methodDefinition;\n  var interceptors = Client.prototype.resolveCallInterceptors.call(this, methodDefinition, callOptions.interceptors, callOptions.interceptor_providers);\n  var emitter = callProperties.call;\n  var intercepting_call = client_interceptors.getInterceptingCall(methodDefinition, callOptions, interceptors, callProperties.channel, emitter);\n  emitter.call = intercepting_call;\n  var last_listener = client_interceptors.getLastListener(methodDefinition, emitter);\n  intercepting_call.start(callProperties.metadata, last_listener);\n  intercepting_call.sendMessage(callProperties.argument);\n  intercepting_call.halfClose();\n  return emitter;\n};\n/**\n * Make a bidirectional stream request with this method on the given channel.\n * @param {string} path The path of the method to request\n * @param {grpc~serialize} serialize The serialization function for inputs\n * @param {grpc~deserialize} deserialize The deserialization\n *     function for outputs\n * @param {grpc.Metadata=} metadata Array of metadata key/value\n *     pairs to add to the call\n * @param {grpc.Client~CallOptions=} options Options map\n * @return {grpc~ClientDuplexStream} An event emitter for stream related events\n */\n\n\nClient.prototype.makeBidiStreamRequest = function (path, serialize, deserialize, metadata, options) {\n  if (!(metadata instanceof Metadata)) {\n    options = metadata;\n    metadata = new Metadata();\n  }\n\n  if (!(options instanceof Object)) {\n    options = {};\n  }\n\n  if (!(metadata instanceof Metadata && options instanceof Object)) {\n    throw new Error('Argument mismatch in makeBidiStreamRequest');\n  }\n\n  var method_definition = options.method_definition = {\n    path: path,\n    requestStream: true,\n    responseStream: true,\n    requestSerialize: serialize,\n    responseDeserialize: deserialize\n  };\n  metadata = metadata.clone();\n  var callProperties = {\n    metadata: metadata,\n    call: new ClientDuplexStream(),\n    channel: this.$channel,\n    methodDefinition: method_definition,\n    callOptions: options\n  }; // Transform call properties if specified.\n\n  if (this.$callInvocationTransformer) {\n    callProperties = this.$callInvocationTransformer(callProperties);\n  }\n\n  var callOptions = callProperties.callOptions;\n  var methodDefinition = callProperties.methodDefinition;\n  var interceptors = Client.prototype.resolveCallInterceptors.call(this, methodDefinition, callOptions.interceptors, callOptions.interceptor_providers);\n  var emitter = callProperties.call;\n  var intercepting_call = client_interceptors.getInterceptingCall(methodDefinition, callOptions, interceptors, callProperties.channel, emitter);\n  emitter.call = intercepting_call;\n  var last_listener = client_interceptors.getLastListener(methodDefinition, emitter);\n  intercepting_call.start(callProperties.metadata, last_listener);\n  return emitter;\n};\n/**\n * Close this client.\n */\n\n\nClient.prototype.close = function () {\n  this.$channel.close();\n};\n/**\n * Return the underlying channel object for the specified client\n * @return {Channel} The channel\n */\n\n\nClient.prototype.getChannel = function () {\n  return this.$channel;\n};\n/**\n * Wait for the client to be ready. The callback will be called when the\n * client has successfully connected to the server, and it will be called\n * with an error if the attempt to connect to the server has unrecoverablly\n * failed or if the deadline expires. This function will make the channel\n * start connecting if it has not already done so.\n * @param {grpc~Deadline} deadline When to stop waiting for a connection.\n * @param {function(Error)} callback The callback to call when done attempting\n *     to connect.\n */\n\n\nClient.prototype.waitForReady = function (deadline, callback) {\n  var self = this;\n\n  var checkState = function (err) {\n    if (err) {\n      callback(new Error('Failed to connect before the deadline'));\n      return;\n    }\n\n    var new_state;\n\n    try {\n      new_state = self.$channel.getConnectivityState(true);\n    } catch (e) {\n      callback(new Error('The channel has been closed'));\n      return;\n    }\n\n    if (new_state === grpc.connectivityState.READY) {\n      callback();\n    } else if (new_state === grpc.connectivityState.FATAL_FAILURE) {\n      callback(new Error('Failed to connect to server'));\n    } else {\n      try {\n        self.$channel.watchConnectivityState(new_state, deadline, checkState);\n      } catch (e) {\n        callback(new Error('The channel has been closed'));\n      }\n    }\n  };\n  /* Force a single round of polling to ensure that the channel state is up\n   * to date */\n\n\n  grpc.forcePoll();\n  setImmediate(checkState);\n};\n/**\n * Map with short names for each of the requester maker functions. Used in\n * makeClientConstructor\n * @private\n */\n\n\nvar requester_funcs = {\n  [methodTypes.UNARY]: Client.prototype.makeUnaryRequest,\n  [methodTypes.CLIENT_STREAMING]: Client.prototype.makeClientStreamRequest,\n  [methodTypes.SERVER_STREAMING]: Client.prototype.makeServerStreamRequest,\n  [methodTypes.BIDI_STREAMING]: Client.prototype.makeBidiStreamRequest\n};\n\nfunction getDefaultValues(metadata, options) {\n  var res = {};\n  res.metadata = metadata || new Metadata();\n  res.options = options || {};\n  return res;\n}\n/**\n * Map with wrappers for each type of requester function to make it use the old\n * argument order with optional arguments after the callback.\n * @access private\n */\n\n\nvar deprecated_request_wrap = {\n  [methodTypes.UNARY]: function (makeUnaryRequest) {\n    return function makeWrappedUnaryRequest(argument, callback, metadata, options) {\n      /* jshint validthis: true */\n      var opt_args = getDefaultValues(metadata, options);\n      return makeUnaryRequest.call(this, argument, opt_args.metadata, opt_args.options, callback);\n    };\n  },\n  [methodTypes.CLIENT_STREAMING]: function (makeServerStreamRequest) {\n    return function makeWrappedClientStreamRequest(callback, metadata, options) {\n      /* jshint validthis: true */\n      var opt_args = getDefaultValues(metadata, options);\n      return makeServerStreamRequest.call(this, opt_args.metadata, opt_args.options, callback);\n    };\n  },\n  [methodTypes.SERVER_STREAMING]: x => x,\n  [methodTypes.BIDI_STREAMING]: x => x\n};\n/**\n * Creates a constructor for a client with the given methods, as specified in\n * the methods argument. The resulting class will have an instance method for\n * each method in the service, which is a partial application of one of the\n * [Client]{@link grpc.Client} request methods, depending on `requestSerialize`\n * and `responseSerialize`, with the `method`, `serialize`, and `deserialize`\n * arguments predefined.\n * @memberof grpc\n * @alias grpc~makeGenericClientConstructor\n * @param {grpc~ServiceDefinition} methods An object mapping method names to\n *     method attributes\n * @param {string} serviceName The fully qualified name of the service\n * @param {Object} class_options An options object.\n * @param {boolean=} [class_options.deprecatedArgumentOrder=false] Indicates\n *     that the old argument order should be used for methods, with optional\n *     arguments at the end instead of the callback at the end. This option\n *     is only a temporary stopgap measure to smooth an API breakage.\n *     It is deprecated, and new code should not use it.\n * @return {function} New client constructor, which is a subclass of\n *     {@link grpc.Client}, and has the same arguments as that constructor.\n */\n\nexports.makeClientConstructor = function (methods, serviceName, class_options) {\n  if (!class_options) {\n    class_options = {};\n  }\n\n  function ServiceClient(address, credentials, options) {\n    Client.call(this, address, credentials, options);\n  }\n\n  util.inherits(ServiceClient, Client);\n  ServiceClient.prototype.$method_definitions = methods;\n  ServiceClient.prototype.$method_names = {};\n  Object.keys(methods).forEach(name => {\n    const attrs = methods[name];\n\n    if (common.isPrototypePolluted(name)) {\n      return;\n    }\n\n    if (name.indexOf('$') === 0) {\n      throw new Error('Method names cannot start with $');\n    }\n\n    var method_type = common.getMethodType(attrs);\n\n    var method_func = function () {\n      return requester_funcs[method_type].apply(this, [attrs.path, attrs.requestSerialize, attrs.responseDeserialize].concat([].slice.call(arguments)));\n    };\n\n    if (class_options.deprecatedArgumentOrder) {\n      ServiceClient.prototype[name] = deprecated_request_wrap[method_type](method_func);\n    } else {\n      ServiceClient.prototype[name] = method_func;\n    }\n\n    ServiceClient.prototype.$method_names[attrs.path] = name; // Associate all provided attributes with the method\n\n    Object.assign(ServiceClient.prototype[name], attrs);\n\n    if (attrs.originalName && !common.isPrototypePolluted(attrs.originalName)) {\n      ServiceClient.prototype[attrs.originalName] = ServiceClient.prototype[name];\n    }\n  });\n  ServiceClient.service = methods;\n  return ServiceClient;\n};\n/**\n * Return the underlying channel object for the specified client\n * @memberof grpc\n * @alias grpc~getClientChannel\n * @param {grpc.Client} client The client\n * @return {Channel} The channel\n * @see grpc.Client#getChannel\n */\n\n\nexports.getClientChannel = function (client) {\n  return Client.prototype.getChannel.call(client);\n};\n/**\n * Gets a map of client method names to interceptor stacks.\n * @param {grpc.Client} client\n * @returns {Object.<string, Interceptor[]>}\n */\n\n\nexports.getClientInterceptors = function (client) {\n  return Object.keys(client.$method_definitions).reduce((acc, key) => {\n    if (typeof key === 'string') {\n      acc[key] = client[key].interceptors;\n    }\n\n    return acc;\n  }, {});\n};\n/**\n * Wait for the client to be ready. The callback will be called when the\n * client has successfully connected to the server, and it will be called\n * with an error if the attempt to connect to the server has unrecoverablly\n * failed or if the deadline expires. This function will make the channel\n * start connecting if it has not already done so.\n * @memberof grpc\n * @alias grpc~waitForClientReady\n * @param {grpc.Client} client The client to wait on\n * @param {grpc~Deadline} deadline When to stop waiting for a connection. Pass\n *     Infinity to wait forever.\n * @param {function(Error)} callback The callback to call when done attempting\n *     to connect.\n * @see grpc.Client#waitForReady\n */\n\n\nexports.waitForClientReady = function (client, deadline, callback) {\n  Client.prototype.waitForReady.call(client, deadline, callback);\n};\n\nexports.StatusBuilder = client_interceptors.StatusBuilder;\nexports.ListenerBuilder = client_interceptors.ListenerBuilder;\nexports.RequesterBuilder = client_interceptors.RequesterBuilder;\nexports.InterceptingCall = client_interceptors.InterceptingCall;","map":{"version":3,"names":["client_interceptors","require","grpc","common","Metadata","constants","EventEmitter","stream","Readable","Writable","Duplex","methodTypes","util","version","inherits","ClientUnaryCall","call","ClientWritableStream","objectMode","self","on","halfClose","_write","chunk","encoding","callback","writeFailed","setImmediate","outerCallback","err","event","context","sendMessageWithContext","prototype","ClientReadableStream","finished","reading","read_status","received_status","_readsDone","status","code","OK","details","cancelWithStatus","_emitStatusIfDone","_receiveStatus","push","error","createStatusError","emit","_read","size","recvMessageWithContext","ClientDuplexStream","cancel","getPeer","Client","address","credentials","options","Array","isArray","interceptor_providers","interceptors","InterceptorConfigurationError","$interceptors","$interceptor_providers","$method_definitions","Object","keys","forEach","method_name","method_definition","resolveInterceptorProviders","concat","$callInvocationTransformer","callInvocationTransformer","channelOverride","channelFactoryOverride","ignoredKeys","channel_options","getOwnPropertyNames","reduce","acc","key","indexOf","$channel","Channel","exports","resolveCallInterceptors","makeUnaryRequest","path","serialize","deserialize","argument","metadata","Error","requestStream","responseStream","requestSerialize","responseDeserialize","clone","callProperties","channel","methodDefinition","callOptions","intercepting_call","getInterceptingCall","emitter","last_listener","getLastListener","start","sendMessage","makeClientStreamRequest","makeServerStreamRequest","makeBidiStreamRequest","close","getChannel","waitForReady","deadline","checkState","new_state","getConnectivityState","e","connectivityState","READY","FATAL_FAILURE","watchConnectivityState","forcePoll","requester_funcs","UNARY","CLIENT_STREAMING","SERVER_STREAMING","BIDI_STREAMING","getDefaultValues","res","deprecated_request_wrap","makeWrappedUnaryRequest","opt_args","makeWrappedClientStreamRequest","x","makeClientConstructor","methods","serviceName","class_options","ServiceClient","$method_names","name","attrs","isPrototypePolluted","method_type","getMethodType","method_func","apply","slice","arguments","deprecatedArgumentOrder","assign","originalName","service","getClientChannel","client","getClientInterceptors","waitForClientReady","StatusBuilder","ListenerBuilder","RequesterBuilder","InterceptingCall"],"sources":["C:/Users/Asus/Documents/threejs/miro learning/20.12 neuroweb textures/node_modules/grpc/src/client.js"],"sourcesContent":["/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n * Client module\n *\n * This module contains the factory method for creating Client classes, and the\n * method calling code for all types of methods.\n *\n * @example <caption>Create a client and call a method on it</caption>\n *\n * var proto_obj = grpc.load(proto_file_path);\n * var Client = proto_obj.package.subpackage.ServiceName;\n * var client = new Client(server_address, client_credentials);\n * var call = client.unaryMethod(arguments, callback);\n */\n\n'use strict';\n\nvar client_interceptors = require('./client_interceptors');\nvar grpc = require('./grpc_extension');\n\nvar common = require('./common');\n\nvar Metadata = require('./metadata');\n\nvar constants = require('./constants');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar stream = require('stream');\n\nvar Readable = stream.Readable;\nvar Writable = stream.Writable;\nvar Duplex = stream.Duplex;\nvar methodTypes = constants.methodTypes;\nvar util = require('util');\nvar version = require('../package.json').version;\n\n/**\n * Initial response metadata sent by the server when it starts processing the\n * call\n * @event grpc~ClientUnaryCall#metadata\n * @type {grpc.Metadata}\n */\n\n/**\n * Status of the call when it has completed.\n * @event grpc~ClientUnaryCall#status\n * @type grpc~StatusObject\n */\n\nutil.inherits(ClientUnaryCall, EventEmitter);\n\n/**\n * An EventEmitter. Used for unary calls.\n * @constructor grpc~ClientUnaryCall\n * @extends external:EventEmitter\n * @param {grpc.internal~Call} call The call object associated with the request\n */\nfunction ClientUnaryCall(call) {\n  EventEmitter.call(this);\n  this.call = call;\n}\n\nutil.inherits(ClientWritableStream, Writable);\n\n/**\n * A stream that the client can write to. Used for calls that are streaming from\n * the client side.\n * @constructor grpc~ClientWritableStream\n * @extends external:Writable\n * @borrows grpc~ClientUnaryCall#cancel as grpc~ClientWritableStream#cancel\n * @borrows grpc~ClientUnaryCall#getPeer as grpc~ClientWritableStream#getPeer\n * @borrows grpc~ClientUnaryCall#event:metadata as\n *     grpc~ClientWritableStream#metadata\n * @borrows grpc~ClientUnaryCall#event:status as\n *     grpc~ClientWritableStream#status\n * @param {InterceptingCall} call Exposes gRPC request operations, processed by\n *     an interceptor stack.\n */\nfunction ClientWritableStream(call) {\n  Writable.call(this, {objectMode: true});\n  this.call = call;\n  var self = this;\n  this.on('finish', function() {\n    self.call.halfClose();\n  });\n}\n\n/**\n * Write a message to the request stream. If serializing the argument fails,\n * the call will be cancelled and the stream will end with an error.\n * @name grpc~ClientWritableStream#write\n * @kind function\n * @override\n * @param {*} message The message to write. Must be a valid argument to the\n *     serialize function of the corresponding method\n * @param {grpc.writeFlags} flags Flags to modify how the message is written\n * @param {Function} callback Callback for when this chunk of data is flushed\n * @return {boolean} As defined for [Writable]{@link external:Writable}\n */\n\n/**\n * Attempt to write the given chunk. Calls the callback when done. This is an\n * implementation of a method needed for implementing stream.Writable.\n * @private\n * @param {*} chunk The chunk to write\n * @param {grpc.writeFlags} encoding Used to pass write flags\n * @param {function(Error=)} callback Called when the write is complete\n */\nfunction _write(chunk, encoding, callback) {\n  /* jshint validthis: true */\n  var self = this;\n  if (this.writeFailed) {\n    /* Once a write fails, just call the callback immediately to let the caller\n       flush any pending writes. */\n    setImmediate(callback);\n    return;\n  }\n  var outerCallback = function(err, event) {\n    if (err) {\n      /* Assume that the call is complete and that writing failed because a\n         status was received. In that case, set a flag to discard all future\n         writes */\n      self.writeFailed = true;\n    }\n    callback();\n  };\n  var context = {\n    encoding: encoding,\n    callback: outerCallback\n  };\n  this.call.sendMessageWithContext(context, chunk);\n}\n\nClientWritableStream.prototype._write = _write;\n\nutil.inherits(ClientReadableStream, Readable);\n\n/**\n * A stream that the client can read from. Used for calls that are streaming\n * from the server side.\n * @constructor grpc~ClientReadableStream\n * @extends external:Readable\n * @borrows grpc~ClientUnaryCall#cancel as grpc~ClientReadableStream#cancel\n * @borrows grpc~ClientUnaryCall#getPeer as grpc~ClientReadableStream#getPeer\n * @borrows grpc~ClientUnaryCall#event:metadata as\n *     grpc~ClientReadableStream#metadata\n * @borrows grpc~ClientUnaryCall#event:status as\n *     grpc~ClientReadableStream#status\n * @param {InterceptingCall} call Exposes gRPC request operations, processed by\n *     an interceptor stack.\n */\nfunction ClientReadableStream(call) {\n  Readable.call(this, {objectMode: true});\n  this.call = call;\n  this.finished = false;\n  this.reading = false;\n  /* Status generated from reading messages from the server. Overrides the\n   * status from the server if not OK */\n  this.read_status = null;\n  /* Status received from the server. */\n  this.received_status = null;\n}\n\n/**\n * Called when all messages from the server have been processed. The status\n * parameter indicates that the call should end with that status. status\n * defaults to OK if not provided.\n * @param {Object!} status The status that the call should end with\n * @private\n */\nfunction _readsDone(status) {\n  /* jshint validthis: true */\n  if (!status) {\n    status = {code: constants.status.OK, details: 'OK'};\n  }\n  if (status.code !== constants.status.OK) {\n    this.call.cancelWithStatus(status.code, status.details);\n  }\n  this.finished = true;\n  this.read_status = status;\n  this._emitStatusIfDone();\n}\n\nClientReadableStream.prototype._readsDone = _readsDone;\n\n/**\n * Called to indicate that we have received a status from the server.\n * @private\n */\nfunction _receiveStatus(status) {\n  /* jshint validthis: true */\n  this.received_status = status;\n  this._emitStatusIfDone();\n}\n\nClientReadableStream.prototype._receiveStatus = _receiveStatus;\n\n/**\n * If we have both processed all incoming messages and received the status from\n * the server, emit the status. Otherwise, do nothing.\n * @private\n */\nfunction _emitStatusIfDone() {\n  /* jshint validthis: true */\n  var status;\n  if (this.read_status && this.received_status) {\n    if (this.read_status.code !== constants.status.OK) {\n      status = this.read_status;\n    } else {\n      status = this.received_status;\n    }\n    if (status.code === constants.status.OK) {\n      this.push(null);\n    } else {\n      var error = common.createStatusError(status);\n      this.emit('error', error);\n    }\n    this.emit('status', status);\n  }\n}\n\nClientReadableStream.prototype._emitStatusIfDone = _emitStatusIfDone;\n\n/**\n * Read the next object from the stream.\n * @private\n * @param {*} size Ignored because we use objectMode=true\n */\nfunction _read(size) {\n  /* jshint validthis: true */\n  if (this.finished) {\n    this.push(null);\n  } else {\n    if (!this.reading) {\n      this.reading = true;\n      var context = {\n        stream: this\n      };\n      this.call.recvMessageWithContext(context);\n    }\n  }\n}\n\nClientReadableStream.prototype._read = _read;\n\nutil.inherits(ClientDuplexStream, Duplex);\n\n/**\n * A stream that the client can read from or write to. Used for calls with\n * duplex streaming.\n * @constructor grpc~ClientDuplexStream\n * @extends external:Duplex\n * @borrows grpc~ClientUnaryCall#cancel as grpc~ClientDuplexStream#cancel\n * @borrows grpc~ClientUnaryCall#getPeer as grpc~ClientDuplexStream#getPeer\n * @borrows grpc~ClientWritableStream#write as grpc~ClientDuplexStream#write\n * @borrows grpc~ClientUnaryCall#event:metadata as\n *     grpc~ClientDuplexStream#metadata\n * @borrows grpc~ClientUnaryCall#event:status as\n *     grpc~ClientDuplexStream#status\n * @param {InterceptingCall} call Exposes gRPC request operations, processed by\n *     an interceptor stack.\n */\nfunction ClientDuplexStream(call) {\n  Duplex.call(this, {objectMode: true});\n  this.call = call;\n  /* Status generated from reading messages from the server. Overrides the\n   * status from the server if not OK */\n  this.read_status = null;\n  /* Status received from the server. */\n  this.received_status = null;\n  var self = this;\n  this.on('finish', function() {\n    self.call.halfClose();\n  });\n}\n\nClientDuplexStream.prototype._readsDone = _readsDone;\nClientDuplexStream.prototype._receiveStatus = _receiveStatus;\nClientDuplexStream.prototype._emitStatusIfDone = _emitStatusIfDone;\nClientDuplexStream.prototype._read = _read;\nClientDuplexStream.prototype._write = _write;\n\n/**\n * Cancel the ongoing call. Results in the call ending with a CANCELLED status,\n * unless it has already ended with some other status.\n * @alias grpc~ClientUnaryCall#cancel\n */\nfunction cancel() {\n  /* jshint validthis: true */\n  this.call.cancel();\n}\n\nClientUnaryCall.prototype.cancel = cancel;\nClientReadableStream.prototype.cancel = cancel;\nClientWritableStream.prototype.cancel = cancel;\nClientDuplexStream.prototype.cancel = cancel;\n\n/**\n * Get the endpoint this call/stream is connected to.\n * @return {string} The URI of the endpoint\n * @alias grpc~ClientUnaryCall#getPeer\n */\nfunction getPeer() {\n  /* jshint validthis: true */\n  return this.call.getPeer();\n}\n\nClientUnaryCall.prototype.getPeer = getPeer;\nClientReadableStream.prototype.getPeer = getPeer;\nClientWritableStream.prototype.getPeer = getPeer;\nClientDuplexStream.prototype.getPeer = getPeer;\n\n/**\n * Any client call type\n * @typedef {(grpc~ClientUnaryCall|grpc~ClientReadableStream|\n *            grpc~ClientWritableStream|grpc~ClientDuplexStream)}\n *     grpc.Client~Call\n */\n\n/**\n * Options that can be set on a call.\n * @typedef {Object} grpc.Client~CallOptions\n * @property {grpc~Deadline} deadline The deadline for the entire call to\n *     complete.\n * @property {string} host Server hostname to set on the call. Only meaningful\n *     if different from the server address used to construct the client.\n * @property {grpc.Client~Call} parent Parent call. Used in servers when\n *     making a call as part of the process of handling a call. Used to\n *     propagate some information automatically, as specified by\n *     propagate_flags.\n * @property {number} propagate_flags Indicates which properties of a parent\n *     call should propagate to this call. Bitwise combination of flags in\n *     {@link grpc.propagate}.\n * @property {grpc.credentials~CallCredentials} credentials The credentials that\n *     should be used to make this particular call.\n */\n\n/**\n * Properties of a call, for use with a {@link grpc.Client~callInvocationTransformer}.\n * @typedef {Object} grpc.Client~CallProperties\n * @property {*} argument The call argument. Only preset if the method is unary or server streaming.\n * @property {grpc.Metadata} metadata The request metadata\n * @property {grpc~Call} call The call object that will be returned by the client method\n * @property {grpc.Channel} channel The channel that will be used to make a request\n * @property {grpc~MethodDefinition} methodDefinition The MethodDefinition object that describes this method\n * @property {grpc.Client~CallOptions} options The call options passed when making this request\n * @property {grpc.Client~requestCallback} callback The callback that will handle the response.\n *     Only present if this method is unary or client streaming.\n */\n\n/**\n * Call invocation transformer. Has access to the full call properties before a\n * call is processed and can modify most of those properties. Some modifications\n * will have no effect or may cause problems.\n * @name grpc.Client~callInvocationTransformer\n * @function\n * @param {grpc.Client~CallProperties} callProperties The original call properties\n * @return {grpc.Client~CallProperties} The modified call properties.\n */\n\n/**\n * A function that functionally replaces the Channel constructor.\n * @name grpc.Client~channelFactory\n * @function\n * @param {string} target The address of the server to connect to\n * @param {grpc.ChannelCredentials} credentials Channel credentials to use when connecting\n * @param {grpc~ChannelOptions} options A map of channel options that will be passed to the core.\n *     The available options are listed in\n *     [this document]{@link https://grpc.github.io/grpc/core/group__grpc__arg__keys.html}.\n * @returns {grpc.Channel} This can either be an actual channel object, or an object with the\n *     same API.\n */\n\n/**\n * A generic gRPC client. Primarily useful as a base class for generated clients\n * @memberof grpc\n * @constructor\n * @param {string} address Server address to connect to\n * @param {grpc.credentials~ChannelCredentials} credentials Credentials to use\n *     to connect to the server\n * @param {Object} options Options to apply to channel creation. Any of\n *     [the channel arguments]{@link https://grpc.github.io/grpc/core/group__grpc__arg__keys.html}\n *     can be used here in addition to specific client options.\n * @param {grpc~Interceptor[]} [options.interceptors] Interceptors to apply to each request\n * @param {grpc~InterceptorProvider[]} [options.interceptor_providers] Interceptor providers\n *     to apply interceptors to each request depending on the method definition. At most\n *     one of the interceptors and interceptor_providers options may be set.\n * @param {grpc.Client~callInvocationTransformer=} options.callInvocationTransformer\n * @param {grpc.Channel=} options.channelOverride Channel to use instead of constructing a new one.\n *     If set, the address, credentials, channel arguments options, and channelFactoryOverride\n *     option will all be ignored.\n * @param {grpc.Client~channelFactory} options.channelFactoryOverride Function to use instead of\n *     the Channel constructor when creating the Client's channel.\n */\nfunction Client(address, credentials, options) {\n  var self = this;\n  if (!options) {\n    options = {};\n  }\n\n  // Resolve interceptor options and assign interceptors to each method\n  if (Array.isArray(options.interceptor_providers) && Array.isArray(options.interceptors)) {\n    throw new client_interceptors.InterceptorConfigurationError(\n      'Both interceptors and interceptor_providers were passed as options ' +\n      'to the client constructor. Only one of these is allowed.');\n  }\n  self.$interceptors = options.interceptors || [];\n  self.$interceptor_providers = options.interceptor_providers || [];\n  if (self.$method_definitions) {\n    Object.keys(self.$method_definitions).forEach(method_name => {\n      const method_definition = self.$method_definitions[method_name];\n      self[method_name].interceptors = client_interceptors\n        .resolveInterceptorProviders(self.$interceptor_providers, method_definition)\n        .concat(self.$interceptors);\n    });\n  }\n\n  this.$callInvocationTransformer = options.callInvocationTransformer;\n\n  let channelOverride = options.channelOverride;\n  let channelFactoryOverride = options.channelFactoryOverride;\n  // Exclude channel options which have already been consumed\n  const ignoredKeys = [\n    'interceptors', 'interceptor_providers', 'channelOverride',\n    'channelFactoryOverride', 'callInvocationTransformer'\n  ];\n  var channel_options = Object.getOwnPropertyNames(options)\n    .reduce((acc, key) => {\n      if (ignoredKeys.indexOf(key) === -1) {\n        acc[key] = options[key];\n      }\n      return acc;\n    }, {});\n  /* Private fields use $ as a prefix instead of _ because it is an invalid\n   * prefix of a method name */\n  if (channelOverride) {\n    this.$channel = options.channelOverride;\n  } else {\n    if (channelFactoryOverride) {\n      this.$channel = channelFactoryOverride(address, credentials, channel_options);\n    } else {\n      this.$channel = new grpc.Channel(address, credentials, channel_options);\n    }\n  }\n}\n\nexports.Client = Client;\n\nClient.prototype.resolveCallInterceptors = function(method_definition, interceptors, interceptor_providers) {\n  if (Array.isArray(interceptors) && Array.isArray(interceptor_providers)) {\n    throw new client_interceptors.InterceptorConfigurationError(\n      'Both interceptors and interceptor_providers were passed as call ' +\n      'options. Only one of these is allowed.');\n  }\n  if (Array.isArray(interceptors) || Array.isArray(interceptor_providers)) {\n    interceptors = interceptors || [];\n    interceptor_providers = interceptor_providers || [];\n    return client_interceptors.resolveInterceptorProviders(interceptor_providers, method_definition).concat(interceptors);\n  } else {\n    return client_interceptors.resolveInterceptorProviders(this.$interceptor_providers, method_definition).concat(this.$interceptors);\n  }\n}\n\n/**\n * @callback grpc.Client~requestCallback\n * @param {?grpc~ServiceError} error The error, if the call\n *     failed\n * @param {*} value The response value, if the call succeeded\n */\n\n/**\n * Make a unary request to the given method, using the given serialize\n * and deserialize functions, with the given argument.\n * @param {string} path The path of the method to request\n * @param {grpc~serialize} serialize The serialization function for\n *     inputs\n * @param {grpc~deserialize} deserialize The deserialization\n *     function for outputs\n * @param {*} argument The argument to the call. Should be serializable with\n *     serialize\n * @param {grpc.Metadata=} metadata Metadata to add to the call\n * @param {grpc.Client~CallOptions=} options Options map\n * @param {grpc.Client~requestCallback} callback The callback\n *     for when the response is received\n * @return {grpc~ClientUnaryCall} An event emitter for stream related events\n */\nClient.prototype.makeUnaryRequest = function(path, serialize, deserialize,\n                                             argument, metadata, options,\n                                             callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    if (metadata instanceof Metadata) {\n      options = {};\n    } else {\n      options = metadata;\n      metadata = new Metadata();\n    }\n  } else if (typeof metadata === 'function') {\n    callback = metadata;\n    metadata = new Metadata();\n    options = {};\n  }\n  if (!metadata) {\n    metadata = new Metadata();\n  }\n  if (!options) {\n    options = {};\n  }\n  if (!((metadata instanceof Metadata) &&\n        (options instanceof Object) &&\n        (typeof callback === 'function'))) {\n    throw new Error('Argument mismatch in makeUnaryRequest');\n  }\n\n  var method_definition = options.method_definition = {\n    path: path,\n    requestStream: false,\n    responseStream: false,\n    requestSerialize: serialize,\n    responseDeserialize: deserialize\n  };\n\n  metadata = metadata.clone();\n\n  var callProperties = {\n    argument: argument,\n    metadata: metadata,\n    call: new ClientUnaryCall(),\n    channel: this.$channel,\n    methodDefinition: method_definition,\n    callOptions: options,\n    callback: callback\n  };\n\n  // Transform call properties if specified.\n  if (this.$callInvocationTransformer) {\n    callProperties = this.$callInvocationTransformer(callProperties);\n  }\n\n  var callOptions = callProperties.callOptions;\n  var methodDefinition = callProperties.methodDefinition;\n\n  var interceptors = Client.prototype.resolveCallInterceptors.call(\n    this,\n    methodDefinition,\n    callOptions.interceptors,\n    callOptions.interceptor_providers\n  );\n\n  var intercepting_call = client_interceptors.getInterceptingCall(\n    methodDefinition,\n    callOptions,\n    interceptors,\n    callProperties.channel,\n    callProperties.callback\n  );\n\n  var emitter = callProperties.call;\n  emitter.call = intercepting_call;\n\n  var last_listener = client_interceptors.getLastListener(\n    methodDefinition,\n    emitter,\n    callProperties.callback\n  );\n\n  intercepting_call.start(callProperties.metadata, last_listener);\n  intercepting_call.sendMessage(callProperties.argument);\n  intercepting_call.halfClose();\n\n  return emitter;\n};\n\n/**\n * Make a client stream request to the given method, using the given serialize\n * and deserialize functions, with the given argument.\n * @param {string} path The path of the method to request\n * @param {grpc~serialize} serialize The serialization function for\n *     inputs\n * @param {grpc~deserialize} deserialize The deserialization\n *     function for outputs\n * @param {grpc.Metadata=} metadata Array of metadata key/value pairs to add to\n *     the call\n * @param {grpc.Client~CallOptions=} options Options map\n * @param {grpc.Client~requestCallback} callback The callback for when the\n *     response is received\n * @return {grpc~ClientWritableStream} An event emitter for stream related\n *     events\n */\nClient.prototype.makeClientStreamRequest = function(path, serialize,\n                                                    deserialize, metadata,\n                                                    options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    if (metadata instanceof Metadata) {\n      options = {};\n    } else {\n      options = metadata;\n      metadata = new Metadata();\n    }\n  } else if (typeof metadata === 'function') {\n    callback = metadata;\n    metadata = new Metadata();\n    options = {};\n  }\n  if (!metadata) {\n    metadata = new Metadata();\n  }\n  if (!options) {\n    options = {};\n  }\n  if (!((metadata instanceof Metadata) &&\n       (options instanceof Object) &&\n       (typeof callback === 'function'))) {\n    throw new Error('Argument mismatch in makeClientStreamRequest');\n  }\n\n  var method_definition = options.method_definition = {\n    path: path,\n    requestStream: true,\n    responseStream: false,\n    requestSerialize: serialize,\n    responseDeserialize: deserialize\n  };\n\n  metadata = metadata.clone();\n\n  var callProperties = {\n    metadata: metadata,\n    call: new ClientWritableStream(),\n    channel: this.$channel,\n    methodDefinition: method_definition,\n    callOptions: options,\n    callback: callback\n  };\n\n  // Transform call properties if specified.\n  if (this.$callInvocationTransformer) {\n    callProperties = this.$callInvocationTransformer(callProperties);\n  }\n\n  var callOptions = callProperties.callOptions;\n  var methodDefinition = callProperties.methodDefinition;\n\n  var interceptors = Client.prototype.resolveCallInterceptors.call(\n    this,\n    methodDefinition,\n    callOptions.interceptors,\n    callOptions.interceptor_providers\n  );\n\n  var intercepting_call = client_interceptors.getInterceptingCall(\n    methodDefinition,\n    callOptions,\n    interceptors,\n    callProperties.channel,\n    callProperties.callback\n  );\n\n  var emitter = callProperties.call;\n  emitter.call = intercepting_call;\n\n  var last_listener = client_interceptors.getLastListener(\n    methodDefinition,\n    emitter,\n    callProperties.callback\n  );\n\n  intercepting_call.start(callProperties.metadata, last_listener);\n\n  return emitter;\n};\n\n/**\n * Make a server stream request to the given method, with the given serialize\n * and deserialize function, using the given argument\n * @param {string} path The path of the method to request\n * @param {grpc~serialize} serialize The serialization function for inputs\n * @param {grpc~deserialize} deserialize The deserialization\n *     function for outputs\n * @param {*} argument The argument to the call. Should be serializable with\n *     serialize\n * @param {grpc.Metadata=} metadata Array of metadata key/value pairs to add to\n *     the call\n * @param {grpc.Client~CallOptions=} options Options map\n * @return {grpc~ClientReadableStream} An event emitter for stream related\n *     events\n */\nClient.prototype.makeServerStreamRequest = function(path, serialize,\n                                                    deserialize, argument,\n                                                    metadata, options) {\n  if (!(metadata instanceof Metadata)) {\n    options = metadata;\n    metadata = new Metadata();\n  }\n  if (!(options instanceof Object)) {\n    options = {};\n  }\n  if (!((metadata instanceof Metadata) && (options instanceof Object))) {\n    throw new Error('Argument mismatch in makeServerStreamRequest');\n  }\n\n  var method_definition = options.method_definition = {\n    path: path,\n    requestStream: false,\n    responseStream: true,\n    requestSerialize: serialize,\n    responseDeserialize: deserialize\n  };\n\n  metadata = metadata.clone();\n\n  var callProperties = {\n    argument: argument,\n    metadata: metadata,\n    call: new ClientReadableStream(),\n    channel: this.$channel,\n    methodDefinition: method_definition,\n    callOptions: options,\n  };\n\n  // Transform call properties if specified.\n  if (this.$callInvocationTransformer) {\n    callProperties = this.$callInvocationTransformer(callProperties);\n  }\n\n  var callOptions = callProperties.callOptions;\n  var methodDefinition = callProperties.methodDefinition;\n\n  var interceptors = Client.prototype.resolveCallInterceptors.call(\n    this,\n    methodDefinition,\n    callOptions.interceptors,\n    callOptions.interceptor_providers\n  );\n\n  var emitter = callProperties.call;\n  var intercepting_call = client_interceptors.getInterceptingCall(\n    methodDefinition,\n    callOptions,\n    interceptors,\n    callProperties.channel,\n    emitter\n  );\n  emitter.call = intercepting_call;\n  var last_listener = client_interceptors.getLastListener(\n    methodDefinition,\n    emitter\n  );\n\n  intercepting_call.start(callProperties.metadata, last_listener);\n  intercepting_call.sendMessage(callProperties.argument);\n  intercepting_call.halfClose();\n\n  return emitter;\n};\n\n/**\n * Make a bidirectional stream request with this method on the given channel.\n * @param {string} path The path of the method to request\n * @param {grpc~serialize} serialize The serialization function for inputs\n * @param {grpc~deserialize} deserialize The deserialization\n *     function for outputs\n * @param {grpc.Metadata=} metadata Array of metadata key/value\n *     pairs to add to the call\n * @param {grpc.Client~CallOptions=} options Options map\n * @return {grpc~ClientDuplexStream} An event emitter for stream related events\n */\nClient.prototype.makeBidiStreamRequest = function(path, serialize,\n                                                  deserialize, metadata,\n                                                  options) {\n  if (!(metadata instanceof Metadata)) {\n    options = metadata;\n    metadata = new Metadata();\n  }\n  if (!(options instanceof Object)) {\n    options = {};\n  }\n  if (!((metadata instanceof Metadata) && (options instanceof Object))) {\n    throw new Error('Argument mismatch in makeBidiStreamRequest');\n  }\n\n  var method_definition = options.method_definition = {\n    path: path,\n    requestStream: true,\n    responseStream: true,\n    requestSerialize: serialize,\n    responseDeserialize: deserialize\n  };\n\n  metadata = metadata.clone();\n\n  var callProperties = {\n    metadata: metadata,\n    call: new ClientDuplexStream(),\n    channel: this.$channel,\n    methodDefinition: method_definition,\n    callOptions: options,\n  };\n\n  // Transform call properties if specified.\n  if (this.$callInvocationTransformer) {\n    callProperties = this.$callInvocationTransformer(callProperties);\n  }\n\n  var callOptions = callProperties.callOptions;\n  var methodDefinition = callProperties.methodDefinition;\n\n  var interceptors = Client.prototype.resolveCallInterceptors.call(\n    this,\n    methodDefinition,\n    callOptions.interceptors,\n    callOptions.interceptor_providers\n  );\n\n\n  var emitter = callProperties.call;\n  var intercepting_call = client_interceptors.getInterceptingCall(\n    methodDefinition,\n    callOptions,\n    interceptors,\n    callProperties.channel,\n    emitter\n  );\n  emitter.call = intercepting_call;\n  var last_listener = client_interceptors.getLastListener(\n    methodDefinition,\n    emitter\n  );\n\n  intercepting_call.start(callProperties.metadata, last_listener);\n\n  return emitter;\n};\n\n/**\n * Close this client.\n */\nClient.prototype.close = function() {\n  this.$channel.close();\n};\n\n/**\n * Return the underlying channel object for the specified client\n * @return {Channel} The channel\n */\nClient.prototype.getChannel = function() {\n  return this.$channel;\n};\n\n/**\n * Wait for the client to be ready. The callback will be called when the\n * client has successfully connected to the server, and it will be called\n * with an error if the attempt to connect to the server has unrecoverablly\n * failed or if the deadline expires. This function will make the channel\n * start connecting if it has not already done so.\n * @param {grpc~Deadline} deadline When to stop waiting for a connection.\n * @param {function(Error)} callback The callback to call when done attempting\n *     to connect.\n */\nClient.prototype.waitForReady = function(deadline, callback) {\n  var self = this;\n  var checkState = function(err) {\n    if (err) {\n      callback(new Error('Failed to connect before the deadline'));\n      return;\n    }\n    var new_state;\n    try {\n      new_state = self.$channel.getConnectivityState(true);\n    } catch (e) {\n      callback(new Error('The channel has been closed'));\n      return;\n    }\n    if (new_state === grpc.connectivityState.READY) {\n      callback();\n    } else if (new_state === grpc.connectivityState.FATAL_FAILURE) {\n      callback(new Error('Failed to connect to server'));\n    } else {\n      try {\n        self.$channel.watchConnectivityState(new_state, deadline, checkState);\n      } catch (e) {\n        callback(new Error('The channel has been closed'));\n      }\n    }\n  };\n  /* Force a single round of polling to ensure that the channel state is up\n   * to date */\n  grpc.forcePoll();\n  setImmediate(checkState);\n};\n\n/**\n * Map with short names for each of the requester maker functions. Used in\n * makeClientConstructor\n * @private\n */\nvar requester_funcs = {\n  [methodTypes.UNARY]: Client.prototype.makeUnaryRequest,\n  [methodTypes.CLIENT_STREAMING]: Client.prototype.makeClientStreamRequest,\n  [methodTypes.SERVER_STREAMING]: Client.prototype.makeServerStreamRequest,\n  [methodTypes.BIDI_STREAMING]: Client.prototype.makeBidiStreamRequest\n};\n\nfunction getDefaultValues(metadata, options) {\n  var res = {};\n  res.metadata = metadata || new Metadata();\n  res.options = options || {};\n  return res;\n}\n\n/**\n * Map with wrappers for each type of requester function to make it use the old\n * argument order with optional arguments after the callback.\n * @access private\n */\nvar deprecated_request_wrap = {\n  [methodTypes.UNARY]: function(makeUnaryRequest) {\n    return function makeWrappedUnaryRequest(argument, callback,\n                                            metadata, options) {\n      /* jshint validthis: true */\n      var opt_args = getDefaultValues(metadata, options);\n      return makeUnaryRequest.call(this, argument, opt_args.metadata,\n                                   opt_args.options, callback);\n    };\n  },\n  [methodTypes.CLIENT_STREAMING]: function(makeServerStreamRequest) {\n    return function makeWrappedClientStreamRequest(callback, metadata,\n                                                   options) {\n      /* jshint validthis: true */\n      var opt_args = getDefaultValues(metadata, options);\n      return makeServerStreamRequest.call(this, opt_args.metadata,\n                                          opt_args.options, callback);\n    };\n  },\n  [methodTypes.SERVER_STREAMING]: x => x,\n  [methodTypes.BIDI_STREAMING]: x => x\n};\n\n/**\n * Creates a constructor for a client with the given methods, as specified in\n * the methods argument. The resulting class will have an instance method for\n * each method in the service, which is a partial application of one of the\n * [Client]{@link grpc.Client} request methods, depending on `requestSerialize`\n * and `responseSerialize`, with the `method`, `serialize`, and `deserialize`\n * arguments predefined.\n * @memberof grpc\n * @alias grpc~makeGenericClientConstructor\n * @param {grpc~ServiceDefinition} methods An object mapping method names to\n *     method attributes\n * @param {string} serviceName The fully qualified name of the service\n * @param {Object} class_options An options object.\n * @param {boolean=} [class_options.deprecatedArgumentOrder=false] Indicates\n *     that the old argument order should be used for methods, with optional\n *     arguments at the end instead of the callback at the end. This option\n *     is only a temporary stopgap measure to smooth an API breakage.\n *     It is deprecated, and new code should not use it.\n * @return {function} New client constructor, which is a subclass of\n *     {@link grpc.Client}, and has the same arguments as that constructor.\n */\nexports.makeClientConstructor = function(methods, serviceName,\n                                         class_options) {\n  if (!class_options) {\n    class_options = {};\n  }\n\n  function ServiceClient(address, credentials, options) {\n    Client.call(this, address, credentials, options);\n  }\n\n  util.inherits(ServiceClient, Client);\n  ServiceClient.prototype.$method_definitions = methods;\n  ServiceClient.prototype.$method_names = {};\n\n  Object.keys(methods).forEach(name => {\n    const attrs = methods[name];\n    if (common.isPrototypePolluted(name)) {\n      return;\n    }\n    if (name.indexOf('$') === 0) {\n      throw new Error('Method names cannot start with $');\n    }\n    var method_type = common.getMethodType(attrs);\n    var method_func = function() {\n      return requester_funcs[method_type].apply(this,\n        [ attrs.path, attrs.requestSerialize, attrs.responseDeserialize ]\n        .concat([].slice.call(arguments))\n      );\n    };\n    if (class_options.deprecatedArgumentOrder) {\n      ServiceClient.prototype[name] =\n        deprecated_request_wrap[method_type](method_func);\n    } else {\n      ServiceClient.prototype[name] = method_func;\n    }\n    ServiceClient.prototype.$method_names[attrs.path] = name;\n    // Associate all provided attributes with the method\n    Object.assign(ServiceClient.prototype[name], attrs);\n    if (attrs.originalName && !common.isPrototypePolluted(attrs.originalName)) {\n      ServiceClient.prototype[attrs.originalName] =\n        ServiceClient.prototype[name];\n    }\n  });\n\n  ServiceClient.service = methods;\n\n  return ServiceClient;\n};\n\n/**\n * Return the underlying channel object for the specified client\n * @memberof grpc\n * @alias grpc~getClientChannel\n * @param {grpc.Client} client The client\n * @return {Channel} The channel\n * @see grpc.Client#getChannel\n */\nexports.getClientChannel = function(client) {\n  return Client.prototype.getChannel.call(client);\n};\n\n/**\n * Gets a map of client method names to interceptor stacks.\n * @param {grpc.Client} client\n * @returns {Object.<string, Interceptor[]>}\n */\nexports.getClientInterceptors = function(client) {\n  return Object.keys(client.$method_definitions)\n    .reduce((acc, key) => {\n      if (typeof key === 'string') {\n        acc[key] = client[key].interceptors;\n      }\n      return acc;\n    }, {});\n};\n\n/**\n * Wait for the client to be ready. The callback will be called when the\n * client has successfully connected to the server, and it will be called\n * with an error if the attempt to connect to the server has unrecoverablly\n * failed or if the deadline expires. This function will make the channel\n * start connecting if it has not already done so.\n * @memberof grpc\n * @alias grpc~waitForClientReady\n * @param {grpc.Client} client The client to wait on\n * @param {grpc~Deadline} deadline When to stop waiting for a connection. Pass\n *     Infinity to wait forever.\n * @param {function(Error)} callback The callback to call when done attempting\n *     to connect.\n * @see grpc.Client#waitForReady\n */\nexports.waitForClientReady = function(client, deadline, callback) {\n  Client.prototype.waitForReady.call(client, deadline, callback);\n};\n\nexports.StatusBuilder = client_interceptors.StatusBuilder;\nexports.ListenerBuilder = client_interceptors.ListenerBuilder;\nexports.RequesterBuilder = client_interceptors.RequesterBuilder;\nexports.InterceptingCall = client_interceptors.InterceptingCall;\n"],"mappings":"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,CAA+BsB,MAA/B,GAAwCA,MAAxC;AACAtC,oBAAoB,CAACgB,SAArB,CAA+BsB,MAA/B,GAAwCA,MAAxC;AACAD,kBAAkB,CAACrB,SAAnB,CAA6BsB,MAA7B,GAAsCA,MAAtC;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,OAAT,GAAmB;EACjB;EACA,OAAO,KAAKxC,IAAL,CAAUwC,OAAV,EAAP;AACD;;AAEDzC,eAAe,CAACkB,SAAhB,CAA0BuB,OAA1B,GAAoCA,OAApC;AACAtB,oBAAoB,CAACD,SAArB,CAA+BuB,OAA/B,GAAyCA,OAAzC;AACAvC,oBAAoB,CAACgB,SAArB,CAA+BuB,OAA/B,GAAyCA,OAAzC;AACAF,kBAAkB,CAACrB,SAAnB,CAA6BuB,OAA7B,GAAuCA,OAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBC,OAAhB,EAAyBC,WAAzB,EAAsCC,OAAtC,EAA+C;EAC7C,IAAIzC,IAAI,GAAG,IAAX;;EACA,IAAI,CAACyC,OAAL,EAAc;IACZA,OAAO,GAAG,EAAV;EACD,CAJ4C,CAM7C;;;EACA,IAAIC,KAAK,CAACC,OAAN,CAAcF,OAAO,CAACG,qBAAtB,KAAgDF,KAAK,CAACC,OAAN,CAAcF,OAAO,CAACI,YAAtB,CAApD,EAAyF;IACvF,MAAM,IAAIhE,mBAAmB,CAACiE,6BAAxB,CACJ,wEACA,0DAFI,CAAN;EAGD;;EACD9C,IAAI,CAAC+C,aAAL,GAAqBN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"},"metadata":{},"sourceType":"script"}