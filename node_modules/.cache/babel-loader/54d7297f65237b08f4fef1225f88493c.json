{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Object3D, Matrix4, Vector3, SphereGeometry, MeshBasicMaterial, Color, LineBasicMaterial, Mesh, Line, Quaternion, BufferGeometry, BufferAttribute } from 'three';\n\nclass CCDIKHelper extends Object3D {\n  constructor(mesh) {\n    let iks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    super();\n\n    _defineProperty(this, \"_m\", new Matrix4());\n\n    _defineProperty(this, \"_v\", new Vector3());\n\n    this.root = mesh;\n    this.iks = iks;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.sphereGeometry = new SphereGeometry(0.25, 16, 8);\n    this.targetSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0xff8888),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.effectorSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0x88ff88),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.linkSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0x8888ff),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.lineMaterial = new LineBasicMaterial({\n      color: new Color(0xff0000),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n\n    function createLineGeometry(ik) {\n      const geometry = new BufferGeometry();\n      const vertices = new Float32Array((2 + ik.links.length) * 3);\n      geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n      return geometry;\n    }\n\n    function createTargetMesh() {\n      return new Mesh(scope.sphereGeometry, scope.targetSphereMaterial);\n    }\n\n    function createEffectorMesh() {\n      return new Mesh(scope.sphereGeometry, scope.effectorSphereMaterial);\n    }\n\n    function createLinkMesh() {\n      return new Mesh(scope.sphereGeometry, scope.linkSphereMaterial);\n    }\n\n    function createLine(ik) {\n      return new Line(createLineGeometry(ik), scope.lineMaterial);\n    }\n\n    for (let i = 0, il = iks.length; i < il; i++) {\n      const ik = iks[i];\n      this.add(createTargetMesh());\n      this.add(createEffectorMesh());\n\n      for (let j = 0, jl = ik.links.length; j < jl; j++) {\n        this.add(createLinkMesh());\n      }\n\n      this.add(createLine(ik));\n    }\n  }\n\n  _getPosition(bone, matrixWorldInv) {\n    return this._v.setFromMatrixPosition(bone.matrixWorld).applyMatrix4(matrixWorldInv);\n  }\n\n  _setPositionOfBoneToAttributeArray(array, index, bone, matrixWorldInv) {\n    const v = this._getPosition(bone, matrixWorldInv);\n\n    array[index * 3 + 0] = v.x;\n    array[index * 3 + 1] = v.y;\n    array[index * 3 + 2] = v.z;\n  }\n\n  updateMatrixWorld(force) {\n    const mesh = this.root;\n\n    if (this.visible) {\n      let offset = 0;\n      const iks = this.iks;\n      const bones = mesh.skeleton.bones;\n\n      this._m.copy(mesh.matrixWorld).invert();\n\n      for (let i = 0, il = iks.length; i < il; i++) {\n        const ik = iks[i];\n        const targetBone = bones[ik.target];\n        const effectorBone = bones[ik.effector];\n        const targetMesh = this.children[offset++];\n        const effectorMesh = this.children[offset++];\n        targetMesh.position.copy(this._getPosition(targetBone, this._m));\n        effectorMesh.position.copy(this._getPosition(effectorBone, this._m));\n\n        for (let j = 0, jl = ik.links.length; j < jl; j++) {\n          const link = ik.links[j];\n          const linkBone = bones[link.index];\n          const linkMesh = this.children[offset++];\n          linkMesh.position.copy(this._getPosition(linkBone, this._m));\n        }\n\n        const line = this.children[offset++];\n        const array = line.geometry.attributes.position.array;\n\n        this._setPositionOfBoneToAttributeArray(array, 0, targetBone, this._m);\n\n        this._setPositionOfBoneToAttributeArray(array, 1, effectorBone, this._m);\n\n        for (let j = 0, jl = ik.links.length; j < jl; j++) {\n          const link = ik.links[j];\n          const linkBone = bones[link.index];\n\n          this._setPositionOfBoneToAttributeArray(array, j + 2, linkBone, this._m);\n        }\n\n        line.geometry.attributes.position.needsUpdate = true;\n      }\n    }\n\n    this.matrix.copy(mesh.matrixWorld);\n    super.updateMatrixWorld(force);\n  }\n\n}\n/**\n * CCD Algorithm\n *  - https://sites.google.com/site/auraliusproject/ccd-algorithm\n *\n * // ik parameter example\n * //\n * // target, effector, index in links are bone index in skeleton.bones.\n * // the bones relation should be\n * // <-- parent                                  child -->\n * // links[ n ], links[ n - 1 ], ..., links[ 0 ], effector\n * iks = [ {\n *\ttarget: 1,\n *\teffector: 2,\n *\tlinks: [ { index: 5, limitation: new Vector3( 1, 0, 0 ) }, { index: 4, enabled: false }, { index : 3 } ],\n *\titeration: 10,\n *\tminAngle: 0.0,\n *\tmaxAngle: 1.0,\n * } ];\n */\n\n\nclass CCDIKSolver {\n  constructor(mesh, iks) {\n    _defineProperty(this, \"q\", new Quaternion());\n\n    _defineProperty(this, \"targetPos\", new Vector3());\n\n    _defineProperty(this, \"targetVec\", new Vector3());\n\n    _defineProperty(this, \"effectorPos\", new Vector3());\n\n    _defineProperty(this, \"effectorVec\", new Vector3());\n\n    _defineProperty(this, \"linkPos\", new Vector3());\n\n    _defineProperty(this, \"invLinkQ\", new Quaternion());\n\n    _defineProperty(this, \"linkScale\", new Vector3());\n\n    _defineProperty(this, \"axis\", new Vector3());\n\n    _defineProperty(this, \"vector\", new Vector3());\n\n    this.mesh = mesh;\n    this.iks = iks;\n    const bones = this.mesh.skeleton.bones;\n\n    for (let i = 0, il = this.iks.length; i < il; i++) {\n      const ik = this.iks[i];\n      const effector = bones[ik.effector];\n      const links = ik.links;\n      let link0, link1;\n      link0 = effector;\n\n      for (let j = 0, jl = links.length; j < jl; j++) {\n        link1 = bones[links[j].index];\n\n        if (link0.parent !== link1) {\n          console.warn(`THREE.CCDIKSolver: bone ${link0.name} is not the child of bone ${link1.name}`);\n        }\n\n        link0 = link1;\n      }\n    }\n  }\n\n  update() {\n    const bones = this.mesh.skeleton.bones;\n    const iks = this.iks; // for reference overhead reduction in loop\n\n    const math = Math;\n\n    for (let i = 0, il = iks.length; i < il; i++) {\n      const ik = iks[i];\n      const effector = bones[ik.effector];\n      const target = bones[ik.target]; // don't use getWorldPosition() here for the performance\n      // because it calls updateMatrixWorld( true ) inside.\n\n      this.targetPos.setFromMatrixPosition(target.matrixWorld);\n      const links = ik.links;\n      const iteration = ik.iteration !== undefined ? ik.iteration : 1;\n\n      for (let j = 0; j < iteration; j++) {\n        let rotated = false;\n\n        for (let k = 0, kl = links.length; k < kl; k++) {\n          const link = bones[links[k].index]; // skip this link and following links.\n          // this skip is used for MMD performance optimization.\n\n          if (links[k].enabled === false) break;\n          const limitation = links[k].limitation;\n          const rotationMin = links[k].rotationMin;\n          const rotationMax = links[k].rotationMax; // don't use getWorldPosition/Quaternion() here for the performance\n          // because they call updateMatrixWorld( true ) inside.\n\n          link.matrixWorld.decompose(this.linkPos, this.invLinkQ, this.linkScale);\n          this.invLinkQ.invert();\n          this.effectorPos.setFromMatrixPosition(effector.matrixWorld); // work in link world\n\n          this.effectorVec.subVectors(this.effectorPos, this.linkPos);\n          this.effectorVec.applyQuaternion(this.invLinkQ);\n          this.effectorVec.normalize();\n          this.targetVec.subVectors(this.targetPos, this.linkPos);\n          this.targetVec.applyQuaternion(this.invLinkQ);\n          this.targetVec.normalize();\n          let angle = this.targetVec.dot(this.effectorVec);\n\n          if (angle > 1.0) {\n            angle = 1.0;\n          } else if (angle < -1.0) {\n            angle = -1.0;\n          }\n\n          angle = math.acos(angle); // skip if changing angle is too small to prevent vibration of bone\n          // Refer to http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mmd.three.js\n\n          if (angle < 1e-5) continue;\n\n          if (ik.minAngle !== undefined && angle < ik.minAngle) {\n            angle = ik.minAngle;\n          }\n\n          if (ik.maxAngle !== undefined && angle > ik.maxAngle) {\n            angle = ik.maxAngle;\n          }\n\n          this.axis.crossVectors(this.effectorVec, this.targetVec);\n          this.axis.normalize();\n          this.q.setFromAxisAngle(this.axis, angle);\n          link.quaternion.multiply(this.q); // TODO: re-consider the limitation specification\n\n          if (limitation !== undefined) {\n            let c = link.quaternion.w;\n            if (c > 1.0) c = 1.0;\n            const c2 = math.sqrt(1 - c * c);\n            link.quaternion.set(limitation.x * c2, limitation.y * c2, limitation.z * c2, c);\n          }\n\n          if (rotationMin !== undefined) {\n            link.rotation.setFromVector3(link.rotation.toVector3(this.vector).max(rotationMin));\n          }\n\n          if (rotationMax !== undefined) {\n            link.rotation.setFromVector3(link.rotation.toVector3(this.vector).min(rotationMax));\n          }\n\n          link.updateMatrixWorld(true);\n          rotated = true;\n        }\n\n        if (!rotated) break;\n      }\n    }\n\n    return this;\n  }\n\n  createHelper() {\n    return new CCDIKHelper(this.mesh, this.mesh.geometry.userData.MMD.iks);\n  }\n\n}\n\nexport { CCDIKHelper, CCDIKSolver };","map":{"version":3,"names":["_defineProperty","Object3D","Matrix4","Vector3","SphereGeometry","MeshBasicMaterial","Color","LineBasicMaterial","Mesh","Line","Quaternion","BufferGeometry","BufferAttribute","CCDIKHelper","constructor","mesh","iks","root","matrix","copy","matrixWorld","matrixAutoUpdate","sphereGeometry","targetSphereMaterial","color","depthTest","depthWrite","transparent","effectorSphereMaterial","linkSphereMaterial","lineMaterial","createLineGeometry","ik","geometry","vertices","Float32Array","links","length","setAttribute","createTargetMesh","scope","createEffectorMesh","createLinkMesh","createLine","i","il","add","j","jl","_getPosition","bone","matrixWorldInv","_v","setFromMatrixPosition","applyMatrix4","_setPositionOfBoneToAttributeArray","array","index","v","x","y","z","updateMatrixWorld","force","visible","offset","bones","skeleton","_m","invert","targetBone","target","effectorBone","effector","targetMesh","children","effectorMesh","position","link","linkBone","linkMesh","line","attributes","needsUpdate","CCDIKSolver","link0","link1","parent","console","warn","name","update","math","Math","targetPos","iteration","undefined","rotated","k","kl","enabled","limitation","rotationMin","rotationMax","decompose","linkPos","invLinkQ","linkScale","effectorPos","effectorVec","subVectors","applyQuaternion","normalize","targetVec","angle","dot","acos","minAngle","maxAngle","axis","crossVectors","q","setFromAxisAngle","quaternion","multiply","c","w","c2","sqrt","set","rotation","setFromVector3","toVector3","vector","max","min","createHelper","userData","MMD"],"sources":["C:/Users/Asus/Documents/threejs/miro learning/20.12 neuroweb textures/node_modules/three-stdlib/animation/CCDIKSolver.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Object3D, Matrix4, Vector3, SphereGeometry, MeshBasicMaterial, Color, LineBasicMaterial, Mesh, Line, Quaternion, BufferGeometry, BufferAttribute } from 'three';\n\nclass CCDIKHelper extends Object3D {\n  constructor(mesh, iks = []) {\n    super();\n\n    _defineProperty(this, \"_m\", new Matrix4());\n\n    _defineProperty(this, \"_v\", new Vector3());\n\n    this.root = mesh;\n    this.iks = iks;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.sphereGeometry = new SphereGeometry(0.25, 16, 8);\n    this.targetSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0xff8888),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.effectorSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0x88ff88),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.linkSphereMaterial = new MeshBasicMaterial({\n      color: new Color(0x8888ff),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.lineMaterial = new LineBasicMaterial({\n      color: new Color(0xff0000),\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n\n    function createLineGeometry(ik) {\n      const geometry = new BufferGeometry();\n      const vertices = new Float32Array((2 + ik.links.length) * 3);\n      geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n      return geometry;\n    }\n\n    function createTargetMesh() {\n      return new Mesh(scope.sphereGeometry, scope.targetSphereMaterial);\n    }\n\n    function createEffectorMesh() {\n      return new Mesh(scope.sphereGeometry, scope.effectorSphereMaterial);\n    }\n\n    function createLinkMesh() {\n      return new Mesh(scope.sphereGeometry, scope.linkSphereMaterial);\n    }\n\n    function createLine(ik) {\n      return new Line(createLineGeometry(ik), scope.lineMaterial);\n    }\n\n    for (let i = 0, il = iks.length; i < il; i++) {\n      const ik = iks[i];\n      this.add(createTargetMesh());\n      this.add(createEffectorMesh());\n\n      for (let j = 0, jl = ik.links.length; j < jl; j++) {\n        this.add(createLinkMesh());\n      }\n\n      this.add(createLine(ik));\n    }\n  }\n\n  _getPosition(bone, matrixWorldInv) {\n    return this._v.setFromMatrixPosition(bone.matrixWorld).applyMatrix4(matrixWorldInv);\n  }\n\n  _setPositionOfBoneToAttributeArray(array, index, bone, matrixWorldInv) {\n    const v = this._getPosition(bone, matrixWorldInv);\n\n    array[index * 3 + 0] = v.x;\n    array[index * 3 + 1] = v.y;\n    array[index * 3 + 2] = v.z;\n  }\n\n  updateMatrixWorld(force) {\n    const mesh = this.root;\n\n    if (this.visible) {\n      let offset = 0;\n      const iks = this.iks;\n      const bones = mesh.skeleton.bones;\n\n      this._m.copy(mesh.matrixWorld).invert();\n\n      for (let i = 0, il = iks.length; i < il; i++) {\n        const ik = iks[i];\n        const targetBone = bones[ik.target];\n        const effectorBone = bones[ik.effector];\n        const targetMesh = this.children[offset++];\n        const effectorMesh = this.children[offset++];\n        targetMesh.position.copy(this._getPosition(targetBone, this._m));\n        effectorMesh.position.copy(this._getPosition(effectorBone, this._m));\n\n        for (let j = 0, jl = ik.links.length; j < jl; j++) {\n          const link = ik.links[j];\n          const linkBone = bones[link.index];\n          const linkMesh = this.children[offset++];\n          linkMesh.position.copy(this._getPosition(linkBone, this._m));\n        }\n\n        const line = this.children[offset++];\n        const array = line.geometry.attributes.position.array;\n\n        this._setPositionOfBoneToAttributeArray(array, 0, targetBone, this._m);\n\n        this._setPositionOfBoneToAttributeArray(array, 1, effectorBone, this._m);\n\n        for (let j = 0, jl = ik.links.length; j < jl; j++) {\n          const link = ik.links[j];\n          const linkBone = bones[link.index];\n\n          this._setPositionOfBoneToAttributeArray(array, j + 2, linkBone, this._m);\n        }\n\n        line.geometry.attributes.position.needsUpdate = true;\n      }\n    }\n\n    this.matrix.copy(mesh.matrixWorld);\n    super.updateMatrixWorld(force);\n  }\n\n}\n/**\n * CCD Algorithm\n *  - https://sites.google.com/site/auraliusproject/ccd-algorithm\n *\n * // ik parameter example\n * //\n * // target, effector, index in links are bone index in skeleton.bones.\n * // the bones relation should be\n * // <-- parent                                  child -->\n * // links[ n ], links[ n - 1 ], ..., links[ 0 ], effector\n * iks = [ {\n *\ttarget: 1,\n *\teffector: 2,\n *\tlinks: [ { index: 5, limitation: new Vector3( 1, 0, 0 ) }, { index: 4, enabled: false }, { index : 3 } ],\n *\titeration: 10,\n *\tminAngle: 0.0,\n *\tmaxAngle: 1.0,\n * } ];\n */\n\n\nclass CCDIKSolver {\n  constructor(mesh, iks) {\n    _defineProperty(this, \"q\", new Quaternion());\n\n    _defineProperty(this, \"targetPos\", new Vector3());\n\n    _defineProperty(this, \"targetVec\", new Vector3());\n\n    _defineProperty(this, \"effectorPos\", new Vector3());\n\n    _defineProperty(this, \"effectorVec\", new Vector3());\n\n    _defineProperty(this, \"linkPos\", new Vector3());\n\n    _defineProperty(this, \"invLinkQ\", new Quaternion());\n\n    _defineProperty(this, \"linkScale\", new Vector3());\n\n    _defineProperty(this, \"axis\", new Vector3());\n\n    _defineProperty(this, \"vector\", new Vector3());\n\n    this.mesh = mesh;\n    this.iks = iks;\n    const bones = this.mesh.skeleton.bones;\n\n    for (let i = 0, il = this.iks.length; i < il; i++) {\n      const ik = this.iks[i];\n      const effector = bones[ik.effector];\n      const links = ik.links;\n      let link0, link1;\n      link0 = effector;\n\n      for (let j = 0, jl = links.length; j < jl; j++) {\n        link1 = bones[links[j].index];\n\n        if (link0.parent !== link1) {\n          console.warn(`THREE.CCDIKSolver: bone ${link0.name} is not the child of bone ${link1.name}`);\n        }\n\n        link0 = link1;\n      }\n    }\n  }\n\n  update() {\n    const bones = this.mesh.skeleton.bones;\n    const iks = this.iks; // for reference overhead reduction in loop\n\n    const math = Math;\n\n    for (let i = 0, il = iks.length; i < il; i++) {\n      const ik = iks[i];\n      const effector = bones[ik.effector];\n      const target = bones[ik.target]; // don't use getWorldPosition() here for the performance\n      // because it calls updateMatrixWorld( true ) inside.\n\n      this.targetPos.setFromMatrixPosition(target.matrixWorld);\n      const links = ik.links;\n      const iteration = ik.iteration !== undefined ? ik.iteration : 1;\n\n      for (let j = 0; j < iteration; j++) {\n        let rotated = false;\n\n        for (let k = 0, kl = links.length; k < kl; k++) {\n          const link = bones[links[k].index]; // skip this link and following links.\n          // this skip is used for MMD performance optimization.\n\n          if (links[k].enabled === false) break;\n          const limitation = links[k].limitation;\n          const rotationMin = links[k].rotationMin;\n          const rotationMax = links[k].rotationMax; // don't use getWorldPosition/Quaternion() here for the performance\n          // because they call updateMatrixWorld( true ) inside.\n\n          link.matrixWorld.decompose(this.linkPos, this.invLinkQ, this.linkScale);\n          this.invLinkQ.invert();\n          this.effectorPos.setFromMatrixPosition(effector.matrixWorld); // work in link world\n\n          this.effectorVec.subVectors(this.effectorPos, this.linkPos);\n          this.effectorVec.applyQuaternion(this.invLinkQ);\n          this.effectorVec.normalize();\n          this.targetVec.subVectors(this.targetPos, this.linkPos);\n          this.targetVec.applyQuaternion(this.invLinkQ);\n          this.targetVec.normalize();\n          let angle = this.targetVec.dot(this.effectorVec);\n\n          if (angle > 1.0) {\n            angle = 1.0;\n          } else if (angle < -1.0) {\n            angle = -1.0;\n          }\n\n          angle = math.acos(angle); // skip if changing angle is too small to prevent vibration of bone\n          // Refer to http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mmd.three.js\n\n          if (angle < 1e-5) continue;\n\n          if (ik.minAngle !== undefined && angle < ik.minAngle) {\n            angle = ik.minAngle;\n          }\n\n          if (ik.maxAngle !== undefined && angle > ik.maxAngle) {\n            angle = ik.maxAngle;\n          }\n\n          this.axis.crossVectors(this.effectorVec, this.targetVec);\n          this.axis.normalize();\n          this.q.setFromAxisAngle(this.axis, angle);\n          link.quaternion.multiply(this.q); // TODO: re-consider the limitation specification\n\n          if (limitation !== undefined) {\n            let c = link.quaternion.w;\n            if (c > 1.0) c = 1.0;\n            const c2 = math.sqrt(1 - c * c);\n            link.quaternion.set(limitation.x * c2, limitation.y * c2, limitation.z * c2, c);\n          }\n\n          if (rotationMin !== undefined) {\n            link.rotation.setFromVector3(link.rotation.toVector3(this.vector).max(rotationMin));\n          }\n\n          if (rotationMax !== undefined) {\n            link.rotation.setFromVector3(link.rotation.toVector3(this.vector).min(rotationMax));\n          }\n\n          link.updateMatrixWorld(true);\n          rotated = true;\n        }\n\n        if (!rotated) break;\n      }\n    }\n\n    return this;\n  }\n\n  createHelper() {\n    return new CCDIKHelper(this.mesh, this.mesh.geometry.userData.MMD.iks);\n  }\n\n}\n\nexport { CCDIKHelper, CCDIKSolver };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}