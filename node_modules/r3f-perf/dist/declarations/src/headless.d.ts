import { FC, HTMLAttributes } from 'react';
import { PerfProps } from '.';
import * as THREE from 'three';
export declare let matriceWorldCount: {
    value: number;
};
export declare let matriceCount: {
    value: number;
};
declare type drawCount = {
    type: string;
    drawCount: number;
};
export declare type drawCounts = {
    total: number;
    type: string;
    data: drawCount[];
};
export declare type ProgramsPerf = {
    meshes?: {
        [index: string]: THREE.Mesh[];
    };
    material: THREE.Material;
    program?: WebGLProgram;
    visible: boolean;
    drawCounts: drawCounts;
    expand: boolean;
};
export declare type ProgramsPerfs = Map<string, ProgramsPerf>;
export declare type State = {
    log: any;
    paused: boolean;
    triggerProgramsUpdate: number;
    customData: number;
    chart: {
        data: {
            [index: string]: number[];
        };
        circularId: number;
    };
    gl: THREE.WebGLRenderer | undefined;
    scene: THREE.Scene | undefined;
    programs: ProgramsPerfs;
    objectWithMaterials: THREE.Mesh[] | null;
    tab: 'infos' | 'programs' | 'data';
};
export declare const usePerfStore: import("zustand").UseBoundStore<State, import("zustand").StoreApi<State>>;
export declare const setCustomData: (customData: number) => void;
export declare const getCustomData: () => number;
export declare const usePerfFunc: () => {
    log: any;
    gl: THREE.WebGLInfo | undefined;
    programs: ProgramsPerfs;
};
export interface Props extends HTMLAttributes<HTMLDivElement> {
}
/**
 * Performance profiler component
 */
export declare const Headless: FC<PerfProps>;
export {};
